package net.ajaskey.common;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class CommonTests2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1001");
        java.util.Map<java.lang.String, java.lang.Integer> strMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = net.ajaskey.common.Utils.findName(strMap0, (java.lang.Integer) 161);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1002");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        java.lang.String str3 = dateTime1.toString();
        java.text.SimpleDateFormat simpleDateFormat5 = null;
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat5);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        boolean boolean10 = dateTime6.isWeekday();
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long15 = dateTime6.getDeltaDays(dateTime14);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(dateTime6);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime(100L);
        double double23 = dateTime20.getDeltaYears(dateTime22);
        boolean boolean24 = dateTime22.isWeekday();
        java.util.Date date25 = dateTime22.getTime();
        dateTime6.set(date25);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime(100L);
        int int29 = dateTime28.getMs();
        java.lang.String str30 = dateTime28.toString();
        boolean boolean31 = dateTime6.isLessThanOrEqual(dateTime28);
        boolean boolean32 = dateTime1.isLessThanOrEqual(dateTime28);
        int int33 = dateTime1.getYear();
        java.lang.String str34 = dateTime1.format();
        dateTime1.setFirstWorkDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "31-Dec-1969" + "'", str3, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1972.041095890411d) + "'", double23 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "31-Dec-1969" + "'", str30, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1969 + "'", int33 == 1969);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "31-Dec-1969" + "'", str34, "31-Dec-1969");
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1003");
        java.text.SimpleDateFormat simpleDateFormat2 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime("January", simpleDateFormat2);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime("", simpleDateFormat2);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime(100L);
        double double12 = dateTime9.getDeltaYears(dateTime11);
        int int13 = dateTime9.getHour();
        dateTime9.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat18 = null;
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat18);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double22 = dateTime19.getDeltaYears(dateTime21);
        boolean boolean23 = dateTime9.isEqual(dateTime21);
        java.text.SimpleDateFormat simpleDateFormat25 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat27 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat28 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime("", simpleDateFormat27, simpleDateFormat28);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat25, simpleDateFormat28);
        dateTime9.setSdf(simpleDateFormat25);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat38 = null;
        java.text.SimpleDateFormat simpleDateFormat39 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("January", simpleDateFormat38, simpleDateFormat39);
        java.text.SimpleDateFormat simpleDateFormat43 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime("January", simpleDateFormat43);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime("", simpleDateFormat43);
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime("", simpleDateFormat39, simpleDateFormat43);
        dateTime35.setSdf(simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime("December", simpleDateFormat25, simpleDateFormat39);
        dateTime4.set(dateTime48);
        boolean boolean50 = dateTime48.isWeekday();
        org.junit.Assert.assertNotNull(simpleDateFormat2);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1972.041095890411d) + "'", double12 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat25);
        org.junit.Assert.assertNotNull(simpleDateFormat27);
        org.junit.Assert.assertNotNull(simpleDateFormat28);
        org.junit.Assert.assertNotNull(simpleDateFormat39);
        org.junit.Assert.assertNotNull(simpleDateFormat43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1004");
        net.ajaskey.common.Utils.TAB = "Thu 10-Apr-0002 10:43:06";
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1005");
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime(100L);
        double double7 = dateTime4.getDeltaYears(dateTime6);
        int int8 = dateTime4.getHour();
        dateTime4.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat13 = null;
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat13);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        boolean boolean18 = dateTime4.isEqual(dateTime16);
        java.text.SimpleDateFormat simpleDateFormat20 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat22 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat23 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime("", simpleDateFormat22, simpleDateFormat23);
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat20, simpleDateFormat23);
        dateTime4.setSdf(simpleDateFormat20);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat33 = null;
        java.text.SimpleDateFormat simpleDateFormat34 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime("January", simpleDateFormat33, simpleDateFormat34);
        java.text.SimpleDateFormat simpleDateFormat38 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime("January", simpleDateFormat38);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("", simpleDateFormat38);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("", simpleDateFormat34, simpleDateFormat38);
        dateTime30.setSdf(simpleDateFormat34);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime("December", simpleDateFormat20, simpleDateFormat34);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime(100L);
        int int46 = dateTime45.getMs();
        java.text.SimpleDateFormat simpleDateFormat47 = net.ajaskey.common.Utils.sdf;
        dateTime45.setSdf(simpleDateFormat47);
        java.lang.String str49 = dateTime45.format();
        boolean boolean50 = dateTime43.isLessThanOrEqual(dateTime45);
        int int51 = dateTime43.getMs();
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime(100L);
        int int55 = dateTime54.getMs();
        java.text.SimpleDateFormat simpleDateFormat56 = net.ajaskey.common.Utils.sdf;
        dateTime54.setSdf(simpleDateFormat56);
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat56);
        java.text.SimpleDateFormat simpleDateFormat60 = null;
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat60);
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double64 = dateTime61.getDeltaYears(dateTime63);
        boolean boolean65 = dateTime63.isNull();
        java.text.SimpleDateFormat simpleDateFormat67 = null;
        net.ajaskey.common.DateTime dateTime68 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat67);
        dateTime68.set((int) ' ', 0, 11);
        boolean boolean73 = dateTime63.isGreaterThanOrEqual(dateTime68);
        double double74 = dateTime58.getDeltaYears(dateTime63);
        java.text.SimpleDateFormat simpleDateFormat76 = null;
        net.ajaskey.common.DateTime dateTime77 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat76);
        net.ajaskey.common.DateTime dateTime79 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double80 = dateTime77.getDeltaYears(dateTime79);
        boolean boolean81 = dateTime79.isNull();
        boolean boolean82 = dateTime63.isGreaterThan(dateTime79);
        boolean boolean83 = dateTime43.isLessThanOrEqual(dateTime79);
        java.util.Date date84 = dateTime43.getTime();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1972.041095890411d) + "'", double7 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat20);
        org.junit.Assert.assertNotNull(simpleDateFormat22);
        org.junit.Assert.assertNotNull(simpleDateFormat23);
        org.junit.Assert.assertNotNull(simpleDateFormat34);
        org.junit.Assert.assertNotNull(simpleDateFormat38);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "31-Dec-1969" + "'", str49, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat56);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(date84);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1006");
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("                    25", "Thu 10-Apr-0002 10:43:42");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'T'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1007");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(25, 17, 1869);
        java.util.Calendar calendar4 = null;
        dateTime3.set(calendar4);
        boolean boolean6 = dateTime3.isNull();
        int int7 = dateTime3.getSecond();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 55 + "'", int7 == 55);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1008");
        java.lang.String[] strArray4 = new java.lang.String[] { "     5.00" };
        java.util.List<java.io.File> fileList5 = net.ajaskey.common.Utils.getDirTree("                                                 100", strArray4);
        java.util.List<java.io.File> fileList6 = net.ajaskey.common.Utils.getDirTree("                                                 100", strArray4);
        java.util.List<java.io.File> fileList7 = net.ajaskey.common.Utils.getDirTree("                                                                                                                                                         1,965.97", strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(fileList5);
        org.junit.Assert.assertNull(fileList6);
        org.junit.Assert.assertNull(fileList7);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1009");
        net.ajaskey.common.Utils.sleep(594);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1010");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("Thu 10-Apr-0002 10:43:54", true);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1011");
        java.util.Map<java.lang.String, java.lang.Integer> strMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = net.ajaskey.common.Utils.findName(strMap0, (java.lang.Integer) 22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1012");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat5 = null;
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat5);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean14 = dateTime8.isEqual(dateTime13);
        java.util.Calendar calendar15 = dateTime8.getCal();
        boolean boolean16 = dateTime3.isLessThan(dateTime8);
        java.lang.String str17 = dateTime8.toFullString();
        int int18 = dateTime8.getSecond();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str17, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1013");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        java.util.Calendar calendar11 = dateTime4.getCal();
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime(100L);
        double double18 = dateTime15.getDeltaYears(dateTime17);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        double double25 = dateTime22.getDeltaYears(dateTime24);
        int int26 = dateTime22.getHour();
        int int27 = dateTime22.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime(100L);
        double double34 = dateTime31.getDeltaYears(dateTime33);
        boolean boolean35 = dateTime33.isWeekday();
        boolean boolean36 = net.ajaskey.common.Utils.sameDate(dateTime22, dateTime33);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime(100L);
        dateTime38.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime(100L);
        double double49 = dateTime46.getDeltaYears(dateTime48);
        boolean boolean50 = dateTime48.isWeekday();
        java.util.Date date51 = dateTime48.getTime();
        dateTime38.set(dateTime48);
        int int53 = dateTime38.getYear();
        boolean boolean54 = dateTime33.isGreaterThanOrEqual(dateTime38);
        boolean boolean55 = dateTime15.sameDate(dateTime33);
        double double56 = dateTime4.getDeltaYears(dateTime15);
        int int57 = dateTime15.getYear();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1972.041095890411d) + "'", double18 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1972.041095890411d) + "'", double25 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1972.041095890411d) + "'", double34 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1972.041095890411d) + "'", double49 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1969 + "'", int53 == 1969);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1972.041095890411d + "'", double56 == 1972.041095890411d);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1014");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("                     8.00", true);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1015");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("Thu 10-Apr-0002 10:43:29", false);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1016");
        net.ajaskey.common.Utils.sleep((-2019));
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1017");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (byte) 1, 1869, 48);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1018");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        java.text.SimpleDateFormat simpleDateFormat7 = dateTime3.getSdf();
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("5.00", "     10");
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("5.00", "     10");
        dateTime13.add((int) (short) 0, (int) 'a');
        int int17 = dateTime13.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime(100L);
        int int20 = dateTime19.getMs();
        int int21 = dateTime19.getHour();
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat27 = null;
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat27);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double31 = dateTime28.getDeltaYears(dateTime30);
        boolean boolean32 = dateTime25.isLessThan(dateTime30);
        java.lang.String str33 = dateTime30.toFullString();
        dateTime30.add(10, (int) (byte) -1);
        java.text.SimpleDateFormat simpleDateFormat38 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat40 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat41 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime("", simpleDateFormat40, simpleDateFormat41);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat38, simpleDateFormat41);
        boolean boolean44 = dateTime30.isGreaterThan(dateTime43);
        boolean boolean45 = dateTime19.isEqual(dateTime30);
        net.ajaskey.common.DateTime dateTime46 = null;
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime(dateTime46);
        dateTime47.set(42, 10, 10);
        java.util.Date date52 = dateTime47.getTime();
        net.ajaskey.common.DateTime dateTime53 = dateTime19.copy(dateTime47);
        net.ajaskey.common.DateTime dateTime54 = dateTime13.copy(dateTime19);
        boolean boolean55 = net.ajaskey.common.Utils.sameMonth(dateTime10, dateTime54);
        dateTime3.set(dateTime54);
        net.ajaskey.common.DateTime dateTime59 = dateTime3.parse("Thu 10-Apr-0002 10:43:24", "                                             2,020.00");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = dateTime59.toFullString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat7);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str33, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertNotNull(simpleDateFormat38);
        org.junit.Assert.assertNotNull(simpleDateFormat40);
        org.junit.Assert.assertNotNull(simpleDateFormat41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(date52);
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Sat Nov 10 10:43:56 MST 42");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(dateTime59);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1019");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(10, 1967, 9);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1020");
        net.ajaskey.common.Utils.NL = "Mon 10-Apr-0002 00:00:00";
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1021");
        java.util.zip.ZipOutputStream zipOutputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.Utils.writeToZipFilezipOutputStream1);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; messagehe filename, directory name, or volume label syntax is incorrect)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1022");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("5.00", "     10");
        dateTime2.add((int) (short) 0, (int) 'a');
        int int6 = dateTime2.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        int int9 = dateTime8.getMs();
        int int10 = dateTime8.getHour();
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        boolean boolean21 = dateTime14.isLessThan(dateTime19);
        java.lang.String str22 = dateTime19.toFullString();
        dateTime19.add(10, (int) (byte) -1);
        java.text.SimpleDateFormat simpleDateFormat27 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat29 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat30 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime("", simpleDateFormat29, simpleDateFormat30);
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat27, simpleDateFormat30);
        boolean boolean33 = dateTime19.isGreaterThan(dateTime32);
        boolean boolean34 = dateTime8.isEqual(dateTime19);
        net.ajaskey.common.DateTime dateTime35 = null;
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime(dateTime35);
        dateTime36.set(42, 10, 10);
        java.util.Date date41 = dateTime36.getTime();
        net.ajaskey.common.DateTime dateTime42 = dateTime8.copy(dateTime36);
        net.ajaskey.common.DateTime dateTime43 = dateTime2.copy(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat45 = null;
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat45);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double49 = dateTime46.getDeltaYears(dateTime48);
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean54 = dateTime48.isEqual(dateTime53);
        java.util.Calendar calendar55 = dateTime48.getCal();
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime(1, (int) '4', 5);
        double double60 = dateTime48.getDeltaYears(dateTime59);
        double double61 = dateTime43.getDeltaYears(dateTime59);
        boolean boolean62 = dateTime59.isNull();
        boolean boolean63 = dateTime59.isNull();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str22, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertNotNull(simpleDateFormat27);
        org.junit.Assert.assertNotNull(simpleDateFormat29);
        org.junit.Assert.assertNotNull(simpleDateFormat30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Sat Nov 10 10:43:56 MST 42");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1965.9671232876713d + "'", double60 == 1965.9671232876713d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1965.9671232876713d + "'", double61 == 1965.9671232876713d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1023");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readTextFile("Thu 10-Apr-0002 10:43:18", false);
        net.ajaskey.common.TextUtils.print(strList2);
        java.lang.String str4 = net.ajaskey.common.TextUtils.toString(strList2);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1024");
        net.ajaskey.common.DateTime dateTime0 = null;
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(dateTime0);
        dateTime1.set(42, 10, 10);
        java.util.Date date6 = dateTime1.getTime();
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime(date6);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.util.Calendar calendar12 = null;
        dateTime11.set(calendar12);
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat15);
        dateTime16.set((int) ' ', 0, 11);
        boolean boolean21 = dateTime16.isWeekday();
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime(100L);
        int int24 = dateTime23.getMs();
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime(100L);
        double double31 = dateTime28.getDeltaYears(dateTime30);
        java.text.SimpleDateFormat simpleDateFormat32 = dateTime28.getSdf();
        boolean boolean33 = dateTime23.isLessThanOrEqual(dateTime28);
        java.util.Date date34 = dateTime28.getTime();
        dateTime16.set(date34);
        long long36 = dateTime11.getDeltaMilliSeconds(dateTime16);
        boolean boolean37 = net.ajaskey.common.Utils.sameDate(dateTime7, dateTime11);
        int int38 = dateTime7.getDayOfYear();
        java.lang.String str39 = dateTime7.getMonth();
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 10 10:43:56 MST 42");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1972.041095890411d) + "'", double31 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Thu Apr 10 10:43:56 MST 2");
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 314 + "'", int38 == 314);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "November" + "'", str39, "November");
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1025");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        boolean boolean3 = dateTime1.isWeekday();
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime((long) (short) 0);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime(100L);
        int int8 = dateTime7.getMs();
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime(100L);
        double double15 = dateTime12.getDeltaYears(dateTime14);
        java.text.SimpleDateFormat simpleDateFormat16 = dateTime12.getSdf();
        boolean boolean17 = dateTime7.isLessThanOrEqual(dateTime12);
        java.text.SimpleDateFormat simpleDateFormat19 = null;
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat19);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double23 = dateTime20.getDeltaYears(dateTime22);
        boolean boolean24 = dateTime20.isWeekday();
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long29 = dateTime20.getDeltaDays(dateTime28);
        long long30 = dateTime7.getDeltaDays(dateTime28);
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime(100L);
        dateTime32.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean37 = dateTime32.isWeekday();
        int int38 = dateTime7.getYears(dateTime32);
        int int39 = dateTime7.getYear();
        java.util.Calendar calendar40 = dateTime7.getCal();
        net.ajaskey.common.DateTime dateTime41 = dateTime5.copy(dateTime7);
        boolean boolean42 = dateTime1.isGreaterThan(dateTime7);
        java.text.SimpleDateFormat simpleDateFormat44 = null;
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat44);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double48 = dateTime45.getDeltaYears(dateTime47);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean53 = dateTime47.isEqual(dateTime52);
        java.lang.String str54 = dateTime52.getMonth();
        net.ajaskey.common.DateTime dateTime55 = dateTime7.copy(dateTime52);
        java.util.Date date56 = dateTime7.getTime();
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime(date56);
        java.lang.Class<?> wildcardClass58 = dateTime57.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1972.041095890411d) + "'", double15 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 719795L + "'", long30 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1870) + "'", int38 == (-1870));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1969 + "'", int39 == 1969);
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "April" + "'", str54, "April");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1026");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("Thu 10-Apr-0002 10:43:49", true);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1027");
        net.ajaskey.common.TextUtils.printline("                                 477");
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1028");
        net.ajaskey.common.Utils.makeDir("Thu 10-Apr-0002 10:43:44");
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1029");
        java.lang.String str2 = net.ajaskey.common.Utils.fmt((double) 53, 42);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                     53.00" + "'", str2, "                                     53.00");
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1030");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        java.text.SimpleDateFormat simpleDateFormat13 = null;
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat13);
        boolean boolean15 = dateTime6.isLessThanOrEqual(dateTime14);
        boolean boolean16 = dateTime6.isWeekday();
        java.lang.String str17 = dateTime6.format();
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime(100L);
        int int20 = dateTime19.getMs();
        boolean boolean21 = dateTime19.isWeekday();
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime((long) (short) 0);
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime(100L);
        int int26 = dateTime25.getMs();
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime(100L);
        double double33 = dateTime30.getDeltaYears(dateTime32);
        java.text.SimpleDateFormat simpleDateFormat34 = dateTime30.getSdf();
        boolean boolean35 = dateTime25.isLessThanOrEqual(dateTime30);
        java.text.SimpleDateFormat simpleDateFormat37 = null;
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat37);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double41 = dateTime38.getDeltaYears(dateTime40);
        boolean boolean42 = dateTime38.isWeekday();
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long47 = dateTime38.getDeltaDays(dateTime46);
        long long48 = dateTime25.getDeltaDays(dateTime46);
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime(100L);
        dateTime50.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean55 = dateTime50.isWeekday();
        int int56 = dateTime25.getYears(dateTime50);
        int int57 = dateTime25.getYear();
        java.util.Calendar calendar58 = dateTime25.getCal();
        net.ajaskey.common.DateTime dateTime59 = dateTime23.copy(dateTime25);
        boolean boolean60 = dateTime19.isGreaterThan(dateTime25);
        java.text.SimpleDateFormat simpleDateFormat62 = null;
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat62);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double66 = dateTime63.getDeltaYears(dateTime65);
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean71 = dateTime65.isEqual(dateTime70);
        java.lang.String str72 = dateTime70.getMonth();
        net.ajaskey.common.DateTime dateTime73 = dateTime25.copy(dateTime70);
        boolean boolean74 = dateTime6.isEqual(dateTime73);
        int int75 = dateTime6.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "BAD-DATE-FORMAT" + "'", str17, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1972.041095890411d) + "'", double33 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 719795L + "'", long48 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1870) + "'", int56 == (-1870));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1969 + "'", int57 == 1969);
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "April" + "'", str72, "April");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1031");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        dateTime1.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime(100L);
        double double12 = dateTime9.getDeltaYears(dateTime11);
        boolean boolean13 = dateTime11.isWeekday();
        java.util.Date date14 = dateTime11.getTime();
        dateTime1.set(dateTime11);
        int int16 = dateTime1.getYear();
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime(100L);
        int int19 = dateTime18.getMs();
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime(100L);
        double double26 = dateTime23.getDeltaYears(dateTime25);
        java.text.SimpleDateFormat simpleDateFormat27 = dateTime23.getSdf();
        boolean boolean28 = dateTime18.isLessThanOrEqual(dateTime23);
        boolean boolean29 = dateTime23.isWeekday();
        boolean boolean30 = dateTime23.isWeekday();
        boolean boolean31 = dateTime1.sameDate(dateTime23);
        java.util.Date date32 = null;
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime(date32);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime(100L);
        double double40 = dateTime37.getDeltaYears(dateTime39);
        int int41 = dateTime37.getHour();
        java.text.SimpleDateFormat simpleDateFormat43 = null;
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat43);
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double47 = dateTime44.getDeltaYears(dateTime46);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean52 = dateTime46.isEqual(dateTime51);
        java.util.Calendar calendar53 = dateTime46.getCal();
        dateTime37.set(calendar53);
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime(calendar53);
        net.ajaskey.common.DateTime dateTime56 = dateTime33.copy(dateTime55);
        net.ajaskey.common.DateTime dateTime60 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime62 = new net.ajaskey.common.DateTime(100L);
        double double63 = dateTime60.getDeltaYears(dateTime62);
        boolean boolean64 = dateTime62.isWeekday();
        int int65 = dateTime62.getDayOfYear();
        long long66 = dateTime56.getDeltaMilliSeconds(dateTime62);
        net.ajaskey.common.DateTime dateTime68 = new net.ajaskey.common.DateTime(100L);
        int int69 = dateTime68.getMs();
        java.lang.String str70 = dateTime68.toString();
        java.lang.String str72 = dateTime68.format("         1");
        long long73 = dateTime56.getDeltaDays(dateTime68);
        boolean boolean74 = net.ajaskey.common.Utils.sameMonth(dateTime1, dateTime56);
        java.lang.String str75 = dateTime56.getMonth();
        net.ajaskey.common.DateTime dateTime78 = new net.ajaskey.common.DateTime("5.00", "     10");
        int int79 = dateTime78.getDayOfWeek();
        int int80 = dateTime78.getDayOfMonth();
        long long81 = dateTime56.getDeltaMilliSeconds(dateTime78);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1972.041095890411d) + "'", double12 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1969 + "'", int16 == 1969);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1972.041095890411d) + "'", double26 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1972.041095890411d) + "'", double40 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1972.041095890411d) + "'", double63 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 365 + "'", int65 == 365);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "31-Dec-1969" + "'", str70, "31-Dec-1969");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "         1" + "'", str72, "         1");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "December" + "'", str75, "December");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1032");
        java.util.zip.ZipOutputStream zipOutputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.Utils.writeToZipFile("Thu 25-Jun-2020 10:43:26", zipOutputStream1);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: Thu 25-Jun-2020 10:43:26 (The filename, directory name, or volume label syntax is incorrect)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1033");
        java.lang.String[] strArray7 = new java.lang.String[] { "           4", "           6" };
        java.util.List<java.io.File> fileList8 = net.ajaskey.common.Utils.getDirTree("                                 42", strArray7);
        java.util.List<java.io.File> fileList9 = net.ajaskey.common.Utils.getDirTree("", strArray7);
        java.util.List<java.io.File> fileList10 = net.ajaskey.common.Utils.getDirTree("Thu 10-Apr-0002 10:43:06", strArray7);
        java.util.List<java.io.File> fileList11 = net.ajaskey.common.Utils.getDirTree("Thu 10-Apr-0002 10:43:22", strArray7);
        java.util.List<java.io.File> fileList12 = net.ajaskey.common.Utils.getDirTree("            32", strArray7);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(fileList8);
        org.junit.Assert.assertNull(fileList9);
        org.junit.Assert.assertNull(fileList10);
        org.junit.Assert.assertNull(fileList11);
        org.junit.Assert.assertNull(fileList12);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1034");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        int int7 = dateTime3.getHour();
        java.util.Calendar calendar8 = dateTime3.getCal();
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime(calendar8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((long) (short) 0);
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime(100L);
        int int14 = dateTime13.getMs();
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime(100L);
        double double21 = dateTime18.getDeltaYears(dateTime20);
        java.text.SimpleDateFormat simpleDateFormat22 = dateTime18.getSdf();
        boolean boolean23 = dateTime13.isLessThanOrEqual(dateTime18);
        java.text.SimpleDateFormat simpleDateFormat25 = null;
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat25);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double29 = dateTime26.getDeltaYears(dateTime28);
        boolean boolean30 = dateTime26.isWeekday();
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long35 = dateTime26.getDeltaDays(dateTime34);
        long long36 = dateTime13.getDeltaDays(dateTime34);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime(100L);
        dateTime38.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean43 = dateTime38.isWeekday();
        int int44 = dateTime13.getYears(dateTime38);
        int int45 = dateTime13.getYear();
        java.util.Calendar calendar46 = dateTime13.getCal();
        net.ajaskey.common.DateTime dateTime47 = dateTime11.copy(dateTime13);
        java.util.Calendar calendar48 = dateTime13.getCal();
        boolean boolean49 = net.ajaskey.common.Utils.sameDate(dateTime9, dateTime13);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime((long) 53);
        int int52 = dateTime51.getDayOfYear();
        double double53 = dateTime13.getDeltaYears(dateTime51);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-62190310562799,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=43,SECOND=57,MILLISECOND=201,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1972.041095890411d) + "'", double21 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 719795L + "'", long36 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1870) + "'", int44 == (-1870));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1969 + "'", int45 == 1969);
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 365 + "'", int52 == 365);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1035");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) (short) 0);
        int int2 = dateTime1.getHour();
        net.ajaskey.common.DateTime dateTime5 = dateTime1.parse("                0", "January                                 42                                 42                                                                                               52.00                                 42hi!                                 42");
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime((long) 8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime(100L);
        double double14 = dateTime11.getDeltaYears(dateTime13);
        int int15 = dateTime11.getHour();
        dateTime11.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat20 = null;
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat20);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double24 = dateTime21.getDeltaYears(dateTime23);
        boolean boolean25 = dateTime11.isEqual(dateTime23);
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat31 = null;
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat31);
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double35 = dateTime32.getDeltaYears(dateTime34);
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean40 = dateTime34.isEqual(dateTime39);
        java.util.Calendar calendar41 = dateTime34.getCal();
        boolean boolean42 = dateTime29.isLessThan(dateTime34);
        dateTime29.setFirstWorkDay();
        boolean boolean44 = dateTime11.sameDate(dateTime29);
        boolean boolean45 = net.ajaskey.common.Utils.sameMonth(dateTime7, dateTime29);
        // The following exception was thrown during execution in test generation
        try {
            dateTime5.set(dateTime29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
        org.junit.Assert.assertNull(dateTime5);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1972.041095890411d) + "'", double14 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1036");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        boolean boolean14 = dateTime9.isGreaterThanOrEqual(dateTime12);
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        boolean boolean21 = dateTime17.isWeekday();
        boolean boolean22 = dateTime12.isLessThanOrEqual(dateTime17);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        dateTime24.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean29 = dateTime24.isWeekday();
        boolean boolean30 = dateTime12.isGreaterThanOrEqual(dateTime24);
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean35 = dateTime12.isGreaterThanOrEqual(dateTime34);
        boolean boolean36 = dateTime34.isWeekday();
        java.lang.String str37 = dateTime34.format();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "BAD-DATE-FORMAT" + "'", str37, "BAD-DATE-FORMAT");
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1037");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readTextFile("Thu 10-Apr-0002 10:43:12", true);
        org.junit.Assert.assertNotNull(strList2);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1038");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("Thu 10-Apr-0002 10:43:42");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1039");
        net.ajaskey.common.Utils.makeDir("                                                                                                                                               62,190,310,594,996");
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1040");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        int int7 = dateTime3.getHour();
        dateTime3.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat12 = null;
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat12);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        boolean boolean17 = dateTime3.isEqual(dateTime15);
        java.lang.String str18 = dateTime3.toString();
        dateTime3.add(100, (int) (byte) 0);
        java.lang.String str22 = dateTime3.toFullString();
        java.lang.Class<?> wildcardClass23 = dateTime3.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "10-Apr-0002" + "'", str18, "10-Apr-0002");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Thu 10-Apr-0002 10:43:57" + "'", str22, "Thu 10-Apr-0002 10:43:57");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1041");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) 25);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1042");
        java.util.zip.ZipOutputStream zipOutputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.Utils.writeToZipFile("7", zipOutputStream1);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: 7 (Access is denied)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1043");
        java.util.Map<java.lang.String, java.lang.Integer> strMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = net.ajaskey.common.Utils.findName(strMap0, (java.lang.Integer) 820);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1044");
        net.ajaskey.common.Utils.makeDir("Thu 10-Apr-0002 10:43:28");
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1045");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("                                 477", simpleDateFormat1);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1046");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean4 = dateTime3.isNull();
        java.lang.String str5 = dateTime3.getDay();
        java.lang.String str6 = dateTime3.getMonth();
        java.lang.String str7 = dateTime3.getDay();
        java.lang.String str8 = dateTime3.toFullString();
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime(100L);
        double double15 = dateTime12.getDeltaYears(dateTime14);
        int int16 = dateTime12.getHour();
        dateTime12.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat21 = null;
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat21);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double25 = dateTime22.getDeltaYears(dateTime24);
        boolean boolean26 = dateTime12.isEqual(dateTime24);
        int int27 = dateTime12.getDayOfYear();
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime(100L);
        int int30 = dateTime29.getMs();
        boolean boolean31 = dateTime29.isWeekday();
        int int32 = dateTime29.getHour();
        java.text.SimpleDateFormat simpleDateFormat34 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime("January", simpleDateFormat34);
        dateTime29.setSdf(simpleDateFormat34);
        java.text.SimpleDateFormat simpleDateFormat37 = dateTime29.getSdf();
        boolean boolean38 = dateTime12.isGreaterThan(dateTime29);
        java.text.SimpleDateFormat simpleDateFormat40 = null;
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat40);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double44 = dateTime41.getDeltaYears(dateTime43);
        boolean boolean45 = dateTime41.isWeekday();
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long50 = dateTime41.getDeltaDays(dateTime49);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime(dateTime41);
        dateTime51.setFirstWorkDay();
        boolean boolean53 = dateTime29.sameDate(dateTime51);
        boolean boolean54 = dateTime3.sameDate(dateTime29);
        int int55 = dateTime3.getSecond();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Thursday" + "'", str5, "Thursday");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "April" + "'", str6, "April");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Thursday" + "'", str7, "Thursday");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Thu 10-Apr-0002 10:43:57" + "'", str8, "Thu 10-Apr-0002 10:43:57");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1972.041095890411d) + "'", double15 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(simpleDateFormat34);
        org.junit.Assert.assertNotNull(simpleDateFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 57 + "'", int55 == 57);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1047");
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("                               36", "Thu 10-Apr-0002 10:43:46");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'T'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1048");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        long long6 = dateTime3.getDeltaDays(dateTime5);
        int int7 = dateTime3.getHour();
        dateTime3.add((int) (byte) 100, (int) (byte) 0);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime(100L);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        java.text.SimpleDateFormat simpleDateFormat21 = dateTime17.getSdf();
        boolean boolean22 = dateTime12.isLessThanOrEqual(dateTime17);
        java.text.SimpleDateFormat simpleDateFormat24 = null;
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat24);
        boolean boolean26 = dateTime17.isLessThanOrEqual(dateTime25);
        boolean boolean27 = dateTime3.sameDate(dateTime17);
        java.lang.Class<?> wildcardClass28 = dateTime3.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-719795L) + "'", long6 == (-719795L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1972.041095890411d) + "'", double20 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1049");
        net.ajaskey.common.TextUtils.printline("Thu 25-Jun-2020 10:43:26");
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1050");
        net.ajaskey.common.Utils.NL = "JanuaryThursdayThursday                                                                                               52.00Thursdayhi!Thursday";
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1051");
        net.ajaskey.common.Utils.NL = "                                     5";
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1052");
        java.lang.String str2 = net.ajaskey.common.Utils.lfmt(62190310613374L, 54);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                    62,190,310,613,374" + "'", str2, "                                    62,190,310,613,374");
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1053");
        java.util.Map<java.lang.String, java.lang.Integer> strMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = net.ajaskey.common.Utils.findName(strMap0, (java.lang.Integer) 86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1054");
        net.ajaskey.common.Utils.NL = "Thu 10-Apr-0002 10:43:41";
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1055");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) (short) 0);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime(100L);
        double double8 = dateTime5.getDeltaYears(dateTime7);
        int int9 = dateTime5.getHour();
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime();
        net.ajaskey.common.DateTime dateTime11 = null;
        boolean boolean12 = dateTime10.isGreaterThan(dateTime11);
        java.text.SimpleDateFormat simpleDateFormat14 = null;
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat14);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double18 = dateTime15.getDeltaYears(dateTime17);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean23 = dateTime17.isEqual(dateTime22);
        java.util.Calendar calendar24 = dateTime17.getCal();
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime(calendar24);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(calendar24);
        boolean boolean27 = dateTime10.isLessThan(dateTime26);
        boolean boolean28 = dateTime5.isLessThan(dateTime10);
        boolean boolean29 = dateTime1.isGreaterThan(dateTime10);
        java.text.SimpleDateFormat simpleDateFormat32 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime("January", simpleDateFormat32);
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime("", simpleDateFormat32);
        dateTime34.setFirstWorkDay();
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat41 = null;
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat41);
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double45 = dateTime42.getDeltaYears(dateTime44);
        boolean boolean46 = dateTime39.isLessThan(dateTime44);
        java.lang.String str47 = dateTime44.toFullString();
        dateTime44.add(10, (int) (byte) -1);
        java.text.SimpleDateFormat simpleDateFormat52 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat54 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat55 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime("", simpleDateFormat54, simpleDateFormat55);
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat52, simpleDateFormat55);
        boolean boolean58 = dateTime44.isGreaterThan(dateTime57);
        java.text.SimpleDateFormat simpleDateFormat60 = null;
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat60);
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double64 = dateTime61.getDeltaYears(dateTime63);
        boolean boolean65 = dateTime61.isWeekday();
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long70 = dateTime61.getDeltaDays(dateTime69);
        net.ajaskey.common.DateTime dateTime71 = new net.ajaskey.common.DateTime(dateTime61);
        boolean boolean72 = dateTime57.sameDate(dateTime61);
        boolean boolean73 = dateTime34.isGreaterThan(dateTime61);
        boolean boolean74 = dateTime1.isGreaterThanOrEqual(dateTime61);
        java.lang.String str75 = dateTime61.toFullString();
        java.util.Date date76 = dateTime61.getTime();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1972.041095890411d) + "'", double8 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat32);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str47, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertNotNull(simpleDateFormat52);
        org.junit.Assert.assertNotNull(simpleDateFormat54);
        org.junit.Assert.assertNotNull(simpleDateFormat55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Invalid Time" + "'", str75, "Invalid Time");
        org.junit.Assert.assertNull(date76);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1056");
        java.util.zip.ZipOutputStream zipOutputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.Utils.writeToZipFilezipOutputStream1);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; messagehe filename, directory name, or volume label syntax is incorrect)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1057");
        net.ajaskey.common.Utils.sleep(286);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1058");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        boolean boolean14 = dateTime9.isGreaterThanOrEqual(dateTime12);
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        boolean boolean21 = dateTime17.isWeekday();
        boolean boolean22 = dateTime12.isLessThanOrEqual(dateTime17);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        int int25 = dateTime24.getMs();
        boolean boolean26 = dateTime24.isWeekday();
        int int27 = dateTime24.getHour();
        java.text.SimpleDateFormat simpleDateFormat29 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime("January", simpleDateFormat29);
        dateTime24.setSdf(simpleDateFormat29);
        java.lang.String str32 = dateTime24.toFullString();
        java.lang.String str33 = dateTime24.toFullString();
        double double34 = dateTime12.getDeltaYears(dateTime24);
        java.lang.String str35 = dateTime24.format();
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime(100L);
        double double43 = dateTime40.getDeltaYears(dateTime42);
        int int44 = dateTime40.getHour();
        java.util.Calendar calendar45 = dateTime40.getCal();
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime(calendar45);
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean51 = dateTime50.isNull();
        boolean boolean52 = net.ajaskey.common.Utils.sameDate(dateTime46, dateTime50);
        java.text.SimpleDateFormat simpleDateFormat55 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat56 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime("", simpleDateFormat55, simpleDateFormat56);
        java.text.SimpleDateFormat simpleDateFormat59 = null;
        java.text.SimpleDateFormat simpleDateFormat60 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime("January", simpleDateFormat59, simpleDateFormat60);
        net.ajaskey.common.DateTime dateTime62 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat55, simpleDateFormat60);
        dateTime50.setSdf(simpleDateFormat60);
        java.text.SimpleDateFormat simpleDateFormat66 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat67 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime68 = new net.ajaskey.common.DateTime("", simpleDateFormat66, simpleDateFormat67);
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime(100L);
        int int71 = dateTime70.getMs();
        java.text.SimpleDateFormat simpleDateFormat72 = net.ajaskey.common.Utils.sdf;
        dateTime70.setSdf(simpleDateFormat72);
        net.ajaskey.common.DateTime dateTime74 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat67, simpleDateFormat72);
        net.ajaskey.common.DateTime dateTime75 = new net.ajaskey.common.DateTime("", simpleDateFormat60, simpleDateFormat67);
        dateTime24.setSdf(simpleDateFormat60);
        java.text.SimpleDateFormat simpleDateFormat78 = null;
        net.ajaskey.common.DateTime dateTime79 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat78);
        boolean boolean80 = net.ajaskey.common.Utils.sameDate(dateTime24, dateTime79);
        java.lang.String str81 = dateTime79.toString();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(simpleDateFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str32, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str33, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "31-Dec-1969" + "'", str35, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1972.041095890411d) + "'", double43 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-62190310561689,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=43,SECOND=58,MILLISECOND=311,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(simpleDateFormat55);
        org.junit.Assert.assertNotNull(simpleDateFormat56);
        org.junit.Assert.assertNotNull(simpleDateFormat60);
        org.junit.Assert.assertNotNull(simpleDateFormat66);
        org.junit.Assert.assertNotNull(simpleDateFormat67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat72);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1059");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("     35", true);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1060");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(365, 33, 1967);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1061");
        java.lang.String str2 = net.ajaskey.common.Utils.lfmt((long) 81, 8);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "      81" + "'", str2, "      81");
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1062");
        net.ajaskey.common.Utils.sleep(108);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1063");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readTextFilefalse);
        org.junit.Assert.assertNotNull(strList2);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1064");
        java.text.SimpleDateFormat simpleDateFormat5 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat7 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat8 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime("", simpleDateFormat7, simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat5, simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime("10-Apr-0002", simpleDateFormat8);
        java.text.SimpleDateFormat simpleDateFormat14 = null;
        java.text.SimpleDateFormat simpleDateFormat15 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("January", simpleDateFormat14, simpleDateFormat15);
        java.text.SimpleDateFormat simpleDateFormat19 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime("January", simpleDateFormat19);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime("", simpleDateFormat19);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime("", simpleDateFormat15, simpleDateFormat19);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime("January                                                                                               52.00                                                                                               52.00                                                                                               52.00                                                                                               52.00hi!                                                                                               52.00", simpleDateFormat8, simpleDateFormat19);
        java.text.SimpleDateFormat simpleDateFormat25 = null;
        java.text.SimpleDateFormat simpleDateFormat26 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime("January", simpleDateFormat25, simpleDateFormat26);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime("December", simpleDateFormat19, simpleDateFormat26);
        java.text.SimpleDateFormat simpleDateFormat31 = null;
        java.text.SimpleDateFormat simpleDateFormat32 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime("January", simpleDateFormat31, simpleDateFormat32);
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime("                                                 100", simpleDateFormat32);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime("January     0     0                                                                                               52.00     0hi!     0", simpleDateFormat19, simpleDateFormat32);
        int int36 = dateTime35.getHour();
        org.junit.Assert.assertNotNull(simpleDateFormat5);
        org.junit.Assert.assertNotNull(simpleDateFormat7);
        org.junit.Assert.assertNotNull(simpleDateFormat8);
        org.junit.Assert.assertNotNull(simpleDateFormat15);
        org.junit.Assert.assertNotNull(simpleDateFormat19);
        org.junit.Assert.assertNotNull(simpleDateFormat26);
        org.junit.Assert.assertNotNull(simpleDateFormat32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1065");
        net.ajaskey.common.Utils.NL = "Sat 10-Nov-0042 10:43:44";
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1066");
        net.ajaskey.common.TextUtils.printline("100");
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1067");
        java.text.SimpleDateFormat simpleDateFormat2 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat3 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime("", simpleDateFormat2, simpleDateFormat3);
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime(100L);
        int int7 = dateTime6.getMs();
        java.text.SimpleDateFormat simpleDateFormat8 = net.ajaskey.common.Utils.sdf;
        dateTime6.setSdf(simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat3, simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime12 = dateTime10.parse("Thu 10-Apr-0002 10:42:54");
        java.text.SimpleDateFormat simpleDateFormat16 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat17 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime("", simpleDateFormat16, simpleDateFormat17);
        java.text.SimpleDateFormat simpleDateFormat20 = null;
        java.text.SimpleDateFormat simpleDateFormat21 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime("January", simpleDateFormat20, simpleDateFormat21);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat16, simpleDateFormat21);
        java.text.SimpleDateFormat simpleDateFormat26 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat27 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime("", simpleDateFormat26, simpleDateFormat27);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime(100L);
        int int31 = dateTime30.getMs();
        java.text.SimpleDateFormat simpleDateFormat32 = net.ajaskey.common.Utils.sdf;
        dateTime30.setSdf(simpleDateFormat32);
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat27, simpleDateFormat32);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime("                             100", simpleDateFormat21, simpleDateFormat27);
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime(100L);
        double double42 = dateTime39.getDeltaYears(dateTime41);
        int int43 = dateTime39.getHour();
        java.util.Calendar calendar44 = dateTime39.getCal();
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime(calendar44);
        int int46 = dateTime45.getYear();
        long long47 = dateTime35.getDeltaMilliSeconds(dateTime45);
        // The following exception was thrown during execution in test generation
        try {
            long long48 = dateTime12.getDeltaMilliSeconds(dateTime35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(simpleDateFormat2);
        org.junit.Assert.assertNotNull(simpleDateFormat3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat8);
        org.junit.Assert.assertNull(dateTime12);
        org.junit.Assert.assertNotNull(simpleDateFormat16);
        org.junit.Assert.assertNotNull(simpleDateFormat17);
        org.junit.Assert.assertNotNull(simpleDateFormat21);
        org.junit.Assert.assertNotNull(simpleDateFormat26);
        org.junit.Assert.assertNotNull(simpleDateFormat27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat32);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1972.041095890411d) + "'", double42 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-62190310561206,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=43,SECOND=58,MILLISECOND=794,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1068");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        boolean boolean14 = dateTime9.isGreaterThanOrEqual(dateTime12);
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        boolean boolean21 = dateTime17.isWeekday();
        boolean boolean22 = dateTime12.isLessThanOrEqual(dateTime17);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        dateTime24.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean29 = dateTime24.isWeekday();
        boolean boolean30 = dateTime12.isGreaterThanOrEqual(dateTime24);
        java.lang.String str31 = dateTime12.toFullString();
        java.text.SimpleDateFormat simpleDateFormat33 = null;
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat33);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double37 = dateTime34.getDeltaYears(dateTime36);
        boolean boolean38 = dateTime34.isWeekday();
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long43 = dateTime34.getDeltaDays(dateTime42);
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime(dateTime34);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime(100L);
        double double51 = dateTime48.getDeltaYears(dateTime50);
        boolean boolean52 = dateTime50.isWeekday();
        java.util.Date date53 = dateTime50.getTime();
        dateTime34.set(date53);
        dateTime12.set(date53);
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime(date53);
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime(dateTime56);
        java.text.SimpleDateFormat simpleDateFormat59 = null;
        net.ajaskey.common.DateTime dateTime60 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat59);
        net.ajaskey.common.DateTime dateTime62 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double63 = dateTime60.getDeltaYears(dateTime62);
        net.ajaskey.common.DateTime dateTime67 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean68 = dateTime62.isEqual(dateTime67);
        java.lang.String str69 = dateTime67.getMonth();
        java.text.SimpleDateFormat simpleDateFormat74 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat75 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime76 = new net.ajaskey.common.DateTime("", simpleDateFormat74, simpleDateFormat75);
        java.text.SimpleDateFormat simpleDateFormat78 = null;
        java.text.SimpleDateFormat simpleDateFormat79 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime80 = new net.ajaskey.common.DateTime("January", simpleDateFormat78, simpleDateFormat79);
        net.ajaskey.common.DateTime dateTime81 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat74, simpleDateFormat79);
        java.text.SimpleDateFormat simpleDateFormat84 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat85 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime86 = new net.ajaskey.common.DateTime("", simpleDateFormat84, simpleDateFormat85);
        net.ajaskey.common.DateTime dateTime88 = new net.ajaskey.common.DateTime(100L);
        int int89 = dateTime88.getMs();
        java.text.SimpleDateFormat simpleDateFormat90 = net.ajaskey.common.Utils.sdf;
        dateTime88.setSdf(simpleDateFormat90);
        net.ajaskey.common.DateTime dateTime92 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat85, simpleDateFormat90);
        net.ajaskey.common.DateTime dateTime93 = new net.ajaskey.common.DateTime("                             100", simpleDateFormat79, simpleDateFormat85);
        net.ajaskey.common.DateTime dateTime94 = new net.ajaskey.common.DateTime("Thu 10-Apr-0002 10:42:58", simpleDateFormat79);
        boolean boolean95 = dateTime67.isLessThan(dateTime94);
        net.ajaskey.common.DateTime dateTime96 = dateTime56.copy(dateTime67);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str31, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1972.041095890411d) + "'", double51 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "April" + "'", str69, "April");
        org.junit.Assert.assertNotNull(simpleDateFormat74);
        org.junit.Assert.assertNotNull(simpleDateFormat75);
        org.junit.Assert.assertNotNull(simpleDateFormat79);
        org.junit.Assert.assertNotNull(simpleDateFormat84);
        org.junit.Assert.assertNotNull(simpleDateFormat85);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat90);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(dateTime96);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1069");
        java.util.Map<java.lang.String, java.lang.Integer> strMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = net.ajaskey.common.Utils.findName(strMap0, (java.lang.Integer) 36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1070");
        net.ajaskey.common.Utils.sleep(152);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1071");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("                                                                                          62,190,310,591,168", true);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1072");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        java.util.Calendar calendar11 = dateTime4.getCal();
        java.lang.String str12 = dateTime4.format();
        net.ajaskey.common.DateTime dateTime13 = null;
        long long14 = dateTime4.getDeltaDays(dateTime13);
        int int15 = dateTime4.getSecond();
        int int16 = dateTime4.getDayOfWeek();
        java.lang.String str17 = dateTime4.toFullString();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "BAD-DATE-FORMAT" + "'", str12, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str17, "Wed 31-Dec-1969 17:00:00");
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1073");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        java.util.Calendar calendar11 = dateTime4.getCal();
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(calendar11);
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime(calendar11);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(100L);
        int int16 = dateTime15.getMs();
        java.text.SimpleDateFormat simpleDateFormat17 = net.ajaskey.common.Utils.sdf;
        dateTime15.setSdf(simpleDateFormat17);
        long long19 = dateTime13.getDeltaDays(dateTime15);
        int int20 = dateTime13.getDayOfMonth();
        java.text.SimpleDateFormat simpleDateFormat25 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat27 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat28 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime("", simpleDateFormat27, simpleDateFormat28);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat25, simpleDateFormat28);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime("10-Apr-0002", simpleDateFormat28);
        java.text.SimpleDateFormat simpleDateFormat34 = null;
        java.text.SimpleDateFormat simpleDateFormat35 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime("January", simpleDateFormat34, simpleDateFormat35);
        java.text.SimpleDateFormat simpleDateFormat39 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("January", simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("", simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime("", simpleDateFormat35, simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime("January                                                                                               52.00                                                                                               52.00                                                                                               52.00                                                                                               52.00hi!                                                                                               52.00", simpleDateFormat28, simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime(100L);
        double double50 = dateTime47.getDeltaYears(dateTime49);
        int int51 = dateTime47.getHour();
        dateTime47.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat56 = null;
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat56);
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double60 = dateTime57.getDeltaYears(dateTime59);
        boolean boolean61 = dateTime47.isEqual(dateTime59);
        java.text.SimpleDateFormat simpleDateFormat63 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat65 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat66 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime67 = new net.ajaskey.common.DateTime("", simpleDateFormat65, simpleDateFormat66);
        net.ajaskey.common.DateTime dateTime68 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat63, simpleDateFormat66);
        dateTime47.setSdf(simpleDateFormat63);
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime("", simpleDateFormat28, simpleDateFormat63);
        dateTime13.setSdf(simpleDateFormat63);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertNotNull(simpleDateFormat25);
        org.junit.Assert.assertNotNull(simpleDateFormat27);
        org.junit.Assert.assertNotNull(simpleDateFormat28);
        org.junit.Assert.assertNotNull(simpleDateFormat35);
        org.junit.Assert.assertNotNull(simpleDateFormat39);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1972.041095890411d) + "'", double50 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat63);
        org.junit.Assert.assertNotNull(simpleDateFormat65);
        org.junit.Assert.assertNotNull(simpleDateFormat66);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1074");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(3, 47, 1866);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1075");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("January                                                                                              100                                                                                              100                                                                                               52.00                                                                                              100hi!                                                                                              100");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1076");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl(" 1");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1077");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.util.Calendar calendar4 = null;
        dateTime3.set(calendar4);
        java.text.SimpleDateFormat simpleDateFormat7 = null;
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat7);
        dateTime8.set((int) ' ', 0, 11);
        boolean boolean13 = dateTime8.isWeekday();
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(100L);
        int int16 = dateTime15.getMs();
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime(100L);
        double double23 = dateTime20.getDeltaYears(dateTime22);
        java.text.SimpleDateFormat simpleDateFormat24 = dateTime20.getSdf();
        boolean boolean25 = dateTime15.isLessThanOrEqual(dateTime20);
        java.util.Date date26 = dateTime20.getTime();
        dateTime8.set(date26);
        long long28 = dateTime3.getDeltaMilliSeconds(dateTime8);
        net.ajaskey.common.DateTime dateTime31 = dateTime3.parse("10-Apr-0002", "JanuaryBAD-DATE-FORMATBAD-DATE-FORMAT                                                                                               52.00BAD-DATE-FORMAThi!BAD-DATE-FORMAT");
        net.ajaskey.common.DateTime dateTime33 = dateTime3.parse("                             365");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1972.041095890411d) + "'", double23 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Thu Apr 10 10:43:59 MST 2");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNull(dateTime31);
        org.junit.Assert.assertNull(dateTime33);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1078");
        net.ajaskey.common.Utils.makeDir("                                                                                                   0");
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1079");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt(1, 39);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                      1" + "'", str2, "                                      1");
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1080");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("    0", "                                                                                                                                                                                                                                                                     252");
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1081");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        boolean boolean12 = dateTime1.isWeekday();
        java.util.Calendar calendar13 = dateTime1.getCal();
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat15);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double19 = dateTime16.getDeltaYears(dateTime18);
        boolean boolean20 = dateTime16.isWeekday();
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long25 = dateTime16.getDeltaDays(dateTime24);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(dateTime16);
        dateTime26.setFirstWorkDay();
        long long28 = dateTime1.getDeltaDays(dateTime26);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime(100L);
        int int32 = dateTime31.getMs();
        java.text.SimpleDateFormat simpleDateFormat33 = net.ajaskey.common.Utils.sdf;
        dateTime31.setSdf(simpleDateFormat33);
        java.text.SimpleDateFormat simpleDateFormat35 = net.ajaskey.common.Utils.sdfFull;
        dateTime31.setSdf(simpleDateFormat35);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime("Mon 10-Apr-0002 00:00:00", simpleDateFormat35);
        int int38 = dateTime26.getYears(dateTime37);
        int int39 = dateTime26.getDayOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-18438L) + "'", long28 == (-18438L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat33);
        org.junit.Assert.assertNotNull(simpleDateFormat35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-2019) + "'", int38 == (-2019));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 177 + "'", int39 == 177);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1082");
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        int int10 = dateTime6.getHour();
        dateTime6.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat15);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double19 = dateTime16.getDeltaYears(dateTime18);
        boolean boolean20 = dateTime6.isEqual(dateTime18);
        java.text.SimpleDateFormat simpleDateFormat22 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat24 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat25 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime("", simpleDateFormat24, simpleDateFormat25);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat22, simpleDateFormat25);
        dateTime6.setSdf(simpleDateFormat22);
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat35 = null;
        java.text.SimpleDateFormat simpleDateFormat36 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime("January", simpleDateFormat35, simpleDateFormat36);
        java.text.SimpleDateFormat simpleDateFormat40 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("January", simpleDateFormat40);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime("", simpleDateFormat40);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime("", simpleDateFormat36, simpleDateFormat40);
        dateTime32.setSdf(simpleDateFormat36);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime("December", simpleDateFormat22, simpleDateFormat36);
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime("5.00", simpleDateFormat36);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime(100L);
        int int49 = dateTime48.getMs();
        java.text.SimpleDateFormat simpleDateFormat50 = net.ajaskey.common.Utils.sdf;
        dateTime48.setSdf(simpleDateFormat50);
        int int52 = dateTime48.getDayOfWeek();
        java.text.SimpleDateFormat simpleDateFormat53 = dateTime48.getSdf();
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime("Sat 04-Jan-0100 17:00:00", simpleDateFormat36, simpleDateFormat53);
        int int55 = dateTime54.getSecond();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat22);
        org.junit.Assert.assertNotNull(simpleDateFormat24);
        org.junit.Assert.assertNotNull(simpleDateFormat25);
        org.junit.Assert.assertNotNull(simpleDateFormat36);
        org.junit.Assert.assertNotNull(simpleDateFormat40);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(simpleDateFormat53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1083");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.util.Calendar calendar4 = null;
        dateTime3.set(calendar4);
        boolean boolean6 = dateTime3.isWeekday();
        java.lang.String str7 = dateTime3.format();
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime(100L);
        int int10 = dateTime9.getMs();
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        java.text.SimpleDateFormat simpleDateFormat18 = dateTime14.getSdf();
        boolean boolean19 = dateTime9.isLessThanOrEqual(dateTime14);
        boolean boolean20 = dateTime9.isWeekday();
        java.util.Calendar calendar21 = dateTime9.getCal();
        java.text.SimpleDateFormat simpleDateFormat23 = null;
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat23);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double27 = dateTime24.getDeltaYears(dateTime26);
        boolean boolean28 = dateTime24.isWeekday();
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long33 = dateTime24.getDeltaDays(dateTime32);
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime(dateTime24);
        dateTime34.setFirstWorkDay();
        long long36 = dateTime9.getDeltaDays(dateTime34);
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime(100L);
        int int40 = dateTime39.getMs();
        java.text.SimpleDateFormat simpleDateFormat41 = net.ajaskey.common.Utils.sdf;
        dateTime39.setSdf(simpleDateFormat41);
        java.text.SimpleDateFormat simpleDateFormat43 = net.ajaskey.common.Utils.sdfFull;
        dateTime39.setSdf(simpleDateFormat43);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime("Mon 10-Apr-0002 00:00:00", simpleDateFormat43);
        int int46 = dateTime34.getYears(dateTime45);
        boolean boolean47 = net.ajaskey.common.Utils.sameMonth(dateTime3, dateTime45);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "BAD-DATE-FORMAT" + "'", str7, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1972.041095890411d) + "'", double17 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-18438L) + "'", long36 == (-18438L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat41);
        org.junit.Assert.assertNotNull(simpleDateFormat43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-2019) + "'", int46 == (-2019));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1084");
        java.lang.String str2 = net.ajaskey.common.Utils.fmt((double) 365, 39);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                 365.00" + "'", str2, "                                 365.00");
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1085");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) 48);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1086");
        net.ajaskey.common.Utils.makeDir("Thu 10-Apr-0002 10:43:08");
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1087");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        java.lang.String str12 = dateTime6.toString();
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime(100L);
        int int15 = dateTime14.getMs();
        int int16 = dateTime14.getHour();
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat22 = null;
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat22);
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double26 = dateTime23.getDeltaYears(dateTime25);
        boolean boolean27 = dateTime20.isLessThan(dateTime25);
        java.lang.String str28 = dateTime25.toFullString();
        dateTime25.add(10, (int) (byte) -1);
        java.text.SimpleDateFormat simpleDateFormat33 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat35 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat36 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime("", simpleDateFormat35, simpleDateFormat36);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat33, simpleDateFormat36);
        boolean boolean39 = dateTime25.isGreaterThan(dateTime38);
        boolean boolean40 = dateTime14.isEqual(dateTime25);
        net.ajaskey.common.DateTime dateTime41 = null;
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime(dateTime41);
        dateTime42.set(42, 10, 10);
        java.util.Date date47 = dateTime42.getTime();
        net.ajaskey.common.DateTime dateTime48 = dateTime14.copy(dateTime42);
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime(100L);
        int int51 = dateTime50.getMs();
        int int52 = dateTime50.getHour();
        double double53 = dateTime42.getDeltaYears(dateTime50);
        boolean boolean54 = net.ajaskey.common.Utils.sameMonth(dateTime6, dateTime50);
        java.util.Calendar calendar55 = dateTime50.getCal();
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime(calendar55);
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime(calendar55);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10-Apr-0002" + "'", str12, "10-Apr-0002");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str28, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertNotNull(simpleDateFormat33);
        org.junit.Assert.assertNotNull(simpleDateFormat35);
        org.junit.Assert.assertNotNull(simpleDateFormat36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Sat Nov 10 10:43:59 MST 42");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1928.4246575342465d) + "'", double53 == (-1928.4246575342465d));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1088");
        net.ajaskey.common.Utils.makeDir("Thu 10-Apr-0002 10:43:45");
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1089");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        java.util.Calendar calendar11 = dateTime4.getCal();
        java.lang.String str12 = dateTime4.format();
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime(100L);
        double double19 = dateTime16.getDeltaYears(dateTime18);
        int int20 = dateTime16.getHour();
        dateTime16.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat25 = null;
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat25);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double29 = dateTime26.getDeltaYears(dateTime28);
        boolean boolean30 = dateTime16.isEqual(dateTime28);
        java.lang.String str31 = dateTime16.toString();
        dateTime16.add(100, (int) (byte) 0);
        boolean boolean35 = dateTime4.isLessThanOrEqual(dateTime16);
        net.ajaskey.common.DateTime dateTime37 = dateTime16.parse
        // The following exception was thrown during execution in test generation
        try {
            java.text.SimpleDateFormat simpleDateFormat38 = dateTime37.getSdf();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "BAD-DATE-FORMAT" + "'", str12, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1972.041095890411d) + "'", double19 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10-Apr-0002" + "'", str31, "10-Apr-0002");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(dateTime37);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1090");
        java.util.Map<java.lang.String, java.lang.Integer> strMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = net.ajaskey.common.Utils.findName(strMap0, (java.lang.Integer) 510);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1091");
        java.lang.String str2 = net.ajaskey.common.Utils.fmt((double) 36, (int) (byte) 100);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                               36.00" + "'", str2, "                                                                                               36.00");
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1092");
        net.ajaskey.common.DateTime dateTime0 = null;
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(100L);
        int int4 = dateTime3.getMs();
        java.text.SimpleDateFormat simpleDateFormat5 = net.ajaskey.common.Utils.sdf;
        dateTime3.setSdf(simpleDateFormat5);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat5);
        java.text.SimpleDateFormat simpleDateFormat9 = null;
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double13 = dateTime10.getDeltaYears(dateTime12);
        boolean boolean14 = dateTime12.isNull();
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        dateTime17.set((int) ' ', 0, 11);
        boolean boolean22 = dateTime12.isGreaterThanOrEqual(dateTime17);
        double double23 = dateTime7.getDeltaYears(dateTime12);
        java.text.SimpleDateFormat simpleDateFormat25 = null;
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat25);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double29 = dateTime26.getDeltaYears(dateTime28);
        boolean boolean30 = dateTime28.isNull();
        boolean boolean31 = dateTime12.isGreaterThan(dateTime28);
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime(dateTime12);
        int int33 = dateTime32.getDayOfMonth();
        int int34 = dateTime32.getMinute();
        boolean boolean35 = net.ajaskey.common.Utils.sameMonth(dateTime0, dateTime32);
        int int36 = dateTime32.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat5);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 31 + "'", int33 == 31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1093");
        java.lang.String str2 = net.ajaskey.common.Utils.lfmt((long) 47, 43);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                         47" + "'", str2, "                                         47");
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1094");
        java.util.Map<java.lang.String, java.lang.Integer> strMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = net.ajaskey.common.Utils.findName(strMap0, (java.lang.Integer) 39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1095");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("                                    26");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1096");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat5 = null;
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat5);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean14 = dateTime8.isEqual(dateTime13);
        java.util.Calendar calendar15 = dateTime8.getCal();
        boolean boolean16 = dateTime3.isLessThan(dateTime8);
        int int17 = dateTime3.getDayOfMonth();
        dateTime3.add((-68), 53);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1097");
        java.util.zip.ZipOutputStream zipOutputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.Utils.writeToZipFile("                                         47", zipOutputStream1);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:                                          47 (The system cannot find the file specified)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1098");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(100L);
        boolean boolean4 = dateTime3.isWeekday();
        java.lang.String str5 = dateTime3.getMonth();
        dateTime3.add(7, 10);
        java.text.SimpleDateFormat simpleDateFormat11 = null;
        java.text.SimpleDateFormat simpleDateFormat12 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("January", simpleDateFormat11, simpleDateFormat12);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("100.00", simpleDateFormat11);
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean25 = dateTime19.isEqual(dateTime24);
        long long26 = dateTime14.getDeltaDays(dateTime24);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime(dateTime14);
        boolean boolean28 = dateTime3.isGreaterThan(dateTime14);
        boolean boolean29 = net.ajaskey.common.Utils.sameDate(dateTime1, dateTime3);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime(100L);
        double double36 = dateTime33.getDeltaYears(dateTime35);
        int int37 = dateTime33.getHour();
        java.text.SimpleDateFormat simpleDateFormat39 = null;
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double43 = dateTime40.getDeltaYears(dateTime42);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean48 = dateTime42.isEqual(dateTime47);
        java.util.Calendar calendar49 = dateTime42.getCal();
        java.lang.String str50 = dateTime42.format();
        net.ajaskey.common.DateTime dateTime51 = null;
        long long52 = dateTime42.getDeltaDays(dateTime51);
        int int53 = dateTime42.getSecond();
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime(100L);
        double double60 = dateTime57.getDeltaYears(dateTime59);
        java.text.SimpleDateFormat simpleDateFormat62 = null;
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat62);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double66 = dateTime63.getDeltaYears(dateTime65);
        boolean boolean67 = dateTime63.isWeekday();
        boolean boolean68 = dateTime57.sameDate(dateTime63);
        int int69 = dateTime63.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime70 = dateTime42.copy(dateTime63);
        dateTime33.set(dateTime63);
        net.ajaskey.common.DateTime dateTime73 = dateTime33.parse("Thursday");
        boolean boolean74 = dateTime1.isEqual(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "December" + "'", str5, "December");
        org.junit.Assert.assertNotNull(simpleDateFormat12);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1972.041095890411d) + "'", double36 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "BAD-DATE-FORMAT" + "'", str50, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1972.041095890411d) + "'", double60 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNull(dateTime70);
        org.junit.Assert.assertNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1099");
        java.util.Map<java.lang.String, java.lang.Integer> strMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = net.ajaskey.common.Utils.findName(strMap0, (java.lang.Integer) 78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1100");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        java.lang.String str11 = dateTime9.getMonth();
        java.text.SimpleDateFormat simpleDateFormat16 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat17 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime("", simpleDateFormat16, simpleDateFormat17);
        java.text.SimpleDateFormat simpleDateFormat20 = null;
        java.text.SimpleDateFormat simpleDateFormat21 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime("January", simpleDateFormat20, simpleDateFormat21);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat16, simpleDateFormat21);
        java.text.SimpleDateFormat simpleDateFormat26 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat27 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime("", simpleDateFormat26, simpleDateFormat27);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime(100L);
        int int31 = dateTime30.getMs();
        java.text.SimpleDateFormat simpleDateFormat32 = net.ajaskey.common.Utils.sdf;
        dateTime30.setSdf(simpleDateFormat32);
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat27, simpleDateFormat32);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime("                             100", simpleDateFormat21, simpleDateFormat27);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime("Thu 10-Apr-0002 10:42:58", simpleDateFormat21);
        boolean boolean37 = dateTime9.isLessThan(dateTime36);
        int int38 = dateTime9.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "April" + "'", str11, "April");
        org.junit.Assert.assertNotNull(simpleDateFormat16);
        org.junit.Assert.assertNotNull(simpleDateFormat17);
        org.junit.Assert.assertNotNull(simpleDateFormat21);
        org.junit.Assert.assertNotNull(simpleDateFormat26);
        org.junit.Assert.assertNotNull(simpleDateFormat27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1101");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        boolean boolean3 = dateTime1.isWeekday();
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime((long) (short) 0);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime(100L);
        int int8 = dateTime7.getMs();
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime(100L);
        double double15 = dateTime12.getDeltaYears(dateTime14);
        java.text.SimpleDateFormat simpleDateFormat16 = dateTime12.getSdf();
        boolean boolean17 = dateTime7.isLessThanOrEqual(dateTime12);
        java.text.SimpleDateFormat simpleDateFormat19 = null;
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat19);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double23 = dateTime20.getDeltaYears(dateTime22);
        boolean boolean24 = dateTime20.isWeekday();
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long29 = dateTime20.getDeltaDays(dateTime28);
        long long30 = dateTime7.getDeltaDays(dateTime28);
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime(100L);
        dateTime32.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean37 = dateTime32.isWeekday();
        int int38 = dateTime7.getYears(dateTime32);
        int int39 = dateTime7.getYear();
        java.util.Calendar calendar40 = dateTime7.getCal();
        net.ajaskey.common.DateTime dateTime41 = dateTime5.copy(dateTime7);
        boolean boolean42 = dateTime1.isGreaterThan(dateTime7);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime(dateTime1);
        int int44 = dateTime43.getDayOfMonth();
        dateTime43.add(2020, 12);
        java.text.SimpleDateFormat simpleDateFormat50 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat52 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat53 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime("", simpleDateFormat52, simpleDateFormat53);
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat50, simpleDateFormat53);
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat62 = null;
        java.text.SimpleDateFormat simpleDateFormat63 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime("January", simpleDateFormat62, simpleDateFormat63);
        java.text.SimpleDateFormat simpleDateFormat67 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime68 = new net.ajaskey.common.DateTime("January", simpleDateFormat67);
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime("", simpleDateFormat67);
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime("", simpleDateFormat63, simpleDateFormat67);
        dateTime59.setSdf(simpleDateFormat63);
        net.ajaskey.common.DateTime dateTime72 = new net.ajaskey.common.DateTime("", simpleDateFormat53, simpleDateFormat63);
        dateTime43.setSdf(simpleDateFormat63);
        boolean boolean74 = dateTime43.isNull();
        int int75 = dateTime43.getMs();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1972.041095890411d) + "'", double15 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 719795L + "'", long30 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1870) + "'", int38 == (-1870));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1969 + "'", int39 == 1969);
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 31 + "'", int44 == 31);
        org.junit.Assert.assertNotNull(simpleDateFormat50);
        org.junit.Assert.assertNotNull(simpleDateFormat52);
        org.junit.Assert.assertNotNull(simpleDateFormat53);
        org.junit.Assert.assertNotNull(simpleDateFormat63);
        org.junit.Assert.assertNotNull(simpleDateFormat67);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1102");
        java.text.SimpleDateFormat simpleDateFormat1 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat2 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime("", simpleDateFormat1, simpleDateFormat2);
        boolean boolean4 = dateTime3.isWeekday();
        net.ajaskey.common.DateTime dateTime5 = null;
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime(dateTime5);
        dateTime6.set(42, 10, 10);
        java.util.Date date11 = dateTime6.getTime();
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(date11);
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime(date11);
        boolean boolean14 = dateTime13.isWeekday();
        boolean boolean15 = net.ajaskey.common.Utils.sameDate(dateTime3, dateTime13);
        int int16 = dateTime3.getYear();
        org.junit.Assert.assertNotNull(simpleDateFormat1);
        org.junit.Assert.assertNotNull(simpleDateFormat2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 10 10:44:00 MST 42");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1103");
        java.util.Date date0 = null;
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(date0);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime(100L);
        double double8 = dateTime5.getDeltaYears(dateTime7);
        int int9 = dateTime5.getHour();
        java.text.SimpleDateFormat simpleDateFormat11 = null;
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat11);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double15 = dateTime12.getDeltaYears(dateTime14);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean20 = dateTime14.isEqual(dateTime19);
        java.util.Calendar calendar21 = dateTime14.getCal();
        dateTime5.set(calendar21);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime(calendar21);
        net.ajaskey.common.DateTime dateTime24 = dateTime1.copy(dateTime23);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime(100L);
        double double31 = dateTime28.getDeltaYears(dateTime30);
        boolean boolean32 = dateTime30.isWeekday();
        int int33 = dateTime30.getDayOfYear();
        long long34 = dateTime24.getDeltaMilliSeconds(dateTime30);
        java.util.Calendar calendar35 = dateTime24.getCal();
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime(calendar35);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1972.041095890411d) + "'", double8 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1972.041095890411d) + "'", double31 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 365 + "'", int33 == 365);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1104");
        java.text.SimpleDateFormat simpleDateFormat1 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat2 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime("", simpleDateFormat1, simpleDateFormat2);
        int int4 = dateTime3.getHour();
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(dateTime3);
        java.util.Calendar calendar6 = dateTime5.getCal();
        dateTime5.add(46, 1866);
        org.junit.Assert.assertNotNull(simpleDateFormat1);
        org.junit.Assert.assertNotNull(simpleDateFormat2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1593103440473,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2020,MONTH=5,WEEK_OF_YEAR=26,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=177,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=0,MILLISECOND=473,ZONE_OFFSET=-25200000,DST_OFFSET=3600000]");
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1105");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        int int7 = dateTime3.getHour();
        java.text.SimpleDateFormat simpleDateFormat9 = null;
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double13 = dateTime10.getDeltaYears(dateTime12);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean18 = dateTime12.isEqual(dateTime17);
        java.util.Calendar calendar19 = dateTime12.getCal();
        java.lang.String str20 = dateTime12.format();
        net.ajaskey.common.DateTime dateTime21 = null;
        long long22 = dateTime12.getDeltaDays(dateTime21);
        int int23 = dateTime12.getSecond();
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime(100L);
        double double30 = dateTime27.getDeltaYears(dateTime29);
        java.text.SimpleDateFormat simpleDateFormat32 = null;
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat32);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double36 = dateTime33.getDeltaYears(dateTime35);
        boolean boolean37 = dateTime33.isWeekday();
        boolean boolean38 = dateTime27.sameDate(dateTime33);
        int int39 = dateTime33.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime40 = dateTime12.copy(dateTime33);
        dateTime3.set(dateTime33);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat48 = null;
        java.text.SimpleDateFormat simpleDateFormat49 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime("January", simpleDateFormat48, simpleDateFormat49);
        java.text.SimpleDateFormat simpleDateFormat53 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime("January", simpleDateFormat53);
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime("", simpleDateFormat53);
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime("", simpleDateFormat49, simpleDateFormat53);
        dateTime45.setSdf(simpleDateFormat49);
        java.util.Calendar calendar58 = dateTime45.getCal();
        dateTime33.set(calendar58);
        java.lang.String str60 = dateTime33.getDay();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "BAD-DATE-FORMAT" + "'", str20, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1972.041095890411d) + "'", double30 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(dateTime40);
        org.junit.Assert.assertNotNull(simpleDateFormat49);
        org.junit.Assert.assertNotNull(simpleDateFormat53);
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=-62190310559510,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=0,MILLISECOND=490,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Thursday" + "'", str60, "Thursday");
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1106");
        net.ajaskey.common.Utils.NL = "62,190,310,577,284.00";
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1107");
        net.ajaskey.common.TextUtils.printline("Thu 10-Apr-0002 10:43:58");
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1108");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("5.00", "     10");
        dateTime2.add((int) (short) 0, (int) 'a');
        int int6 = dateTime2.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        int int9 = dateTime8.getMs();
        int int10 = dateTime8.getHour();
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        boolean boolean21 = dateTime14.isLessThan(dateTime19);
        java.lang.String str22 = dateTime19.toFullString();
        dateTime19.add(10, (int) (byte) -1);
        java.text.SimpleDateFormat simpleDateFormat27 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat29 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat30 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime("", simpleDateFormat29, simpleDateFormat30);
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat27, simpleDateFormat30);
        boolean boolean33 = dateTime19.isGreaterThan(dateTime32);
        boolean boolean34 = dateTime8.isEqual(dateTime19);
        net.ajaskey.common.DateTime dateTime35 = null;
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime(dateTime35);
        dateTime36.set(42, 10, 10);
        java.util.Date date41 = dateTime36.getTime();
        net.ajaskey.common.DateTime dateTime42 = dateTime8.copy(dateTime36);
        net.ajaskey.common.DateTime dateTime43 = dateTime2.copy(dateTime8);
        int int44 = dateTime43.getHour();
        int int45 = dateTime43.getDayOfYear();
        net.ajaskey.common.DateTime dateTime48 = dateTime43.parse("            32", "                              -1");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = dateTime48.getDay();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str22, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertNotNull(simpleDateFormat27);
        org.junit.Assert.assertNotNull(simpleDateFormat29);
        org.junit.Assert.assertNotNull(simpleDateFormat30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Sat Nov 10 10:44:00 MST 42");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 365 + "'", int45 == 365);
        org.junit.Assert.assertNull(dateTime48);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1109");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("                                     5", true);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1110");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean25 = dateTime19.isEqual(dateTime24);
        java.util.Calendar calendar26 = dateTime19.getCal();
        boolean boolean27 = dateTime14.isLessThan(dateTime19);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime("BAD-DATE-FORMAT", "                                                                                               52.00");
        double double31 = dateTime19.getDeltaYears(dateTime30);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime(100L);
        double double38 = dateTime35.getDeltaYears(dateTime37);
        java.text.SimpleDateFormat simpleDateFormat40 = null;
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat40);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double44 = dateTime41.getDeltaYears(dateTime43);
        boolean boolean45 = dateTime41.isWeekday();
        boolean boolean46 = dateTime35.sameDate(dateTime41);
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime(100L);
        double double53 = dateTime50.getDeltaYears(dateTime52);
        java.text.SimpleDateFormat simpleDateFormat55 = null;
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat55);
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double59 = dateTime56.getDeltaYears(dateTime58);
        boolean boolean60 = dateTime56.isWeekday();
        boolean boolean61 = dateTime50.sameDate(dateTime56);
        java.text.SimpleDateFormat simpleDateFormat63 = null;
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat63);
        net.ajaskey.common.DateTime dateTime66 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double67 = dateTime64.getDeltaYears(dateTime66);
        net.ajaskey.common.DateTime dateTime71 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean72 = dateTime66.isEqual(dateTime71);
        dateTime50.set(dateTime71);
        long long74 = dateTime35.getDeltaMilliSeconds(dateTime71);
        net.ajaskey.common.DateTime dateTime76 = new net.ajaskey.common.DateTime(100L);
        int int77 = dateTime76.getMs();
        net.ajaskey.common.DateTime dateTime81 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime83 = new net.ajaskey.common.DateTime(100L);
        double double84 = dateTime81.getDeltaYears(dateTime83);
        java.text.SimpleDateFormat simpleDateFormat85 = dateTime81.getSdf();
        boolean boolean86 = dateTime76.isLessThanOrEqual(dateTime81);
        int int87 = dateTime81.getDayOfYear();
        boolean boolean88 = dateTime81.isWeekday();
        boolean boolean89 = dateTime35.sameDate(dateTime81);
        int int90 = dateTime19.getYears(dateTime81);
        net.ajaskey.common.DateTime dateTime91 = new net.ajaskey.common.DateTime(dateTime81);
        boolean boolean92 = dateTime9.isEqual(dateTime91);
        java.text.SimpleDateFormat simpleDateFormat95 = null;
        java.text.SimpleDateFormat simpleDateFormat96 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime97 = new net.ajaskey.common.DateTime("January", simpleDateFormat95, simpleDateFormat96);
        net.ajaskey.common.DateTime dateTime98 = new net.ajaskey.common.DateTime("                                                 100", simpleDateFormat96);
        dateTime91.setSdf(simpleDateFormat96);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1972.041095890411d) + "'", double38 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1972.041095890411d) + "'", double53 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-1972.041095890411d) + "'", double84 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 100 + "'", int87 == 100);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1968) + "'", int90 == (-1968));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(simpleDateFormat96);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1111");
        java.text.SimpleDateFormat simpleDateFormat3 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat4 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime("", simpleDateFormat3, simpleDateFormat4);
        java.text.SimpleDateFormat simpleDateFormat8 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat9 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("", simpleDateFormat8, simpleDateFormat9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        java.text.SimpleDateFormat simpleDateFormat14 = net.ajaskey.common.Utils.sdf;
        dateTime12.setSdf(simpleDateFormat14);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat9, simpleDateFormat14);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("     0", simpleDateFormat4, simpleDateFormat14);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime("   42.00", simpleDateFormat14);
        net.ajaskey.common.DateTime dateTime19 = null;
        boolean boolean20 = dateTime18.isGreaterThan(dateTime19);
        java.text.SimpleDateFormat simpleDateFormat24 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat26 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat27 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime("", simpleDateFormat26, simpleDateFormat27);
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat24, simpleDateFormat27);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime("10-Apr-0002", simpleDateFormat27);
        java.text.SimpleDateFormat simpleDateFormat33 = null;
        java.text.SimpleDateFormat simpleDateFormat34 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime("January", simpleDateFormat33, simpleDateFormat34);
        java.text.SimpleDateFormat simpleDateFormat38 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime("January", simpleDateFormat38);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("", simpleDateFormat38);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("", simpleDateFormat34, simpleDateFormat38);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime("January                                                                                               52.00                                                                                               52.00                                                                                               52.00                                                                                               52.00hi!                                                                                               52.00", simpleDateFormat27, simpleDateFormat38);
        dateTime18.setSdf(simpleDateFormat38);
        org.junit.Assert.assertNotNull(simpleDateFormat3);
        org.junit.Assert.assertNotNull(simpleDateFormat4);
        org.junit.Assert.assertNotNull(simpleDateFormat8);
        org.junit.Assert.assertNotNull(simpleDateFormat9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat24);
        org.junit.Assert.assertNotNull(simpleDateFormat26);
        org.junit.Assert.assertNotNull(simpleDateFormat27);
        org.junit.Assert.assertNotNull(simpleDateFormat34);
        org.junit.Assert.assertNotNull(simpleDateFormat38);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1112");
        java.lang.String str2 = net.ajaskey.common.Utils.lfmt((long) 26, 286);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                                                                                                                                                                                                                            26" + "'", str2, "                                                                                                                                                                                                                                                                                            26");
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1113");
        net.ajaskey.common.Utils.NL = "                                            161";
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1114");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        java.lang.String str3 = dateTime1.toString();
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime(100L);
        double double10 = dateTime7.getDeltaYears(dateTime9);
        int int11 = dateTime7.getHour();
        int int12 = dateTime7.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime(100L);
        double double19 = dateTime16.getDeltaYears(dateTime18);
        boolean boolean20 = dateTime18.isWeekday();
        boolean boolean21 = net.ajaskey.common.Utils.sameDate(dateTime7, dateTime18);
        boolean boolean22 = net.ajaskey.common.Utils.sameDate(dateTime1, dateTime7);
        dateTime7.set((int) ' ', (-2005), (-1968));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "31-Dec-1969" + "'", str3, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1972.041095890411d) + "'", double10 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1972.041095890411d) + "'", double19 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1115");
        net.ajaskey.common.TextUtils.printline("Thu 10-Apr-0002 10:43:08");
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1116");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("                                    62,190,310,613,374", true);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1117");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        boolean boolean6 = dateTime2.isWeekday();
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long11 = dateTime2.getDeltaDays(dateTime10);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(dateTime2);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime(100L);
        double double19 = dateTime16.getDeltaYears(dateTime18);
        boolean boolean20 = dateTime18.isWeekday();
        java.util.Date date21 = dateTime18.getTime();
        dateTime2.set(date21);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        int int25 = dateTime24.getMs();
        java.lang.String str26 = dateTime24.toString();
        boolean boolean27 = dateTime2.isLessThanOrEqual(dateTime24);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime(100L);
        double double34 = dateTime31.getDeltaYears(dateTime33);
        int int35 = dateTime31.getHour();
        java.text.SimpleDateFormat simpleDateFormat37 = null;
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat37);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double41 = dateTime38.getDeltaYears(dateTime40);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean46 = dateTime40.isEqual(dateTime45);
        java.util.Calendar calendar47 = dateTime40.getCal();
        dateTime31.set(calendar47);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime(calendar47);
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat55 = null;
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat55);
        boolean boolean57 = net.ajaskey.common.Utils.sameDate(dateTime53, dateTime56);
        boolean boolean58 = dateTime49.isGreaterThanOrEqual(dateTime53);
        java.text.SimpleDateFormat simpleDateFormat61 = null;
        java.text.SimpleDateFormat simpleDateFormat62 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime("January", simpleDateFormat61, simpleDateFormat62);
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime("100.00", simpleDateFormat61);
        java.lang.String str66 = dateTime64.format("");
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime("5.00", "     10");
        boolean boolean70 = net.ajaskey.common.Utils.sameMonth(dateTime64, dateTime69);
        boolean boolean71 = dateTime49.isEqual(dateTime64);
        boolean boolean72 = net.ajaskey.common.Utils.sameMonth(dateTime2, dateTime64);
        int int73 = dateTime2.getDayOfYear();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1972.041095890411d) + "'", double19 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "31-Dec-1969" + "'", str26, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1972.041095890411d) + "'", double34 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(simpleDateFormat62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "BAD-DATE-FORMAT" + "'", str66, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 365 + "'", int73 == 365);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1118");
        net.ajaskey.common.Utils.makeDir("5.00");
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1119");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt(7, 177);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                                                                                                                7" + "'", str2, "                                                                                                                                                                                7");
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1120");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        int int7 = dateTime3.getHour();
        java.util.Calendar calendar8 = dateTime3.getCal();
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime(calendar8);
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean14 = dateTime13.isNull();
        boolean boolean15 = net.ajaskey.common.Utils.sameDate(dateTime9, dateTime13);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime(100L);
        long long22 = dateTime19.getDeltaDays(dateTime21);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        int int25 = dateTime24.getMs();
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime(100L);
        double double32 = dateTime29.getDeltaYears(dateTime31);
        java.text.SimpleDateFormat simpleDateFormat33 = dateTime29.getSdf();
        boolean boolean34 = dateTime24.isLessThanOrEqual(dateTime29);
        java.text.SimpleDateFormat simpleDateFormat36 = null;
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat36);
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double40 = dateTime37.getDeltaYears(dateTime39);
        boolean boolean41 = dateTime37.isWeekday();
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long46 = dateTime37.getDeltaDays(dateTime45);
        long long47 = dateTime24.getDeltaDays(dateTime45);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime(100L);
        dateTime49.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean54 = dateTime49.isWeekday();
        int int55 = dateTime24.getYears(dateTime49);
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime(100L);
        double double62 = dateTime59.getDeltaYears(dateTime61);
        int int63 = dateTime59.getHour();
        java.text.SimpleDateFormat simpleDateFormat65 = null;
        net.ajaskey.common.DateTime dateTime66 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat65);
        net.ajaskey.common.DateTime dateTime68 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double69 = dateTime66.getDeltaYears(dateTime68);
        net.ajaskey.common.DateTime dateTime73 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean74 = dateTime68.isEqual(dateTime73);
        java.util.Calendar calendar75 = dateTime68.getCal();
        dateTime59.set(calendar75);
        dateTime24.set(calendar75);
        long long78 = dateTime21.getDeltaMilliSeconds(dateTime24);
        boolean boolean79 = dateTime13.isEqual(dateTime24);
        int int80 = dateTime24.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-62190310559063,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=0,MILLISECOND=937,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-719795L) + "'", long22 == (-719795L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1972.041095890411d) + "'", double32 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 719795L + "'", long47 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1870) + "'", int55 == (-1870));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1972.041095890411d) + "'", double62 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(calendar75);
        org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-100L) + "'", long78 == (-100L));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 4 + "'", int80 == 4);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1121");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("JanuaryThursdayThursday                                                                                               52.00Thursdayhi!Thursday");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1122");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) 49);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1123");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        java.text.SimpleDateFormat simpleDateFormat8 = null;
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double12 = dateTime9.getDeltaYears(dateTime11);
        boolean boolean13 = dateTime9.isWeekday();
        boolean boolean14 = dateTime3.sameDate(dateTime9);
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean25 = dateTime19.isEqual(dateTime24);
        dateTime3.set(dateTime24);
        net.ajaskey.common.DateTime dateTime27 = null;
        long long28 = dateTime3.getDeltaDays(dateTime27);
        java.lang.Class<?> wildcardClass29 = dateTime3.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1124");
        net.ajaskey.common.Utils.NL = "Thu 10-Apr-0002 10:43:25";
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1125");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        int int7 = dateTime3.getHour();
        dateTime3.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat12 = null;
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat12);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        boolean boolean17 = dateTime3.isEqual(dateTime15);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat23 = null;
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat23);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double27 = dateTime24.getDeltaYears(dateTime26);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean32 = dateTime26.isEqual(dateTime31);
        java.util.Calendar calendar33 = dateTime26.getCal();
        boolean boolean34 = dateTime21.isLessThan(dateTime26);
        dateTime21.setFirstWorkDay();
        boolean boolean36 = dateTime3.sameDate(dateTime21);
        net.ajaskey.common.DateTime dateTime37 = null;
        boolean boolean38 = net.ajaskey.common.Utils.sameMonth(dateTime3, dateTime37);
        java.text.SimpleDateFormat simpleDateFormat39 = dateTime3.getSdf();
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime(100L);
        long long46 = dateTime43.getDeltaDays(dateTime45);
        int int47 = dateTime43.getHour();
        dateTime43.add((int) (byte) 100, (int) (byte) 0);
        dateTime3.set(dateTime43);
        java.text.SimpleDateFormat simpleDateFormat53 = null;
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat53);
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double57 = dateTime54.getDeltaYears(dateTime56);
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean62 = dateTime56.isEqual(dateTime61);
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime(100L);
        int int65 = dateTime64.getMs();
        boolean boolean66 = dateTime61.isGreaterThanOrEqual(dateTime64);
        java.text.SimpleDateFormat simpleDateFormat68 = null;
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat68);
        net.ajaskey.common.DateTime dateTime71 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double72 = dateTime69.getDeltaYears(dateTime71);
        boolean boolean73 = dateTime69.isWeekday();
        boolean boolean74 = dateTime64.isLessThanOrEqual(dateTime69);
        net.ajaskey.common.DateTime dateTime76 = new net.ajaskey.common.DateTime(100L);
        dateTime76.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean81 = dateTime76.isWeekday();
        boolean boolean82 = dateTime64.isGreaterThanOrEqual(dateTime76);
        net.ajaskey.common.DateTime dateTime86 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean87 = dateTime64.isGreaterThanOrEqual(dateTime86);
        int int88 = dateTime64.getSecond();
        boolean boolean89 = dateTime43.isLessThan(dateTime64);
        java.util.Date date90 = dateTime43.getTime();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(simpleDateFormat39);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-719795L) + "'", long46 == (-719795L));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(date90);
// flaky:         org.junit.Assert.assertEquals(date90.toString(), "Thu Apr 10 10:44:01 MST 2");
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1126");
        java.lang.String str2 = net.ajaskey.common.Utils.lfmt((-1593103388831L), 28);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "          -1,593,103,388,831" + "'", str2, "          -1,593,103,388,831");
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1127");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        boolean boolean14 = dateTime9.isGreaterThanOrEqual(dateTime12);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        dateTime16.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(100L);
        double double27 = dateTime24.getDeltaYears(dateTime26);
        boolean boolean28 = dateTime26.isWeekday();
        java.util.Date date29 = dateTime26.getTime();
        dateTime16.set(dateTime26);
        boolean boolean31 = net.ajaskey.common.Utils.sameDate(dateTime9, dateTime16);
        dateTime9.add((int) '#', 6);
        net.ajaskey.common.DateTime dateTime37 = dateTime9.parse("31-Dec-1969", "");
        java.text.SimpleDateFormat simpleDateFormat39 = null;
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double43 = dateTime40.getDeltaYears(dateTime42);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean48 = dateTime42.isEqual(dateTime47);
        java.util.Calendar calendar49 = dateTime42.getCal();
        java.lang.String str50 = dateTime42.format();
        net.ajaskey.common.DateTime dateTime51 = null;
        long long52 = dateTime42.getDeltaDays(dateTime51);
        int int53 = dateTime42.getSecond();
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime(100L);
        double double60 = dateTime57.getDeltaYears(dateTime59);
        java.text.SimpleDateFormat simpleDateFormat62 = null;
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat62);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double66 = dateTime63.getDeltaYears(dateTime65);
        boolean boolean67 = dateTime63.isWeekday();
        boolean boolean68 = dateTime57.sameDate(dateTime63);
        int int69 = dateTime63.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime70 = dateTime42.copy(dateTime63);
        long long71 = dateTime9.getDeltaMilliSeconds(dateTime42);
        net.ajaskey.common.DateTime dateTime75 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime77 = new net.ajaskey.common.DateTime(100L);
        double double78 = dateTime75.getDeltaYears(dateTime77);
        boolean boolean79 = dateTime77.isWeekday();
        java.util.Date date80 = dateTime77.getTime();
        net.ajaskey.common.DateTime dateTime81 = new net.ajaskey.common.DateTime(date80);
        boolean boolean82 = dateTime9.isGreaterThan(dateTime81);
        java.lang.String str83 = dateTime81.getDay();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1972.041095890411d) + "'", double27 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(dateTime37);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "BAD-DATE-FORMAT" + "'", str50, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1972.041095890411d) + "'", double60 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNull(dateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 62190310558869L + "'", long71 == 62190310558869L);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-1972.041095890411d) + "'", double78 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Wednesday" + "'", str83, "Wednesday");
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1128");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        java.text.SimpleDateFormat simpleDateFormat13 = null;
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat13);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        boolean boolean18 = dateTime14.isWeekday();
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long23 = dateTime14.getDeltaDays(dateTime22);
        long long24 = dateTime1.getDeltaDays(dateTime22);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(100L);
        dateTime26.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime(100L);
        double double37 = dateTime34.getDeltaYears(dateTime36);
        boolean boolean38 = dateTime36.isWeekday();
        java.util.Date date39 = dateTime36.getTime();
        dateTime26.set(dateTime36);
        boolean boolean41 = dateTime1.isEqual(dateTime26);
        boolean boolean42 = dateTime1.isNull();
        net.ajaskey.common.DateTime dateTime44 = dateTime1.parse("10-Apr-0002");
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat50 = null;
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat50);
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double54 = dateTime51.getDeltaYears(dateTime53);
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean59 = dateTime53.isEqual(dateTime58);
        java.util.Calendar calendar60 = dateTime53.getCal();
        boolean boolean61 = dateTime48.isLessThan(dateTime53);
        java.lang.String str63 = dateTime48.format("                                                  32");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = dateTime44.isGreaterThanOrEqual(dateTime48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 719795L + "'", long24 == 719795L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1972.041095890411d) + "'", double37 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(dateTime44);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(calendar60);
        org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "                                                  32" + "'", str63, "                                                  32");
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1129");
        java.lang.String[] strArray5 = new java.lang.String[] { "     5.00" };
        java.util.List<java.io.File> fileList6 = net.ajaskey.common.Utils.getDirTree("                                                 100", strArray5);
        java.util.List<java.io.File> fileList7 = net.ajaskey.common.Utils.getDirTree("         1", strArray5);
        java.util.List<java.io.File> fileList8 = net.ajaskey.common.Utils.getDirTree("Thu 10-Apr-0002 10:43:39", strArray5);
        java.util.List<java.io.File> fileList9 = net.ajaskey.common.Utils.getDirTree("Thu 25-Jun-2020 10:43:40", strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(fileList6);
        org.junit.Assert.assertNull(fileList7);
        org.junit.Assert.assertNull(fileList8);
        org.junit.Assert.assertNull(fileList9);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1130");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        java.text.SimpleDateFormat simpleDateFormat8 = null;
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double12 = dateTime9.getDeltaYears(dateTime11);
        boolean boolean13 = dateTime9.isWeekday();
        boolean boolean14 = dateTime3.sameDate(dateTime9);
        int int15 = dateTime9.getMs();
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime(100L);
        int int18 = dateTime17.getMs();
        java.lang.String str19 = dateTime17.toString();
        int int20 = dateTime17.getDayOfYear();
        java.text.SimpleDateFormat simpleDateFormat22 = null;
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat22);
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double26 = dateTime23.getDeltaYears(dateTime25);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean31 = dateTime25.isEqual(dateTime30);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime(100L);
        int int34 = dateTime33.getMs();
        boolean boolean35 = dateTime30.isGreaterThanOrEqual(dateTime33);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime(100L);
        dateTime37.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime(100L);
        double double48 = dateTime45.getDeltaYears(dateTime47);
        boolean boolean49 = dateTime47.isWeekday();
        java.util.Date date50 = dateTime47.getTime();
        dateTime37.set(dateTime47);
        boolean boolean52 = net.ajaskey.common.Utils.sameDate(dateTime30, dateTime37);
        dateTime30.add((int) '#', 6);
        boolean boolean56 = dateTime17.sameDate(dateTime30);
        java.text.SimpleDateFormat simpleDateFormat58 = null;
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat58);
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double62 = dateTime59.getDeltaYears(dateTime61);
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime(dateTime59);
        boolean boolean64 = dateTime30.sameDate(dateTime63);
        net.ajaskey.common.DateTime dateTime68 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime(100L);
        double double71 = dateTime68.getDeltaYears(dateTime70);
        java.text.SimpleDateFormat simpleDateFormat73 = null;
        net.ajaskey.common.DateTime dateTime74 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat73);
        net.ajaskey.common.DateTime dateTime76 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double77 = dateTime74.getDeltaYears(dateTime76);
        boolean boolean78 = dateTime74.isWeekday();
        boolean boolean79 = dateTime68.sameDate(dateTime74);
        int int80 = dateTime68.getSecond();
        boolean boolean81 = net.ajaskey.common.Utils.sameDate(dateTime63, dateTime68);
        boolean boolean82 = net.ajaskey.common.Utils.sameDate(dateTime9, dateTime63);
        int int83 = dateTime9.getMinute();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "31-Dec-1969" + "'", str19, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 365 + "'", int20 == 365);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1972.041095890411d) + "'", double48 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1972.041095890411d) + "'", double71 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1131");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("33.00", true);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1132");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) (short) 0);
        int int2 = dateTime1.getHour();
        boolean boolean3 = dateTime1.isNull();
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime(dateTime1);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime("Thu 10-Apr-0002 10:43:10", "   8.00");
        boolean boolean8 = net.ajaskey.common.Utils.sameDate(dateTime1, dateTime7);
        int int9 = dateTime7.getMinute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1133");
        net.ajaskey.common.Utils.sleep(941);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1134");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        java.lang.String str3 = dateTime1.toString();
        int int4 = dateTime1.getDayOfYear();
        java.text.SimpleDateFormat simpleDateFormat6 = null;
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat6);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double10 = dateTime7.getDeltaYears(dateTime9);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean15 = dateTime9.isEqual(dateTime14);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime(100L);
        int int18 = dateTime17.getMs();
        boolean boolean19 = dateTime14.isGreaterThanOrEqual(dateTime17);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime(100L);
        dateTime21.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime(100L);
        double double32 = dateTime29.getDeltaYears(dateTime31);
        boolean boolean33 = dateTime31.isWeekday();
        java.util.Date date34 = dateTime31.getTime();
        dateTime21.set(dateTime31);
        boolean boolean36 = net.ajaskey.common.Utils.sameDate(dateTime14, dateTime21);
        dateTime14.add((int) '#', 6);
        boolean boolean40 = dateTime1.sameDate(dateTime14);
        java.text.SimpleDateFormat simpleDateFormat42 = null;
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat42);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double46 = dateTime43.getDeltaYears(dateTime45);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime(dateTime43);
        boolean boolean48 = dateTime14.sameDate(dateTime47);
        int int49 = dateTime47.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime(12, 345, 252);
        dateTime53.set(2, (int) (byte) 10, (-1958));
        boolean boolean58 = dateTime53.isWeekday();
        boolean boolean59 = net.ajaskey.common.Utils.sameDate(dateTime47, dateTime53);
        java.text.SimpleDateFormat simpleDateFormat64 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat65 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime66 = new net.ajaskey.common.DateTime("", simpleDateFormat64, simpleDateFormat65);
        java.text.SimpleDateFormat simpleDateFormat68 = null;
        java.text.SimpleDateFormat simpleDateFormat69 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime("January", simpleDateFormat68, simpleDateFormat69);
        net.ajaskey.common.DateTime dateTime71 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat64, simpleDateFormat69);
        java.text.SimpleDateFormat simpleDateFormat74 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat75 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime76 = new net.ajaskey.common.DateTime("", simpleDateFormat74, simpleDateFormat75);
        net.ajaskey.common.DateTime dateTime78 = new net.ajaskey.common.DateTime(100L);
        int int79 = dateTime78.getMs();
        java.text.SimpleDateFormat simpleDateFormat80 = net.ajaskey.common.Utils.sdf;
        dateTime78.setSdf(simpleDateFormat80);
        net.ajaskey.common.DateTime dateTime82 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat75, simpleDateFormat80);
        net.ajaskey.common.DateTime dateTime83 = new net.ajaskey.common.DateTime("                             100", simpleDateFormat69, simpleDateFormat75);
        net.ajaskey.common.DateTime dateTime84 = new net.ajaskey.common.DateTime("  53", simpleDateFormat75);
        java.util.Calendar calendar85 = null;
        dateTime84.set(calendar85);
        long long87 = dateTime47.getDeltaDays(dateTime84);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "31-Dec-1969" + "'", str3, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 365 + "'", int4 == 365);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1972.041095890411d) + "'", double32 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 25 + "'", int49 == 25);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat64);
        org.junit.Assert.assertNotNull(simpleDateFormat65);
        org.junit.Assert.assertNotNull(simpleDateFormat69);
        org.junit.Assert.assertNotNull(simpleDateFormat74);
        org.junit.Assert.assertNotNull(simpleDateFormat75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 100 + "'", int79 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat80);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1135");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        java.util.Calendar calendar11 = dateTime4.getCal();
        java.lang.String str12 = dateTime4.format();
        net.ajaskey.common.DateTime dateTime13 = null;
        long long14 = dateTime4.getDeltaDays(dateTime13);
        int int15 = dateTime4.getSecond();
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime(100L);
        double double22 = dateTime19.getDeltaYears(dateTime21);
        java.text.SimpleDateFormat simpleDateFormat24 = null;
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat24);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double28 = dateTime25.getDeltaYears(dateTime27);
        boolean boolean29 = dateTime25.isWeekday();
        boolean boolean30 = dateTime19.sameDate(dateTime25);
        int int31 = dateTime25.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime32 = dateTime4.copy(dateTime25);
        java.util.Date date33 = dateTime4.getTime();
        java.util.Date date34 = dateTime4.getTime();
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime(date34);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime(date34);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "BAD-DATE-FORMAT" + "'", str12, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1972.041095890411d) + "'", double22 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(dateTime32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 17:00:00 MST 1969");
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1136");
        net.ajaskey.common.Utils.TAB = "1.00";
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1137");
        java.lang.String str2 = net.ajaskey.common.Utils.fmt((double) 54, (int) '#');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                              54.00" + "'", str2, "                              54.00");
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1138");
        java.text.SimpleDateFormat simpleDateFormat1 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat3 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat4 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime("", simpleDateFormat3, simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat1, simpleDateFormat4);
        int int7 = dateTime6.getHour();
        java.lang.String str8 = dateTime6.getMonth();
        int int9 = dateTime6.getMinute();
        org.junit.Assert.assertNotNull(simpleDateFormat1);
        org.junit.Assert.assertNotNull(simpleDateFormat3);
        org.junit.Assert.assertNotNull(simpleDateFormat4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UNKNOWN" + "'", str8, "UNKNOWN");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1139");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        java.text.SimpleDateFormat simpleDateFormat8 = null;
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double12 = dateTime9.getDeltaYears(dateTime11);
        boolean boolean13 = dateTime9.isWeekday();
        boolean boolean14 = dateTime3.sameDate(dateTime9);
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean25 = dateTime19.isEqual(dateTime24);
        dateTime3.set(dateTime24);
        int int27 = dateTime24.getDayOfYear();
        java.text.SimpleDateFormat simpleDateFormat29 = null;
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat29);
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double33 = dateTime30.getDeltaYears(dateTime32);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean38 = dateTime32.isEqual(dateTime37);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime(100L);
        int int41 = dateTime40.getMs();
        boolean boolean42 = dateTime37.isGreaterThanOrEqual(dateTime40);
        java.text.SimpleDateFormat simpleDateFormat44 = null;
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat44);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double48 = dateTime45.getDeltaYears(dateTime47);
        boolean boolean49 = dateTime45.isWeekday();
        boolean boolean50 = dateTime40.isLessThanOrEqual(dateTime45);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime(100L);
        dateTime52.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean57 = dateTime52.isWeekday();
        boolean boolean58 = dateTime40.isGreaterThanOrEqual(dateTime52);
        java.lang.String str59 = dateTime40.toFullString();
        boolean boolean60 = dateTime24.isGreaterThanOrEqual(dateTime40);
        dateTime40.setFirstWorkDay();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str59, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1140");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("February", false);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1141");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("Wed 12-Apr-0139 10:43:48");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1142");
        net.ajaskey.common.Utils.TAB = "                     8.00";
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1143");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        int int3 = dateTime1.getHour();
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat9 = null;
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double13 = dateTime10.getDeltaYears(dateTime12);
        boolean boolean14 = dateTime7.isLessThan(dateTime12);
        java.lang.String str15 = dateTime12.toFullString();
        dateTime12.add(10, (int) (byte) -1);
        java.text.SimpleDateFormat simpleDateFormat20 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat22 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat23 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime("", simpleDateFormat22, simpleDateFormat23);
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat20, simpleDateFormat23);
        boolean boolean26 = dateTime12.isGreaterThan(dateTime25);
        boolean boolean27 = dateTime1.isEqual(dateTime12);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.lang.String str32 = dateTime31.toFullString();
        dateTime31.add(7, 53);
        net.ajaskey.common.DateTime dateTime36 = dateTime1.copy(dateTime31);
        java.lang.String str37 = dateTime36.getDay();
        java.text.SimpleDateFormat simpleDateFormat39 = null;
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double43 = dateTime40.getDeltaYears(dateTime42);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean48 = dateTime42.isEqual(dateTime47);
        java.util.Calendar calendar49 = dateTime42.getCal();
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime(calendar49);
        long long51 = dateTime36.getDeltaMilliSeconds(dateTime50);
        net.ajaskey.common.DateTime dateTime53 = dateTime36.parse("");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str15, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertNotNull(simpleDateFormat20);
        org.junit.Assert.assertNotNull(simpleDateFormat22);
        org.junit.Assert.assertNotNull(simpleDateFormat23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Thu 10-Apr-0002 10:44:02" + "'", str32, "Thu 10-Apr-0002 10:44:02");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Thursday" + "'", str37, "Thursday");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 62190310557275L + "'", long51 == 62190310557275L);
        org.junit.Assert.assertNull(dateTime53);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1144");
        java.text.SimpleDateFormat simpleDateFormat6 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat8 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat9 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("", simpleDateFormat8, simpleDateFormat9);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat6, simpleDateFormat9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime("10-Apr-0002", simpleDateFormat9);
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        java.text.SimpleDateFormat simpleDateFormat16 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("January", simpleDateFormat15, simpleDateFormat16);
        java.text.SimpleDateFormat simpleDateFormat20 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime("January", simpleDateFormat20);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime("", simpleDateFormat20);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime("", simpleDateFormat16, simpleDateFormat20);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime("January                                                                                               52.00                                                                                               52.00                                                                                               52.00                                                                                               52.00hi!                                                                                               52.00", simpleDateFormat9, simpleDateFormat20);
        java.text.SimpleDateFormat simpleDateFormat26 = null;
        java.text.SimpleDateFormat simpleDateFormat27 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime("January", simpleDateFormat26, simpleDateFormat27);
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime("December", simpleDateFormat20, simpleDateFormat27);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime("                                                                                                           0", simpleDateFormat20);
        java.text.SimpleDateFormat simpleDateFormat36 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat37 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime("", simpleDateFormat36, simpleDateFormat37);
        java.text.SimpleDateFormat simpleDateFormat40 = null;
        java.text.SimpleDateFormat simpleDateFormat41 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime("January", simpleDateFormat40, simpleDateFormat41);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat36, simpleDateFormat41);
        java.text.SimpleDateFormat simpleDateFormat46 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat47 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime("", simpleDateFormat46, simpleDateFormat47);
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime(100L);
        int int51 = dateTime50.getMs();
        java.text.SimpleDateFormat simpleDateFormat52 = net.ajaskey.common.Utils.sdf;
        dateTime50.setSdf(simpleDateFormat52);
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat47, simpleDateFormat52);
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime("                             100", simpleDateFormat41, simpleDateFormat47);
        java.text.SimpleDateFormat simpleDateFormat58 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat59 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime60 = new net.ajaskey.common.DateTime("", simpleDateFormat58, simpleDateFormat59);
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime("Thu 10-Apr-0002 10:42:54", simpleDateFormat58);
        net.ajaskey.common.DateTime dateTime62 = new net.ajaskey.common.DateTime("5.00", simpleDateFormat41, simpleDateFormat58);
        java.text.SimpleDateFormat simpleDateFormat63 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat41, simpleDateFormat63);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime("Wed 31-Dec-1969 17:00:00", simpleDateFormat20, simpleDateFormat63);
        org.junit.Assert.assertNotNull(simpleDateFormat6);
        org.junit.Assert.assertNotNull(simpleDateFormat8);
        org.junit.Assert.assertNotNull(simpleDateFormat9);
        org.junit.Assert.assertNotNull(simpleDateFormat16);
        org.junit.Assert.assertNotNull(simpleDateFormat20);
        org.junit.Assert.assertNotNull(simpleDateFormat27);
        org.junit.Assert.assertNotNull(simpleDateFormat36);
        org.junit.Assert.assertNotNull(simpleDateFormat37);
        org.junit.Assert.assertNotNull(simpleDateFormat41);
        org.junit.Assert.assertNotNull(simpleDateFormat46);
        org.junit.Assert.assertNotNull(simpleDateFormat47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat52);
        org.junit.Assert.assertNotNull(simpleDateFormat58);
        org.junit.Assert.assertNotNull(simpleDateFormat59);
        org.junit.Assert.assertNotNull(simpleDateFormat63);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1145");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("Thu 10-Apr-0002 10:43:19");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1146");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        double double13 = dateTime10.getDeltaYears(dateTime12);
        int int14 = dateTime10.getHour();
        int int15 = dateTime10.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime(100L);
        double double22 = dateTime19.getDeltaYears(dateTime21);
        boolean boolean23 = dateTime21.isWeekday();
        boolean boolean24 = net.ajaskey.common.Utils.sameDate(dateTime10, dateTime21);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(100L);
        dateTime26.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime(100L);
        double double37 = dateTime34.getDeltaYears(dateTime36);
        boolean boolean38 = dateTime36.isWeekday();
        java.util.Date date39 = dateTime36.getTime();
        dateTime26.set(dateTime36);
        int int41 = dateTime26.getYear();
        boolean boolean42 = dateTime21.isGreaterThanOrEqual(dateTime26);
        boolean boolean43 = dateTime3.sameDate(dateTime21);
        net.ajaskey.common.DateTime dateTime46 = dateTime21.parse("  -1.00", "                     62,190,310,608,217.00");
        // The following exception was thrown during execution in test generation
        try {
            dateTime46.add((int) (short) 10, 252);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1972.041095890411d) + "'", double13 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1972.041095890411d) + "'", double22 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1972.041095890411d) + "'", double37 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1969 + "'", int41 == 1969);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(dateTime46);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1147");
        net.ajaskey.common.Utils.TAB = "Thu 10-Apr-0002 10:43:12";
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1148");
        java.text.SimpleDateFormat simpleDateFormat2 = null;
        java.text.SimpleDateFormat simpleDateFormat3 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime("January", simpleDateFormat2, simpleDateFormat3);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime("100.00", simpleDateFormat2);
        java.text.SimpleDateFormat simpleDateFormat7 = null;
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat7);
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double11 = dateTime8.getDeltaYears(dateTime10);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean16 = dateTime10.isEqual(dateTime15);
        long long17 = dateTime5.getDeltaDays(dateTime15);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime(dateTime5);
        int int19 = dateTime18.getDayOfYear();
        org.junit.Assert.assertNotNull(simpleDateFormat3);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 177 + "'", int19 == 177);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1149");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        boolean boolean3 = dateTime1.isWeekday();
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime((long) (short) 0);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime(100L);
        int int8 = dateTime7.getMs();
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime(100L);
        double double15 = dateTime12.getDeltaYears(dateTime14);
        java.text.SimpleDateFormat simpleDateFormat16 = dateTime12.getSdf();
        boolean boolean17 = dateTime7.isLessThanOrEqual(dateTime12);
        java.text.SimpleDateFormat simpleDateFormat19 = null;
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat19);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double23 = dateTime20.getDeltaYears(dateTime22);
        boolean boolean24 = dateTime20.isWeekday();
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long29 = dateTime20.getDeltaDays(dateTime28);
        long long30 = dateTime7.getDeltaDays(dateTime28);
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime(100L);
        dateTime32.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean37 = dateTime32.isWeekday();
        int int38 = dateTime7.getYears(dateTime32);
        int int39 = dateTime7.getYear();
        java.util.Calendar calendar40 = dateTime7.getCal();
        net.ajaskey.common.DateTime dateTime41 = dateTime5.copy(dateTime7);
        boolean boolean42 = dateTime1.isGreaterThan(dateTime7);
        java.text.SimpleDateFormat simpleDateFormat44 = null;
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat44);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double48 = dateTime45.getDeltaYears(dateTime47);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean53 = dateTime47.isEqual(dateTime52);
        java.lang.String str54 = dateTime52.getMonth();
        net.ajaskey.common.DateTime dateTime55 = dateTime7.copy(dateTime52);
        boolean boolean56 = dateTime55.isWeekday();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1972.041095890411d) + "'", double15 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 719795L + "'", long30 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1870) + "'", int38 == (-1870));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1969 + "'", int39 == 1969);
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "April" + "'", str54, "April");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1150");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt(345, (int) 'a');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                              345" + "'", str2, "                                                                                              345");
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1151");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(7, 31, (int) (short) 1);
        int int4 = dateTime3.getYear();
        java.text.SimpleDateFormat simpleDateFormat6 = null;
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat6);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double10 = dateTime7.getDeltaYears(dateTime9);
        java.text.SimpleDateFormat simpleDateFormat13 = null;
        java.text.SimpleDateFormat simpleDateFormat14 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime("January", simpleDateFormat13, simpleDateFormat14);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("Thursday", simpleDateFormat13);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime(dateTime16);
        boolean boolean18 = dateTime7.isEqual(dateTime16);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        double double25 = dateTime22.getDeltaYears(dateTime24);
        int int26 = dateTime22.getHour();
        java.util.Calendar calendar27 = dateTime22.getCal();
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime(calendar27);
        dateTime16.set(calendar27);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime(calendar27);
        dateTime3.set(calendar27);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(simpleDateFormat14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1972.041095890411d) + "'", double25 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-62190310556824,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=3,MILLISECOND=176,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1152");
        java.util.Map<java.lang.String, java.lang.Integer> strMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = net.ajaskey.common.Utils.findName(strMap0, (java.lang.Integer) 248);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1153");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        int int12 = dateTime1.getDayOfMonth();
        java.util.Date date13 = dateTime1.getTime();
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime(100L);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        int int21 = dateTime17.getHour();
        java.text.SimpleDateFormat simpleDateFormat23 = null;
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat23);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double27 = dateTime24.getDeltaYears(dateTime26);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean32 = dateTime26.isEqual(dateTime31);
        java.util.Calendar calendar33 = dateTime26.getCal();
        dateTime17.set(calendar33);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime(calendar33);
        dateTime35.add(14, 2020);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime(100L);
        double double45 = dateTime42.getDeltaYears(dateTime44);
        boolean boolean46 = dateTime44.isWeekday();
        java.util.Date date47 = dateTime44.getTime();
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime(date47);
        java.text.SimpleDateFormat simpleDateFormat50 = null;
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat50);
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double54 = dateTime51.getDeltaYears(dateTime53);
        boolean boolean55 = dateTime51.isWeekday();
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long60 = dateTime51.getDeltaDays(dateTime59);
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime(dateTime51);
        boolean boolean62 = dateTime48.isGreaterThan(dateTime51);
        java.lang.String str63 = dateTime51.getMonth();
        boolean boolean64 = dateTime35.sameDate(dateTime51);
        net.ajaskey.common.DateTime dateTime68 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime(100L);
        double double71 = dateTime68.getDeltaYears(dateTime70);
        net.ajaskey.common.DateTime dateTime73 = new net.ajaskey.common.DateTime((long) (short) 0);
        int int74 = dateTime73.getHour();
        boolean boolean75 = net.ajaskey.common.Utils.sameDate(dateTime70, dateTime73);
        java.lang.String str76 = dateTime70.getDay();
        boolean boolean77 = dateTime35.isLessThan(dateTime70);
        boolean boolean78 = dateTime1.isGreaterThan(dateTime35);
        java.lang.Class<?> wildcardClass79 = dateTime1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1972.041095890411d) + "'", double20 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1972.041095890411d) + "'", double45 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UNKNOWN" + "'", str63, "UNKNOWN");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1972.041095890411d) + "'", double71 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Wednesday" + "'", str76, "Wednesday");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1154");
        java.lang.String str2 = net.ajaskey.common.Utils.fmt((double) 62190310608217L, 9);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "62,190,310,608,217.00" + "'", str2, "62,190,310,608,217.00");
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1155");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        java.text.SimpleDateFormat simpleDateFormat8 = null;
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double12 = dateTime9.getDeltaYears(dateTime11);
        boolean boolean13 = dateTime9.isWeekday();
        boolean boolean14 = dateTime3.sameDate(dateTime9);
        int int15 = dateTime3.getSecond();
        int int16 = dateTime3.getDayOfYear();
        java.lang.String str17 = dateTime3.toFullString();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Thu 10-Apr-0002 10:44:03" + "'", str17, "Thu 10-Apr-0002 10:44:03");
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1156");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        boolean boolean14 = dateTime9.isGreaterThanOrEqual(dateTime12);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        int int17 = dateTime16.getMs();
        int int18 = dateTime16.getHour();
        java.text.SimpleDateFormat simpleDateFormat20 = null;
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat20);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double24 = dateTime21.getDeltaYears(dateTime23);
        boolean boolean25 = dateTime21.isWeekday();
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long30 = dateTime21.getDeltaDays(dateTime29);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime(dateTime21);
        boolean boolean32 = dateTime16.isLessThanOrEqual(dateTime31);
        boolean boolean33 = net.ajaskey.common.Utils.sameDate(dateTime12, dateTime31);
        int int34 = dateTime31.getSecond();
        int int35 = dateTime31.getDayOfWeek();
        int int36 = dateTime31.getMs();
        java.lang.Class<?> wildcardClass37 = dateTime31.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 313 + "'", int36 == 313);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1157");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("                                                                                                   0", false);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1158");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("-100");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1159");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        boolean boolean18 = dateTime16.isWeekday();
        int int19 = dateTime16.getDayOfYear();
        net.ajaskey.common.DateTime dateTime20 = dateTime4.copy(dateTime16);
        java.util.Calendar calendar21 = dateTime16.getCal();
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime(calendar21);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime(calendar21);
        java.lang.String str25 = dateTime23.format("                                                                                                0.00");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1972.041095890411d) + "'", double17 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 365 + "'", int19 == 365);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "                                                                                                0.00" + "'", str25, "                                                                                                0.00");
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1160");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(100L);
        int int4 = dateTime3.getMs();
        java.text.SimpleDateFormat simpleDateFormat5 = net.ajaskey.common.Utils.sdf;
        dateTime3.setSdf(simpleDateFormat5);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat5);
        java.text.SimpleDateFormat simpleDateFormat9 = null;
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double13 = dateTime10.getDeltaYears(dateTime12);
        boolean boolean14 = dateTime12.isNull();
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        dateTime17.set((int) ' ', 0, 11);
        boolean boolean22 = dateTime12.isGreaterThanOrEqual(dateTime17);
        double double23 = dateTime7.getDeltaYears(dateTime12);
        java.text.SimpleDateFormat simpleDateFormat25 = null;
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat25);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double29 = dateTime26.getDeltaYears(dateTime28);
        boolean boolean30 = dateTime28.isNull();
        boolean boolean31 = dateTime12.isGreaterThan(dateTime28);
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime(dateTime12);
        int int33 = dateTime32.getDayOfMonth();
        int int34 = dateTime32.getMinute();
        boolean boolean35 = dateTime32.isNull();
        java.text.SimpleDateFormat simpleDateFormat40 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat41 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime("", simpleDateFormat40, simpleDateFormat41);
        java.text.SimpleDateFormat simpleDateFormat44 = null;
        java.text.SimpleDateFormat simpleDateFormat45 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime("January", simpleDateFormat44, simpleDateFormat45);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat40, simpleDateFormat45);
        java.text.SimpleDateFormat simpleDateFormat50 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat51 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime("", simpleDateFormat50, simpleDateFormat51);
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime(100L);
        int int55 = dateTime54.getMs();
        java.text.SimpleDateFormat simpleDateFormat56 = net.ajaskey.common.Utils.sdf;
        dateTime54.setSdf(simpleDateFormat56);
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat51, simpleDateFormat56);
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime("                             100", simpleDateFormat45, simpleDateFormat51);
        java.text.SimpleDateFormat simpleDateFormat62 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat63 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime("", simpleDateFormat62, simpleDateFormat63);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime("Thu 10-Apr-0002 10:42:54", simpleDateFormat62);
        net.ajaskey.common.DateTime dateTime66 = new net.ajaskey.common.DateTime("5.00", simpleDateFormat45, simpleDateFormat62);
        dateTime32.setSdf(simpleDateFormat45);
        java.text.SimpleDateFormat simpleDateFormat69 = null;
        java.text.SimpleDateFormat simpleDateFormat73 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat75 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat76 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime77 = new net.ajaskey.common.DateTime("", simpleDateFormat75, simpleDateFormat76);
        net.ajaskey.common.DateTime dateTime78 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat73, simpleDateFormat76);
        net.ajaskey.common.DateTime dateTime79 = new net.ajaskey.common.DateTime("10-Apr-0002", simpleDateFormat76);
        java.text.SimpleDateFormat simpleDateFormat82 = null;
        java.text.SimpleDateFormat simpleDateFormat83 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime84 = new net.ajaskey.common.DateTime("January", simpleDateFormat82, simpleDateFormat83);
        java.text.SimpleDateFormat simpleDateFormat87 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime88 = new net.ajaskey.common.DateTime("January", simpleDateFormat87);
        net.ajaskey.common.DateTime dateTime89 = new net.ajaskey.common.DateTime("", simpleDateFormat87);
        net.ajaskey.common.DateTime dateTime90 = new net.ajaskey.common.DateTime("", simpleDateFormat83, simpleDateFormat87);
        net.ajaskey.common.DateTime dateTime91 = new net.ajaskey.common.DateTime("January                                                                                               52.00                                                                                               52.00                                                                                               52.00                                                                                               52.00hi!                                                                                               52.00", simpleDateFormat76, simpleDateFormat87);
        net.ajaskey.common.DateTime dateTime92 = new net.ajaskey.common.DateTime("January", simpleDateFormat69, simpleDateFormat87);
        net.ajaskey.common.DateTime dateTime93 = new net.ajaskey.common.DateTime("    25", simpleDateFormat45, simpleDateFormat69);
        java.lang.String str94 = dateTime93.toFullString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat5);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 31 + "'", int33 == 31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat40);
        org.junit.Assert.assertNotNull(simpleDateFormat41);
        org.junit.Assert.assertNotNull(simpleDateFormat45);
        org.junit.Assert.assertNotNull(simpleDateFormat50);
        org.junit.Assert.assertNotNull(simpleDateFormat51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat56);
        org.junit.Assert.assertNotNull(simpleDateFormat62);
        org.junit.Assert.assertNotNull(simpleDateFormat63);
        org.junit.Assert.assertNotNull(simpleDateFormat73);
        org.junit.Assert.assertNotNull(simpleDateFormat75);
        org.junit.Assert.assertNotNull(simpleDateFormat76);
        org.junit.Assert.assertNotNull(simpleDateFormat83);
        org.junit.Assert.assertNotNull(simpleDateFormat87);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Invalid Time" + "'", str94, "Invalid Time");
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1161");
        net.ajaskey.common.Utils.NL = "Fri 11-Jan-0032 10:43:43";
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1162");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("10-Apr-0002", "5.00");
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime(12, 42, (int) (byte) 1);
        java.util.Calendar calendar7 = dateTime6.getCal();
        boolean boolean8 = net.ajaskey.common.Utils.sameDate(dateTime2, dateTime6);
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime((-59011286399903L));
        java.text.SimpleDateFormat simpleDateFormat12 = null;
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat12);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean21 = dateTime15.isEqual(dateTime20);
        java.util.Calendar calendar22 = dateTime15.getCal();
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        int int25 = dateTime24.getMs();
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime(100L);
        double double32 = dateTime29.getDeltaYears(dateTime31);
        java.text.SimpleDateFormat simpleDateFormat33 = dateTime29.getSdf();
        boolean boolean34 = dateTime24.isLessThanOrEqual(dateTime29);
        int int35 = dateTime24.getMinute();
        long long36 = dateTime15.getDeltaMilliSeconds(dateTime24);
        long long37 = dateTime10.getDeltaDays(dateTime15);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("Thu 10-Apr-0002 10:42:54", "                       25");
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime((long) 10);
        boolean boolean43 = dateTime40.isGreaterThan(dateTime42);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat49 = null;
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat49);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double53 = dateTime50.getDeltaYears(dateTime52);
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean58 = dateTime52.isEqual(dateTime57);
        java.util.Calendar calendar59 = dateTime52.getCal();
        boolean boolean60 = dateTime47.isLessThan(dateTime52);
        dateTime47.setFirstWorkDay();
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime67 = new net.ajaskey.common.DateTime(100L);
        double double68 = dateTime65.getDeltaYears(dateTime67);
        java.text.SimpleDateFormat simpleDateFormat70 = null;
        net.ajaskey.common.DateTime dateTime71 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat70);
        net.ajaskey.common.DateTime dateTime73 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double74 = dateTime71.getDeltaYears(dateTime73);
        boolean boolean75 = dateTime71.isWeekday();
        boolean boolean76 = dateTime65.sameDate(dateTime71);
        boolean boolean77 = dateTime47.sameDate(dateTime65);
        dateTime65.set(0, 0, (int) (short) 0);
        boolean boolean82 = net.ajaskey.common.Utils.sameDate(dateTime40, dateTime65);
        double double83 = dateTime15.getDeltaYears(dateTime40);
        net.ajaskey.common.DateTime dateTime87 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime89 = new net.ajaskey.common.DateTime(100L);
        long long90 = dateTime87.getDeltaDays(dateTime89);
        int int91 = dateTime87.getHour();
        dateTime87.add((int) (byte) 100, (int) (byte) 0);
        int int95 = dateTime87.getDayOfYear();
        java.util.Date date96 = dateTime87.getTime();
        dateTime15.set(date96);
        dateTime6.set(date96);
        net.ajaskey.common.DateTime dateTime99 = new net.ajaskey.common.DateTime(date96);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-62190310556426,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=3,MILLISECOND=574,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-62190310556426,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=3,MILLISECOND=574,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1972.041095890411d) + "'", double32 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L + "'", long36 == 100L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-683000L) + "'", long37 == (-683000L));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(calendar59);
        org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1972.041095890411d) + "'", double68 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-719795L) + "'", long90 == (-719795L));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 100 + "'", int95 == 100);
        org.junit.Assert.assertNotNull(date96);
// flaky:         org.junit.Assert.assertEquals(date96.toString(), "Thu Apr 10 10:44:03 MST 2");
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1163");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt(0, 42);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                         0" + "'", str2, "                                         0");
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1164");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime(100L);
        int int3 = dateTime2.getMs();
        boolean boolean4 = dateTime2.isWeekday();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((long) (short) 0);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        int int9 = dateTime8.getMs();
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(100L);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        java.text.SimpleDateFormat simpleDateFormat17 = dateTime13.getSdf();
        boolean boolean18 = dateTime8.isLessThanOrEqual(dateTime13);
        java.text.SimpleDateFormat simpleDateFormat20 = null;
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat20);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double24 = dateTime21.getDeltaYears(dateTime23);
        boolean boolean25 = dateTime21.isWeekday();
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long30 = dateTime21.getDeltaDays(dateTime29);
        long long31 = dateTime8.getDeltaDays(dateTime29);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime(100L);
        dateTime33.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean38 = dateTime33.isWeekday();
        int int39 = dateTime8.getYears(dateTime33);
        int int40 = dateTime8.getYear();
        java.util.Calendar calendar41 = dateTime8.getCal();
        net.ajaskey.common.DateTime dateTime42 = dateTime6.copy(dateTime8);
        boolean boolean43 = dateTime2.isGreaterThan(dateTime8);
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime(dateTime2);
        int int45 = dateTime44.getDayOfMonth();
        dateTime44.add(2020, 12);
        java.text.SimpleDateFormat simpleDateFormat51 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat53 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat54 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime("", simpleDateFormat53, simpleDateFormat54);
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat51, simpleDateFormat54);
        net.ajaskey.common.DateTime dateTime60 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat63 = null;
        java.text.SimpleDateFormat simpleDateFormat64 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime("January", simpleDateFormat63, simpleDateFormat64);
        java.text.SimpleDateFormat simpleDateFormat68 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime("January", simpleDateFormat68);
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime("", simpleDateFormat68);
        net.ajaskey.common.DateTime dateTime71 = new net.ajaskey.common.DateTime("", simpleDateFormat64, simpleDateFormat68);
        dateTime60.setSdf(simpleDateFormat64);
        net.ajaskey.common.DateTime dateTime73 = new net.ajaskey.common.DateTime("", simpleDateFormat54, simpleDateFormat64);
        dateTime44.setSdf(simpleDateFormat64);
        net.ajaskey.common.DateTime dateTime75 = new net.ajaskey.common.DateTime("Thu 25-Jun-2020 10:43:26", simpleDateFormat64);
        net.ajaskey.common.DateTime dateTime79 = new net.ajaskey.common.DateTime(25, 1, 0);
        int int80 = dateTime79.getMinute();
        java.util.Date date81 = dateTime79.getTime();
        boolean boolean82 = dateTime75.isEqual(dateTime79);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1972.041095890411d) + "'", double16 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 719795L + "'", long31 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1870) + "'", int39 == (-1870));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1969 + "'", int40 == 1969);
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 31 + "'", int45 == 31);
        org.junit.Assert.assertNotNull(simpleDateFormat51);
        org.junit.Assert.assertNotNull(simpleDateFormat53);
        org.junit.Assert.assertNotNull(simpleDateFormat54);
        org.junit.Assert.assertNotNull(simpleDateFormat64);
        org.junit.Assert.assertNotNull(simpleDateFormat68);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 44 + "'", int80 == 44);
        org.junit.Assert.assertNotNull(date81);
// flaky:         org.junit.Assert.assertEquals(date81.toString(), "Wed Jan 31 10:44:03 MST 25");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1165");
        java.text.SimpleDateFormat simpleDateFormat2 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime("January", simpleDateFormat2);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime("", simpleDateFormat2);
        net.ajaskey.common.DateTime dateTime5 = null;
        net.ajaskey.common.DateTime dateTime6 = dateTime4.copy(dateTime5);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = dateTime6.getDayOfMonth();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(simpleDateFormat2);
        org.junit.Assert.assertNull(dateTime6);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1166");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) 46);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1167");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("5.00", "     10");
        int int3 = dateTime2.getDayOfWeek();
        int int4 = dateTime2.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(11, (int) (short) 1, 365);
        boolean boolean9 = net.ajaskey.common.Utils.sameMonth(dateTime2, dateTime8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime(100L);
        int int12 = dateTime11.getMs();
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime(100L);
        double double19 = dateTime16.getDeltaYears(dateTime18);
        java.text.SimpleDateFormat simpleDateFormat20 = dateTime16.getSdf();
        boolean boolean21 = dateTime11.isLessThanOrEqual(dateTime16);
        boolean boolean22 = dateTime11.isWeekday();
        java.util.Calendar calendar23 = dateTime11.getCal();
        java.text.SimpleDateFormat simpleDateFormat25 = null;
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat25);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double29 = dateTime26.getDeltaYears(dateTime28);
        boolean boolean30 = dateTime26.isWeekday();
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long35 = dateTime26.getDeltaDays(dateTime34);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime(dateTime26);
        dateTime36.setFirstWorkDay();
        long long38 = dateTime11.getDeltaDays(dateTime36);
        boolean boolean39 = net.ajaskey.common.Utils.sameDate(dateTime8, dateTime11);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime(dateTime11);
        int int41 = dateTime40.getMs();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1972.041095890411d) + "'", double19 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-18438L) + "'", long38 == (-18438L));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1168");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        int int7 = dateTime3.getHour();
        dateTime3.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat12 = null;
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat12);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        boolean boolean17 = dateTime3.isEqual(dateTime15);
        java.lang.String str18 = dateTime3.toString();
        dateTime3.add(100, (int) (byte) 0);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime("January", "100.00");
        boolean boolean25 = dateTime3.sameDate(dateTime24);
        int int26 = dateTime24.getSecond();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "10-Apr-0002" + "'", str18, "10-Apr-0002");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1169");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("7");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1170");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("     5.00", false);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1171");
        net.ajaskey.common.Utils.NL = "Thu 10-Apr-0002 10:43:58";
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1172");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        java.text.SimpleDateFormat simpleDateFormat13 = null;
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat13);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        boolean boolean18 = dateTime14.isWeekday();
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long23 = dateTime14.getDeltaDays(dateTime22);
        long long24 = dateTime1.getDeltaDays(dateTime22);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat30 = null;
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat30);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double34 = dateTime31.getDeltaYears(dateTime33);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean39 = dateTime33.isEqual(dateTime38);
        java.util.Calendar calendar40 = dateTime33.getCal();
        boolean boolean41 = dateTime28.isLessThan(dateTime33);
        boolean boolean42 = net.ajaskey.common.Utils.sameDate(dateTime1, dateTime28);
        int int43 = dateTime28.getDayOfWeek();
        java.util.Date date44 = null;
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime(date44);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime(100L);
        double double52 = dateTime49.getDeltaYears(dateTime51);
        int int53 = dateTime49.getHour();
        java.text.SimpleDateFormat simpleDateFormat55 = null;
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat55);
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double59 = dateTime56.getDeltaYears(dateTime58);
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean64 = dateTime58.isEqual(dateTime63);
        java.util.Calendar calendar65 = dateTime58.getCal();
        dateTime49.set(calendar65);
        net.ajaskey.common.DateTime dateTime67 = new net.ajaskey.common.DateTime(calendar65);
        net.ajaskey.common.DateTime dateTime68 = dateTime45.copy(dateTime67);
        net.ajaskey.common.DateTime dateTime72 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime74 = new net.ajaskey.common.DateTime(100L);
        double double75 = dateTime72.getDeltaYears(dateTime74);
        boolean boolean76 = dateTime74.isWeekday();
        int int77 = dateTime74.getDayOfYear();
        long long78 = dateTime68.getDeltaMilliSeconds(dateTime74);
        java.util.Calendar calendar79 = dateTime68.getCal();
        double double80 = dateTime28.getDeltaYears(dateTime68);
        java.lang.String str82 = dateTime28.format("                              -1");
        net.ajaskey.common.DateTime dateTime85 = dateTime28.parse("33.00", "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 719795L + "'", long24 == 719795L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1972.041095890411d) + "'", double52 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-1972.041095890411d) + "'", double75 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 365 + "'", int77 == 365);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 100L + "'", long78 == 100L);
        org.junit.Assert.assertNotNull(calendar79);
        org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-1972.041095890411d) + "'", double80 == (-1972.041095890411d));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "                              -1" + "'", str82, "                              -1");
        org.junit.Assert.assertNull(dateTime85);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1173");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("Thu 10-Apr-0002 10:43:39", true);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1174");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        int int3 = dateTime1.getHour();
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat9 = null;
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double13 = dateTime10.getDeltaYears(dateTime12);
        boolean boolean14 = dateTime7.isLessThan(dateTime12);
        java.lang.String str15 = dateTime12.toFullString();
        dateTime12.add(10, (int) (byte) -1);
        java.text.SimpleDateFormat simpleDateFormat20 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat22 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat23 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime("", simpleDateFormat22, simpleDateFormat23);
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat20, simpleDateFormat23);
        boolean boolean26 = dateTime12.isGreaterThan(dateTime25);
        boolean boolean27 = dateTime1.isEqual(dateTime12);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.lang.String str32 = dateTime31.toFullString();
        dateTime31.add(7, 53);
        net.ajaskey.common.DateTime dateTime36 = dateTime1.copy(dateTime31);
        net.ajaskey.common.DateTime dateTime39 = dateTime31.parse("", "                             365");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str15, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertNotNull(simpleDateFormat20);
        org.junit.Assert.assertNotNull(simpleDateFormat22);
        org.junit.Assert.assertNotNull(simpleDateFormat23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Thu 10-Apr-0002 10:44:04" + "'", str32, "Thu 10-Apr-0002 10:44:04");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNull(dateTime39);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1175");
        java.util.zip.ZipOutputStream zipOutputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.Utils.writeToZipFile("Thursday", zipOutputStream1);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: Thursday (Access is denied)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1176");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = net.ajaskey.common.Utils.ifmt((int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.util.FormatFlagsConversionMismatchException; message: Conversion = s, Flags = 0");
        } catch (java.util.FormatFlagsConversionMismatchException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1177");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        java.text.SimpleDateFormat simpleDateFormat13 = null;
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat13);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        boolean boolean18 = dateTime14.isWeekday();
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long23 = dateTime14.getDeltaDays(dateTime22);
        long long24 = dateTime1.getDeltaDays(dateTime22);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(100L);
        dateTime26.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean31 = dateTime26.isWeekday();
        int int32 = dateTime1.getYears(dateTime26);
        java.text.SimpleDateFormat simpleDateFormat34 = null;
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat34);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double38 = dateTime35.getDeltaYears(dateTime37);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean43 = dateTime37.isEqual(dateTime42);
        int int44 = dateTime37.getDayOfWeek();
        boolean boolean45 = dateTime26.isLessThan(dateTime37);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime(100L);
        java.util.Calendar calendar48 = dateTime47.getCal();
        java.text.SimpleDateFormat simpleDateFormat50 = null;
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat50);
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double54 = dateTime51.getDeltaYears(dateTime53);
        boolean boolean55 = dateTime51.isWeekday();
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long60 = dateTime51.getDeltaDays(dateTime59);
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime(dateTime51);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime67 = new net.ajaskey.common.DateTime(100L);
        double double68 = dateTime65.getDeltaYears(dateTime67);
        boolean boolean69 = dateTime67.isWeekday();
        java.util.Date date70 = dateTime67.getTime();
        dateTime51.set(date70);
        net.ajaskey.common.DateTime dateTime73 = new net.ajaskey.common.DateTime(100L);
        int int74 = dateTime73.getMs();
        java.lang.String str75 = dateTime73.toString();
        boolean boolean76 = dateTime51.isLessThanOrEqual(dateTime73);
        net.ajaskey.common.DateTime dateTime79 = dateTime51.parse("", "100.00");
        dateTime51.add((int) (short) 0, (int) (short) -1);
        double double83 = dateTime47.getDeltaYears(dateTime51);
        net.ajaskey.common.DateTime dateTime85 = new net.ajaskey.common.DateTime(100L);
        java.util.Calendar calendar86 = dateTime85.getCal();
        dateTime51.set(calendar86);
        long long88 = dateTime37.getDeltaMilliSeconds(dateTime51);
        java.lang.String str89 = dateTime51.format();
        java.lang.String str90 = dateTime51.getDay();
        dateTime51.setFirstWorkDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 719795L + "'", long24 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1870) + "'", int32 == (-1870));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1972.041095890411d) + "'", double68 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "31-Dec-1969" + "'", str75, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNull(dateTime79);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(calendar86);
        org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 100L + "'", long88 == 100L);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "BAD-DATE-FORMAT" + "'", str89, "BAD-DATE-FORMAT");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Wednesday" + "'", str90, "Wednesday");
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1178");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(4, 53, 32);
        int int4 = dateTime3.getMs();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 235 + "'", int4 == 235);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1179");
        net.ajaskey.common.Utils.NL = "                                      1";
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1180");
        java.util.Map<java.lang.String, java.lang.Integer> strMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = net.ajaskey.common.Utils.findName(strMap0, (java.lang.Integer) (-1958));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1181");
        net.ajaskey.common.Utils.NL = "JanuaryBAD-DATE-FORMATBAD-DATE-FORMAT                                                                                               52.00BAD-DATE-FORMAThi!BAD-DATE-FORMAT";
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1182");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        int int7 = dateTime3.getHour();
        java.text.SimpleDateFormat simpleDateFormat9 = null;
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double13 = dateTime10.getDeltaYears(dateTime12);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean18 = dateTime12.isEqual(dateTime17);
        java.util.Calendar calendar19 = dateTime12.getCal();
        java.lang.String str20 = dateTime12.format();
        net.ajaskey.common.DateTime dateTime21 = null;
        long long22 = dateTime12.getDeltaDays(dateTime21);
        int int23 = dateTime12.getSecond();
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime(100L);
        double double30 = dateTime27.getDeltaYears(dateTime29);
        java.text.SimpleDateFormat simpleDateFormat32 = null;
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat32);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double36 = dateTime33.getDeltaYears(dateTime35);
        boolean boolean37 = dateTime33.isWeekday();
        boolean boolean38 = dateTime27.sameDate(dateTime33);
        int int39 = dateTime33.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime40 = dateTime12.copy(dateTime33);
        dateTime3.set(dateTime33);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat48 = null;
        java.text.SimpleDateFormat simpleDateFormat49 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime("January", simpleDateFormat48, simpleDateFormat49);
        java.text.SimpleDateFormat simpleDateFormat53 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime("January", simpleDateFormat53);
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime("", simpleDateFormat53);
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime("", simpleDateFormat49, simpleDateFormat53);
        dateTime45.setSdf(simpleDateFormat49);
        java.util.Calendar calendar58 = dateTime45.getCal();
        dateTime33.set(calendar58);
        java.lang.String str61 = dateTime33.format("       262");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "BAD-DATE-FORMAT" + "'", str20, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1972.041095890411d) + "'", double30 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(dateTime40);
        org.junit.Assert.assertNotNull(simpleDateFormat49);
        org.junit.Assert.assertNotNull(simpleDateFormat53);
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=-62190310555670,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=4,MILLISECOND=330,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "       262" + "'", str61, "       262");
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1183");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        int int12 = dateTime1.getMinute();
        int int13 = dateTime1.getMinute();
        java.util.Calendar calendar14 = null;
        dateTime1.set(calendar14);
        java.text.SimpleDateFormat simpleDateFormat17 = null;
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat17);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double21 = dateTime18.getDeltaYears(dateTime20);
        boolean boolean22 = dateTime20.isNull();
        java.text.SimpleDateFormat simpleDateFormat24 = null;
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat24);
        dateTime25.set((int) ' ', 0, 11);
        boolean boolean30 = dateTime20.isGreaterThanOrEqual(dateTime25);
        java.lang.String str31 = dateTime20.toString();
        java.text.SimpleDateFormat simpleDateFormat33 = null;
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime("Invalid fmt", simpleDateFormat33);
        boolean boolean35 = dateTime20.isGreaterThanOrEqual(dateTime34);
        dateTime1.set(dateTime20);
        int int37 = dateTime20.getSecond();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "31-Dec-1969" + "'", str31, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1184");
        net.ajaskey.common.Utils.TAB = "Invalid Time";
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1185");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        java.lang.String str3 = dateTime1.toString();
        int int4 = dateTime1.getDayOfYear();
        java.text.SimpleDateFormat simpleDateFormat6 = null;
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat6);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double10 = dateTime7.getDeltaYears(dateTime9);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean15 = dateTime9.isEqual(dateTime14);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime(100L);
        int int18 = dateTime17.getMs();
        boolean boolean19 = dateTime14.isGreaterThanOrEqual(dateTime17);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime(100L);
        dateTime21.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime(100L);
        double double32 = dateTime29.getDeltaYears(dateTime31);
        boolean boolean33 = dateTime31.isWeekday();
        java.util.Date date34 = dateTime31.getTime();
        dateTime21.set(dateTime31);
        boolean boolean36 = net.ajaskey.common.Utils.sameDate(dateTime14, dateTime21);
        dateTime14.add((int) '#', 6);
        boolean boolean40 = dateTime1.sameDate(dateTime14);
        java.text.SimpleDateFormat simpleDateFormat42 = null;
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat42);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double46 = dateTime43.getDeltaYears(dateTime45);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime(dateTime43);
        boolean boolean48 = dateTime14.sameDate(dateTime47);
        net.ajaskey.common.DateTime dateTime51 = dateTime47.parse("Thu 10-Apr-0002 10:42:58", "December");
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime(100L);
        int int54 = dateTime53.getMs();
        int int55 = dateTime53.getHour();
        java.text.SimpleDateFormat simpleDateFormat57 = null;
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat57);
        net.ajaskey.common.DateTime dateTime60 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double61 = dateTime58.getDeltaYears(dateTime60);
        boolean boolean62 = dateTime58.isWeekday();
        net.ajaskey.common.DateTime dateTime66 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long67 = dateTime58.getDeltaDays(dateTime66);
        net.ajaskey.common.DateTime dateTime68 = new net.ajaskey.common.DateTime(dateTime58);
        boolean boolean69 = dateTime53.isLessThanOrEqual(dateTime68);
        java.lang.String str70 = dateTime53.getMonth();
        long long71 = dateTime47.getDeltaMilliSeconds(dateTime53);
        int int72 = dateTime53.getHour();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "31-Dec-1969" + "'", str3, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 365 + "'", int4 == 365);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1972.041095890411d) + "'", double32 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "December" + "'", str70, "December");
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1593103444341L) + "'", long71 == (-1593103444341L));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1186");
        java.text.SimpleDateFormat simpleDateFormat2 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime("January", simpleDateFormat2);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime("", simpleDateFormat2);
        dateTime4.setFirstWorkDay();
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat11 = null;
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat11);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double15 = dateTime12.getDeltaYears(dateTime14);
        boolean boolean16 = dateTime9.isLessThan(dateTime14);
        java.lang.String str17 = dateTime14.toFullString();
        dateTime14.add(10, (int) (byte) -1);
        java.text.SimpleDateFormat simpleDateFormat22 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat24 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat25 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime("", simpleDateFormat24, simpleDateFormat25);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat22, simpleDateFormat25);
        boolean boolean28 = dateTime14.isGreaterThan(dateTime27);
        java.text.SimpleDateFormat simpleDateFormat30 = null;
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat30);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double34 = dateTime31.getDeltaYears(dateTime33);
        boolean boolean35 = dateTime31.isWeekday();
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long40 = dateTime31.getDeltaDays(dateTime39);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime(dateTime31);
        boolean boolean42 = dateTime27.sameDate(dateTime31);
        boolean boolean43 = dateTime4.isGreaterThan(dateTime31);
        java.lang.String str44 = dateTime31.toFullString();
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime(100L);
        int int47 = dateTime46.getMs();
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime(100L);
        double double54 = dateTime51.getDeltaYears(dateTime53);
        java.text.SimpleDateFormat simpleDateFormat55 = dateTime51.getSdf();
        boolean boolean56 = dateTime46.isLessThanOrEqual(dateTime51);
        boolean boolean57 = dateTime46.isWeekday();
        java.util.Calendar calendar58 = dateTime46.getCal();
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime(calendar58);
        net.ajaskey.common.DateTime dateTime62 = new net.ajaskey.common.DateTime("10-Apr-0002", "5.00");
        boolean boolean63 = dateTime59.isEqual(dateTime62);
        int int64 = dateTime31.getYears(dateTime62);
        net.ajaskey.common.DateTime dateTime68 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime(100L);
        long long71 = dateTime68.getDeltaDays(dateTime70);
        int int72 = dateTime68.getHour();
        dateTime68.add((int) (byte) 100, (int) (byte) 0);
        boolean boolean76 = dateTime31.isGreaterThan(dateTime68);
        net.ajaskey.common.DateTime dateTime79 = new net.ajaskey.common.DateTime("10-Apr-0002", "5.00");
        net.ajaskey.common.DateTime dateTime83 = new net.ajaskey.common.DateTime(12, 42, (int) (byte) 1);
        java.util.Calendar calendar84 = dateTime83.getCal();
        boolean boolean85 = net.ajaskey.common.Utils.sameDate(dateTime79, dateTime83);
        boolean boolean86 = dateTime31.isLessThanOrEqual(dateTime79);
        org.junit.Assert.assertNotNull(simpleDateFormat2);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str17, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertNotNull(simpleDateFormat22);
        org.junit.Assert.assertNotNull(simpleDateFormat24);
        org.junit.Assert.assertNotNull(simpleDateFormat25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Invalid Time" + "'", str44, "Invalid Time");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1972.041095890411d) + "'", double54 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-719795L) + "'", long71 == (-719795L));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(calendar84);
// flaky:         org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=-61678304155535,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=15,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=182,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=4,MILLISECOND=465,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1187");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("", true);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1188");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime(100L);
        int int3 = dateTime2.getMs();
        java.text.SimpleDateFormat simpleDateFormat4 = net.ajaskey.common.Utils.sdf;
        dateTime2.setSdf(simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat4);
        java.text.SimpleDateFormat simpleDateFormat8 = null;
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double12 = dateTime9.getDeltaYears(dateTime11);
        boolean boolean13 = dateTime11.isNull();
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat15);
        dateTime16.set((int) ' ', 0, 11);
        boolean boolean21 = dateTime11.isGreaterThanOrEqual(dateTime16);
        double double22 = dateTime6.getDeltaYears(dateTime11);
        java.text.SimpleDateFormat simpleDateFormat24 = null;
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat24);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double28 = dateTime25.getDeltaYears(dateTime27);
        boolean boolean29 = dateTime27.isNull();
        boolean boolean30 = dateTime11.isGreaterThan(dateTime27);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime(dateTime11);
        int int32 = dateTime31.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime(100L);
        int int35 = dateTime34.getMs();
        int int36 = dateTime34.getHour();
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat42 = null;
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat42);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double46 = dateTime43.getDeltaYears(dateTime45);
        boolean boolean47 = dateTime40.isLessThan(dateTime45);
        java.lang.String str48 = dateTime45.toFullString();
        dateTime45.add(10, (int) (byte) -1);
        java.text.SimpleDateFormat simpleDateFormat53 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat55 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat56 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime("", simpleDateFormat55, simpleDateFormat56);
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat53, simpleDateFormat56);
        boolean boolean59 = dateTime45.isGreaterThan(dateTime58);
        boolean boolean60 = dateTime34.isEqual(dateTime45);
        net.ajaskey.common.DateTime dateTime61 = null;
        net.ajaskey.common.DateTime dateTime62 = new net.ajaskey.common.DateTime(dateTime61);
        dateTime62.set(42, 10, 10);
        java.util.Date date67 = dateTime62.getTime();
        net.ajaskey.common.DateTime dateTime68 = dateTime34.copy(dateTime62);
        long long69 = dateTime31.getDeltaDays(dateTime34);
        dateTime31.setFirstWorkDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat4);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 31 + "'", int32 == 31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str48, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertNotNull(simpleDateFormat53);
        org.junit.Assert.assertNotNull(simpleDateFormat55);
        org.junit.Assert.assertNotNull(simpleDateFormat56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(date67);
// flaky:         org.junit.Assert.assertEquals(date67.toString(), "Sat Nov 10 10:44:04 MST 42");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1189");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        java.text.SimpleDateFormat simpleDateFormat13 = null;
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat13);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        boolean boolean18 = dateTime14.isWeekday();
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long23 = dateTime14.getDeltaDays(dateTime22);
        long long24 = dateTime1.getDeltaDays(dateTime22);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(100L);
        dateTime26.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean31 = dateTime26.isWeekday();
        int int32 = dateTime1.getYears(dateTime26);
        int int33 = dateTime1.getYear();
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime(100L);
        int int36 = dateTime35.getMs();
        java.lang.String str37 = dateTime35.toString();
        int int38 = dateTime35.getDayOfYear();
        java.text.SimpleDateFormat simpleDateFormat40 = null;
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat40);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double44 = dateTime41.getDeltaYears(dateTime43);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean49 = dateTime43.isEqual(dateTime48);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime(100L);
        int int52 = dateTime51.getMs();
        boolean boolean53 = dateTime48.isGreaterThanOrEqual(dateTime51);
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime(100L);
        dateTime55.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime(100L);
        double double66 = dateTime63.getDeltaYears(dateTime65);
        boolean boolean67 = dateTime65.isWeekday();
        java.util.Date date68 = dateTime65.getTime();
        dateTime55.set(dateTime65);
        boolean boolean70 = net.ajaskey.common.Utils.sameDate(dateTime48, dateTime55);
        dateTime48.add((int) '#', 6);
        boolean boolean74 = dateTime35.sameDate(dateTime48);
        net.ajaskey.common.DateTime dateTime75 = dateTime1.copy(dateTime35);
        int int76 = dateTime35.getDayOfMonth();
        java.lang.Class<?> wildcardClass77 = dateTime35.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 719795L + "'", long24 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1870) + "'", int32 == (-1870));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1969 + "'", int33 == 1969);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "31-Dec-1969" + "'", str37, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 365 + "'", int38 == 365);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1972.041095890411d) + "'", double66 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 31 + "'", int76 == 31);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1190");
        java.lang.String str2 = net.ajaskey.common.Utils.lfmt((-59011286399900L), 161);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                                                                              -59,011,286,399,900" + "'", str2, "                                                                                                                                              -59,011,286,399,900");
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1191");
        net.ajaskey.common.Utils.sleep(621);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1192");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime(100L);
        int int3 = dateTime2.getMs();
        java.text.SimpleDateFormat simpleDateFormat4 = net.ajaskey.common.Utils.sdf;
        dateTime2.setSdf(simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime((long) 53);
        boolean boolean9 = dateTime8.isWeekday();
        boolean boolean10 = dateTime6.sameDate(dateTime8);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime(100L);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        java.text.SimpleDateFormat simpleDateFormat21 = dateTime17.getSdf();
        boolean boolean22 = dateTime12.isLessThanOrEqual(dateTime17);
        java.text.SimpleDateFormat simpleDateFormat24 = null;
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat24);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double28 = dateTime25.getDeltaYears(dateTime27);
        boolean boolean29 = dateTime25.isWeekday();
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long34 = dateTime25.getDeltaDays(dateTime33);
        long long35 = dateTime12.getDeltaDays(dateTime33);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime(100L);
        dateTime37.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean42 = dateTime37.isWeekday();
        int int43 = dateTime12.getYears(dateTime37);
        java.text.SimpleDateFormat simpleDateFormat45 = null;
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat45);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double49 = dateTime46.getDeltaYears(dateTime48);
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean54 = dateTime48.isEqual(dateTime53);
        int int55 = dateTime48.getDayOfWeek();
        boolean boolean56 = dateTime37.isLessThan(dateTime48);
        boolean boolean57 = dateTime6.isLessThanOrEqual(dateTime37);
        java.lang.String str58 = dateTime6.getDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1972.041095890411d) + "'", double20 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 719795L + "'", long35 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1870) + "'", int43 == (-1870));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "UNKNOWN" + "'", str58, "UNKNOWN");
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1193");
        net.ajaskey.common.TextUtils.printline("Mon 06-Jan-0100 17:00:00");
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1194");
        net.ajaskey.common.Utils.sleep(248);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1195");
        java.text.SimpleDateFormat simpleDateFormat1 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat2 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime("", simpleDateFormat1, simpleDateFormat2);
        int int4 = dateTime3.getMinute();
        org.junit.Assert.assertNotNull(simpleDateFormat1);
        org.junit.Assert.assertNotNull(simpleDateFormat2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1196");
        net.ajaskey.common.Utils.sleep(28);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1197");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("2,020.00", false);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1198");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt(98, 42);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                        98" + "'", str2, "                                        98");
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1199");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("05-May-0005", false);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1200");
        java.lang.String str2 = net.ajaskey.common.Utils.fmt((double) (-733554L), 286);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                                                                                                                                                                                                                   -733,554.00" + "'", str2, "                                                                                                                                                                                                                                                                                   -733,554.00");
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1201");
        net.ajaskey.common.TextUtils.printline("-100");
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1202");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        java.util.Calendar calendar11 = dateTime4.getCal();
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(calendar11);
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime(calendar11);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(100L);
        int int16 = dateTime15.getMs();
        java.text.SimpleDateFormat simpleDateFormat17 = net.ajaskey.common.Utils.sdf;
        dateTime15.setSdf(simpleDateFormat17);
        long long19 = dateTime13.getDeltaDays(dateTime15);
        java.lang.Class<?> wildcardClass20 = dateTime15.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1203");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        int int7 = dateTime3.getHour();
        dateTime3.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat12 = null;
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat12);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean21 = dateTime15.isEqual(dateTime20);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime(100L);
        int int24 = dateTime23.getMs();
        boolean boolean25 = dateTime20.isGreaterThanOrEqual(dateTime23);
        java.text.SimpleDateFormat simpleDateFormat27 = null;
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat27);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double31 = dateTime28.getDeltaYears(dateTime30);
        boolean boolean32 = dateTime28.isWeekday();
        boolean boolean33 = dateTime23.isLessThanOrEqual(dateTime28);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime(100L);
        dateTime35.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean40 = dateTime35.isWeekday();
        boolean boolean41 = dateTime23.isGreaterThanOrEqual(dateTime35);
        boolean boolean42 = dateTime3.sameDate(dateTime35);
        java.lang.String str44 = dateTime35.format("December");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "BAD-DATE-FORMAT" + "'", str44, "BAD-DATE-FORMAT");
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1204");
        net.ajaskey.common.Utils.NL = "     35";
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1205");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("62,190,310,608,217", true);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1206");
        net.ajaskey.common.Utils.NL = "Thu 10-Apr-0002 10:43:06";
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1207");
        java.util.Map<java.lang.String, java.lang.Integer> strMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = net.ajaskey.common.Utils.findName(strMap0, (java.lang.Integer) 515);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1208");
        net.ajaskey.common.Utils.makeDir("                                         47");
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1209");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("December", "   8.00");
        int int3 = dateTime2.getDayOfWeek();
        dateTime2.set(5, 18, 191);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1210");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("Monday", "              26");
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1211");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("                                        33", true);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1212");
        java.util.zip.ZipOutputStream zipOutputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.Utils.writeToZipFile("                                 477", zipOutputStream1);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:                                  477 (The system cannot find the file specified)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1213");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) 3);
        int int2 = dateTime1.getMs();
        java.text.SimpleDateFormat simpleDateFormat4 = null;
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double8 = dateTime5.getDeltaYears(dateTime7);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean13 = dateTime7.isEqual(dateTime12);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(100L);
        int int16 = dateTime15.getMs();
        boolean boolean17 = dateTime12.isGreaterThanOrEqual(dateTime15);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime(100L);
        dateTime19.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime(100L);
        double double30 = dateTime27.getDeltaYears(dateTime29);
        boolean boolean31 = dateTime29.isWeekday();
        java.util.Date date32 = dateTime29.getTime();
        dateTime19.set(dateTime29);
        boolean boolean34 = net.ajaskey.common.Utils.sameDate(dateTime12, dateTime19);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime(100L);
        double double41 = dateTime38.getDeltaYears(dateTime40);
        int int42 = dateTime38.getHour();
        java.text.SimpleDateFormat simpleDateFormat44 = null;
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat44);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double48 = dateTime45.getDeltaYears(dateTime47);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean53 = dateTime47.isEqual(dateTime52);
        java.util.Calendar calendar54 = dateTime47.getCal();
        java.lang.String str55 = dateTime47.format();
        net.ajaskey.common.DateTime dateTime56 = null;
        long long57 = dateTime47.getDeltaDays(dateTime56);
        int int58 = dateTime47.getSecond();
        net.ajaskey.common.DateTime dateTime62 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime(100L);
        double double65 = dateTime62.getDeltaYears(dateTime64);
        java.text.SimpleDateFormat simpleDateFormat67 = null;
        net.ajaskey.common.DateTime dateTime68 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat67);
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double71 = dateTime68.getDeltaYears(dateTime70);
        boolean boolean72 = dateTime68.isWeekday();
        boolean boolean73 = dateTime62.sameDate(dateTime68);
        int int74 = dateTime68.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime75 = dateTime47.copy(dateTime68);
        dateTime38.set(dateTime68);
        net.ajaskey.common.DateTime dateTime78 = dateTime38.parse("Thursday");
        double double79 = dateTime19.getDeltaYears(dateTime38);
        dateTime1.set(dateTime38);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1972.041095890411d) + "'", double30 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1972.041095890411d) + "'", double41 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "BAD-DATE-FORMAT" + "'", str55, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-1972.041095890411d) + "'", double65 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNull(dateTime75);
        org.junit.Assert.assertNull(dateTime78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1972.041095890411d + "'", double79 == 1972.041095890411d);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1214");
        java.util.zip.ZipOutputStream zipOutputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.Utils.writeToZipFilezipOutputStream1);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; messagehe filename, directory name, or volume label syntax is incorrect)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1215");
        java.lang.String str2 = net.ajaskey.common.Utils.lfmt(719795L, 314);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                                                                                                                                                                                                                                                   719,795" + "'", str2, "                                                                                                                                                                                                                                                                                                                   719,795");
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1216");
        net.ajaskey.common.Utils.sleep(191);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1217");
        java.lang.String[] strArray4 = new java.lang.String[] { "January", "", "                                                                                               52.00", "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        net.ajaskey.common.TextUtils.print((java.util.List<java.lang.String>) strList5);
        java.lang.String str8 = net.ajaskey.common.TextUtils.toString((java.util.List<java.lang.String>) strList5);
        net.ajaskey.common.TextUtils.print((java.util.List<java.lang.String>) strList5);
        net.ajaskey.common.TextUtils.print((java.util.List<java.lang.String>) strList5);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JanuaryThu 10-Apr-0002 10:43:06Thu 10-Apr-0002 10:43:06                                                                                               52.00Thu 10-Apr-0002 10:43:06hi!Thu 10-Apr-0002 10:43:06" + "'", str8, "JanuaryThu 10-Apr-0002 10:43:06Thu 10-Apr-0002 10:43:06                                                                                               52.00Thu 10-Apr-0002 10:43:06hi!Thu 10-Apr-0002 10:43:06");
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1218");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("5.00", "     10");
        int int3 = dateTime2.getDayOfWeek();
        int int4 = dateTime2.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(11, (int) (short) 1, 365);
        boolean boolean9 = net.ajaskey.common.Utils.sameMonth(dateTime2, dateTime8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime(100L);
        int int12 = dateTime11.getMs();
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime(100L);
        double double19 = dateTime16.getDeltaYears(dateTime18);
        java.text.SimpleDateFormat simpleDateFormat20 = dateTime16.getSdf();
        boolean boolean21 = dateTime11.isLessThanOrEqual(dateTime16);
        boolean boolean22 = dateTime11.isWeekday();
        java.util.Calendar calendar23 = dateTime11.getCal();
        java.text.SimpleDateFormat simpleDateFormat25 = null;
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat25);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double29 = dateTime26.getDeltaYears(dateTime28);
        boolean boolean30 = dateTime26.isWeekday();
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long35 = dateTime26.getDeltaDays(dateTime34);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime(dateTime26);
        dateTime36.setFirstWorkDay();
        long long38 = dateTime11.getDeltaDays(dateTime36);
        boolean boolean39 = net.ajaskey.common.Utils.sameDate(dateTime8, dateTime11);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime(dateTime11);
        java.text.SimpleDateFormat simpleDateFormat41 = dateTime11.getSdf();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1972.041095890411d) + "'", double19 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-18438L) + "'", long38 == (-18438L));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(simpleDateFormat41);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1219");
        java.text.SimpleDateFormat simpleDateFormat2 = null;
        java.text.SimpleDateFormat simpleDateFormat3 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime("January", simpleDateFormat2, simpleDateFormat3);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime("100.00", simpleDateFormat2);
        java.text.SimpleDateFormat simpleDateFormat7 = null;
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat7);
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double11 = dateTime8.getDeltaYears(dateTime10);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean16 = dateTime10.isEqual(dateTime15);
        long long17 = dateTime5.getDeltaDays(dateTime15);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime(dateTime5);
        int int19 = dateTime5.getDayOfYear();
        java.text.SimpleDateFormat simpleDateFormat21 = null;
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat21);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double25 = dateTime22.getDeltaYears(dateTime24);
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean30 = dateTime24.isEqual(dateTime29);
        java.lang.String str31 = dateTime29.getMonth();
        java.text.SimpleDateFormat simpleDateFormat36 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat37 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime("", simpleDateFormat36, simpleDateFormat37);
        java.text.SimpleDateFormat simpleDateFormat40 = null;
        java.text.SimpleDateFormat simpleDateFormat41 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime("January", simpleDateFormat40, simpleDateFormat41);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat36, simpleDateFormat41);
        java.text.SimpleDateFormat simpleDateFormat46 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat47 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime("", simpleDateFormat46, simpleDateFormat47);
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime(100L);
        int int51 = dateTime50.getMs();
        java.text.SimpleDateFormat simpleDateFormat52 = net.ajaskey.common.Utils.sdf;
        dateTime50.setSdf(simpleDateFormat52);
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat47, simpleDateFormat52);
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime("                             100", simpleDateFormat41, simpleDateFormat47);
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime("Thu 10-Apr-0002 10:42:58", simpleDateFormat41);
        boolean boolean57 = dateTime29.isLessThan(dateTime56);
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime(100L);
        long long64 = dateTime61.getDeltaDays(dateTime63);
        int int65 = dateTime61.getHour();
        dateTime61.add((int) (byte) 100, (int) (byte) 0);
        int int69 = dateTime61.getDayOfYear();
        net.ajaskey.common.DateTime dateTime73 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime75 = new net.ajaskey.common.DateTime(100L);
        long long76 = dateTime73.getDeltaDays(dateTime75);
        int int77 = dateTime73.getHour();
        boolean boolean78 = dateTime61.isLessThan(dateTime73);
        boolean boolean79 = dateTime29.isLessThanOrEqual(dateTime73);
        int int80 = dateTime73.getDayOfWeek();
        double double81 = dateTime5.getDeltaYears(dateTime73);
        net.ajaskey.common.DateTime dateTime83 = dateTime73.parse("Sat 04-Jan-0100 17:00:00");
        org.junit.Assert.assertNotNull(simpleDateFormat3);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "April" + "'", str31, "April");
        org.junit.Assert.assertNotNull(simpleDateFormat36);
        org.junit.Assert.assertNotNull(simpleDateFormat37);
        org.junit.Assert.assertNotNull(simpleDateFormat41);
        org.junit.Assert.assertNotNull(simpleDateFormat46);
        org.junit.Assert.assertNotNull(simpleDateFormat47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-719795L) + "'", long64 == (-719795L));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-719795L) + "'", long76 == (-719795L));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNull(dateTime83);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1220");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("Thu 10-Apr-0002 10:43:09", simpleDateFormat1);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1221");
        java.util.zip.ZipOutputStream zipOutputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.Utils.writeToZipFile("Thu 10-Apr-0002 10:42:55", zipOutputStream1);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: Thu 10-Apr-0002 10:42:55 (The filename, directory name, or volume label syntax is incorrect)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1222");
        net.ajaskey.common.Utils.TAB = "                              -1";
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1223");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        int int12 = dateTime1.getMinute();
        int int13 = dateTime1.getMs();
        java.util.Calendar calendar14 = dateTime1.getCal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1224");
        net.ajaskey.common.Utils.sleep(18);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1225");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        java.text.SimpleDateFormat simpleDateFormat13 = null;
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat13);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        boolean boolean18 = dateTime14.isWeekday();
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long23 = dateTime14.getDeltaDays(dateTime22);
        long long24 = dateTime1.getDeltaDays(dateTime22);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(100L);
        dateTime26.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean31 = dateTime26.isWeekday();
        int int32 = dateTime1.getYears(dateTime26);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime(100L);
        double double39 = dateTime36.getDeltaYears(dateTime38);
        int int40 = dateTime36.getHour();
        java.text.SimpleDateFormat simpleDateFormat42 = null;
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat42);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double46 = dateTime43.getDeltaYears(dateTime45);
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean51 = dateTime45.isEqual(dateTime50);
        java.util.Calendar calendar52 = dateTime45.getCal();
        dateTime36.set(calendar52);
        dateTime1.set(calendar52);
        int int55 = dateTime1.getHour();
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime(dateTime1);
        int int57 = dateTime56.getYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 719795L + "'", long24 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1870) + "'", int32 == (-1870));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1972.041095890411d) + "'", double39 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1969 + "'", int57 == 1969);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1226");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(47, 33, 43);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1227");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean4 = dateTime3.isNull();
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime();
        boolean boolean6 = dateTime3.sameDate(dateTime5);
        java.text.SimpleDateFormat simpleDateFormat12 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat14 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat15 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("", simpleDateFormat14, simpleDateFormat15);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat12, simpleDateFormat15);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime("10-Apr-0002", simpleDateFormat15);
        java.text.SimpleDateFormat simpleDateFormat21 = null;
        java.text.SimpleDateFormat simpleDateFormat22 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime("January", simpleDateFormat21, simpleDateFormat22);
        java.text.SimpleDateFormat simpleDateFormat26 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime("January", simpleDateFormat26);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime("", simpleDateFormat26);
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime("", simpleDateFormat22, simpleDateFormat26);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime("January                                                                                               52.00                                                                                               52.00                                                                                               52.00                                                                                               52.00hi!                                                                                               52.00", simpleDateFormat15, simpleDateFormat26);
        java.text.SimpleDateFormat simpleDateFormat32 = null;
        java.text.SimpleDateFormat simpleDateFormat33 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime("January", simpleDateFormat32, simpleDateFormat33);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime("December", simpleDateFormat26, simpleDateFormat33);
        java.text.SimpleDateFormat simpleDateFormat38 = null;
        java.text.SimpleDateFormat simpleDateFormat39 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("January", simpleDateFormat38, simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("                                                 100", simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime("January     0     0                                                                                               52.00     0hi!     0", simpleDateFormat26, simpleDateFormat39);
        dateTime5.setSdf(simpleDateFormat26);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime(31, 108, 1969);
        boolean boolean48 = net.ajaskey.common.Utils.sameDate(dateTime5, dateTime47);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat12);
        org.junit.Assert.assertNotNull(simpleDateFormat14);
        org.junit.Assert.assertNotNull(simpleDateFormat15);
        org.junit.Assert.assertNotNull(simpleDateFormat22);
        org.junit.Assert.assertNotNull(simpleDateFormat26);
        org.junit.Assert.assertNotNull(simpleDateFormat33);
        org.junit.Assert.assertNotNull(simpleDateFormat39);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1228");
        net.ajaskey.common.Utils.NL = "Thu 10-Apr-0002 10:43:43";
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1229");
        net.ajaskey.common.DateTime dateTime0 = new net.ajaskey.common.DateTime();
        net.ajaskey.common.DateTime dateTime1 = null;
        boolean boolean2 = dateTime0.isGreaterThan(dateTime1);
        java.text.SimpleDateFormat simpleDateFormat4 = null;
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double8 = dateTime5.getDeltaYears(dateTime7);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean13 = dateTime7.isEqual(dateTime12);
        java.util.Calendar calendar14 = dateTime7.getCal();
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(calendar14);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(calendar14);
        boolean boolean17 = dateTime0.isLessThan(dateTime16);
        int int18 = dateTime16.getHour();
        int int19 = dateTime16.getDayOfYear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 365 + "'", int19 == 365);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1230");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((-59011286399900L));
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(100L);
        int int4 = dateTime3.getMs();
        boolean boolean5 = dateTime3.isNull();
        java.util.Calendar calendar6 = dateTime3.getCal();
        int int7 = dateTime1.getYears(dateTime3);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime(100L);
        int int10 = dateTime9.getMs();
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        java.text.SimpleDateFormat simpleDateFormat18 = dateTime14.getSdf();
        boolean boolean19 = dateTime9.isLessThanOrEqual(dateTime14);
        java.text.SimpleDateFormat simpleDateFormat21 = null;
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat21);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double25 = dateTime22.getDeltaYears(dateTime24);
        boolean boolean26 = dateTime22.isWeekday();
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long31 = dateTime22.getDeltaDays(dateTime30);
        long long32 = dateTime9.getDeltaDays(dateTime30);
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime(100L);
        dateTime34.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean39 = dateTime34.isWeekday();
        int int40 = dateTime9.getYears(dateTime34);
        int int41 = dateTime9.getYear();
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime(100L);
        int int44 = dateTime43.getMs();
        java.lang.String str45 = dateTime43.toString();
        int int46 = dateTime43.getDayOfYear();
        java.text.SimpleDateFormat simpleDateFormat48 = null;
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat48);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double52 = dateTime49.getDeltaYears(dateTime51);
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean57 = dateTime51.isEqual(dateTime56);
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime(100L);
        int int60 = dateTime59.getMs();
        boolean boolean61 = dateTime56.isGreaterThanOrEqual(dateTime59);
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime(100L);
        dateTime63.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime71 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime73 = new net.ajaskey.common.DateTime(100L);
        double double74 = dateTime71.getDeltaYears(dateTime73);
        boolean boolean75 = dateTime73.isWeekday();
        java.util.Date date76 = dateTime73.getTime();
        dateTime63.set(dateTime73);
        boolean boolean78 = net.ajaskey.common.Utils.sameDate(dateTime56, dateTime63);
        dateTime56.add((int) '#', 6);
        boolean boolean82 = dateTime43.sameDate(dateTime56);
        net.ajaskey.common.DateTime dateTime83 = dateTime9.copy(dateTime43);
        int int84 = dateTime43.getYear();
        int int85 = dateTime43.getHour();
        boolean boolean86 = dateTime1.isGreaterThan(dateTime43);
        java.lang.String str87 = dateTime43.toFullString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1869 + "'", int7 == 1869);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1972.041095890411d) + "'", double17 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 719795L + "'", long32 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1870) + "'", int40 == (-1870));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1969 + "'", int41 == 1969);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "31-Dec-1969" + "'", str45, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 365 + "'", int46 == 365);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-1972.041095890411d) + "'", double74 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1969 + "'", int84 == 1969);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 5 + "'", int85 == 5);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str87, "Wed 31-Dec-1969 17:00:00");
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1231");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("Thu 10-Apr-0002 10:44:05", false);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1232");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        boolean boolean14 = dateTime9.isGreaterThanOrEqual(dateTime12);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        int int17 = dateTime16.getMs();
        int int18 = dateTime16.getHour();
        java.text.SimpleDateFormat simpleDateFormat20 = null;
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat20);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double24 = dateTime21.getDeltaYears(dateTime23);
        boolean boolean25 = dateTime21.isWeekday();
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long30 = dateTime21.getDeltaDays(dateTime29);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime(dateTime21);
        boolean boolean32 = dateTime16.isLessThanOrEqual(dateTime31);
        boolean boolean33 = net.ajaskey.common.Utils.sameDate(dateTime12, dateTime31);
        int int34 = dateTime31.getSecond();
        int int35 = dateTime31.getDayOfWeek();
        int int36 = dateTime31.getMs();
        int int37 = dateTime31.getMs();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 215 + "'", int36 == 215);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 215 + "'", int37 == 215);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1233");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) '#', (-1968), 477);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1234");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt((int) '#', (int) (byte) 100);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                                  35" + "'", str2, "                                                                                                  35");
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1235");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean4 = dateTime3.isNull();
        java.lang.String str5 = dateTime3.getDay();
        java.lang.String str7 = dateTime3.format("62,190,310,601,217");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Thursday" + "'", str5, "Thursday");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "62,190,310,601,217" + "'", str7, "62,190,310,601,217");
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1236");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        java.text.SimpleDateFormat simpleDateFormat3 = net.ajaskey.common.Utils.sdf;
        dateTime1.setSdf(simpleDateFormat3);
        java.text.SimpleDateFormat simpleDateFormat5 = net.ajaskey.common.Utils.sdfFull;
        dateTime1.setSdf(simpleDateFormat5);
        int int7 = dateTime1.getDayOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat3);
        org.junit.Assert.assertNotNull(simpleDateFormat5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 365 + "'", int7 == 365);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1237");
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("      42", "Thu 10-Apr-0002 10:44:04");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'T'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1238");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        int int7 = dateTime3.getHour();
        java.text.SimpleDateFormat simpleDateFormat9 = null;
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double13 = dateTime10.getDeltaYears(dateTime12);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean18 = dateTime12.isEqual(dateTime17);
        java.util.Calendar calendar19 = dateTime12.getCal();
        java.lang.String str20 = dateTime12.format();
        net.ajaskey.common.DateTime dateTime21 = null;
        long long22 = dateTime12.getDeltaDays(dateTime21);
        int int23 = dateTime12.getSecond();
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime(100L);
        double double30 = dateTime27.getDeltaYears(dateTime29);
        java.text.SimpleDateFormat simpleDateFormat32 = null;
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat32);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double36 = dateTime33.getDeltaYears(dateTime35);
        boolean boolean37 = dateTime33.isWeekday();
        boolean boolean38 = dateTime27.sameDate(dateTime33);
        int int39 = dateTime33.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime40 = dateTime12.copy(dateTime33);
        dateTime3.set(dateTime33);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat48 = null;
        java.text.SimpleDateFormat simpleDateFormat49 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime("January", simpleDateFormat48, simpleDateFormat49);
        java.text.SimpleDateFormat simpleDateFormat53 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime("January", simpleDateFormat53);
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime("", simpleDateFormat53);
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime("", simpleDateFormat49, simpleDateFormat53);
        dateTime45.setSdf(simpleDateFormat49);
        java.util.Calendar calendar58 = dateTime45.getCal();
        dateTime33.set(calendar58);
        int int60 = dateTime33.getYear();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "BAD-DATE-FORMAT" + "'", str20, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1972.041095890411d) + "'", double30 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(dateTime40);
        org.junit.Assert.assertNotNull(simpleDateFormat49);
        org.junit.Assert.assertNotNull(simpleDateFormat53);
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=-62190310552453,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=7,MILLISECOND=547,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1239");
        java.util.zip.ZipOutputStream zipOutputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.Utils.writeToZipFile("                              54.00", zipOutputStream1);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:                               54.00 (The system cannot find the file specified)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1240");
        net.ajaskey.common.Utils.sleep(1969);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1241");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readTextFile("                          -1,928.42", false);
        java.lang.String str3 = net.ajaskey.common.TextUtils.toString(strList2);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1242");
        java.lang.String str2 = net.ajaskey.common.Utils.lfmt((long) 3, (int) (byte) 1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "3" + "'", str2, "3");
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1243");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt(252, 48);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                             252" + "'", str2, "                                             252");
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1244");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        java.text.SimpleDateFormat simpleDateFormat8 = null;
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double12 = dateTime9.getDeltaYears(dateTime11);
        boolean boolean13 = dateTime9.isWeekday();
        boolean boolean14 = dateTime3.sameDate(dateTime9);
        int int15 = dateTime9.getMs();
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime(100L);
        int int18 = dateTime17.getMs();
        java.lang.String str19 = dateTime17.toString();
        int int20 = dateTime17.getDayOfYear();
        java.text.SimpleDateFormat simpleDateFormat22 = null;
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat22);
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double26 = dateTime23.getDeltaYears(dateTime25);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean31 = dateTime25.isEqual(dateTime30);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime(100L);
        int int34 = dateTime33.getMs();
        boolean boolean35 = dateTime30.isGreaterThanOrEqual(dateTime33);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime(100L);
        dateTime37.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime(100L);
        double double48 = dateTime45.getDeltaYears(dateTime47);
        boolean boolean49 = dateTime47.isWeekday();
        java.util.Date date50 = dateTime47.getTime();
        dateTime37.set(dateTime47);
        boolean boolean52 = net.ajaskey.common.Utils.sameDate(dateTime30, dateTime37);
        dateTime30.add((int) '#', 6);
        boolean boolean56 = dateTime17.sameDate(dateTime30);
        java.text.SimpleDateFormat simpleDateFormat58 = null;
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat58);
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double62 = dateTime59.getDeltaYears(dateTime61);
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime(dateTime59);
        boolean boolean64 = dateTime30.sameDate(dateTime63);
        net.ajaskey.common.DateTime dateTime68 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime(100L);
        double double71 = dateTime68.getDeltaYears(dateTime70);
        java.text.SimpleDateFormat simpleDateFormat73 = null;
        net.ajaskey.common.DateTime dateTime74 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat73);
        net.ajaskey.common.DateTime dateTime76 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double77 = dateTime74.getDeltaYears(dateTime76);
        boolean boolean78 = dateTime74.isWeekday();
        boolean boolean79 = dateTime68.sameDate(dateTime74);
        int int80 = dateTime68.getSecond();
        boolean boolean81 = net.ajaskey.common.Utils.sameDate(dateTime63, dateTime68);
        boolean boolean82 = net.ajaskey.common.Utils.sameDate(dateTime9, dateTime63);
        boolean boolean83 = dateTime9.isWeekday();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "31-Dec-1969" + "'", str19, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 365 + "'", int20 == 365);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1972.041095890411d) + "'", double48 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1972.041095890411d) + "'", double71 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1245");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime(dateTime2);
        net.ajaskey.common.DateTime dateTime9 = dateTime6.parse("      32", "        10");
        int int10 = dateTime6.getYear();
        net.ajaskey.common.DateTime dateTime12 = dateTime6.parse("");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNull(dateTime12);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1246");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) (short) 0);
        int int2 = dateTime1.getHour();
        boolean boolean3 = dateTime1.isNull();
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime(dateTime1);
        java.text.SimpleDateFormat simpleDateFormat5 = dateTime1.getSdf();
        int int6 = dateTime1.getYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(simpleDateFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1969 + "'", int6 == 1969);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1247");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        boolean boolean18 = dateTime16.isWeekday();
        int int19 = dateTime16.getDayOfYear();
        net.ajaskey.common.DateTime dateTime20 = dateTime4.copy(dateTime16);
        net.ajaskey.common.DateTime dateTime22 = dateTime4.parse("Invalid Time");
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime(100L);
        double double31 = dateTime28.getDeltaYears(dateTime30);
        int int32 = dateTime28.getHour();
        dateTime28.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat37 = null;
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat37);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double41 = dateTime38.getDeltaYears(dateTime40);
        boolean boolean42 = dateTime28.isEqual(dateTime40);
        java.text.SimpleDateFormat simpleDateFormat44 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat46 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat47 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime("", simpleDateFormat46, simpleDateFormat47);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat44, simpleDateFormat47);
        dateTime28.setSdf(simpleDateFormat44);
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat57 = null;
        java.text.SimpleDateFormat simpleDateFormat58 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime("January", simpleDateFormat57, simpleDateFormat58);
        java.text.SimpleDateFormat simpleDateFormat62 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime("January", simpleDateFormat62);
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime("", simpleDateFormat62);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime("", simpleDateFormat58, simpleDateFormat62);
        dateTime54.setSdf(simpleDateFormat58);
        net.ajaskey.common.DateTime dateTime67 = new net.ajaskey.common.DateTime("December", simpleDateFormat44, simpleDateFormat58);
        java.text.SimpleDateFormat simpleDateFormat71 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat72 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime73 = new net.ajaskey.common.DateTime("", simpleDateFormat71, simpleDateFormat72);
        java.text.SimpleDateFormat simpleDateFormat75 = null;
        java.text.SimpleDateFormat simpleDateFormat76 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime77 = new net.ajaskey.common.DateTime("January", simpleDateFormat75, simpleDateFormat76);
        net.ajaskey.common.DateTime dateTime78 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat71, simpleDateFormat76);
        java.text.SimpleDateFormat simpleDateFormat81 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat82 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime83 = new net.ajaskey.common.DateTime("", simpleDateFormat81, simpleDateFormat82);
        net.ajaskey.common.DateTime dateTime85 = new net.ajaskey.common.DateTime(100L);
        int int86 = dateTime85.getMs();
        java.text.SimpleDateFormat simpleDateFormat87 = net.ajaskey.common.Utils.sdf;
        dateTime85.setSdf(simpleDateFormat87);
        net.ajaskey.common.DateTime dateTime89 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat82, simpleDateFormat87);
        net.ajaskey.common.DateTime dateTime90 = new net.ajaskey.common.DateTime("                             100", simpleDateFormat76, simpleDateFormat82);
        net.ajaskey.common.DateTime dateTime91 = new net.ajaskey.common.DateTime("    25", simpleDateFormat58, simpleDateFormat76);
        dateTime4.setSdf(simpleDateFormat76);
        int int93 = dateTime4.getDayOfYear();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1972.041095890411d) + "'", double17 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 365 + "'", int19 == 365);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNull(dateTime22);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1972.041095890411d) + "'", double31 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat44);
        org.junit.Assert.assertNotNull(simpleDateFormat46);
        org.junit.Assert.assertNotNull(simpleDateFormat47);
        org.junit.Assert.assertNotNull(simpleDateFormat58);
        org.junit.Assert.assertNotNull(simpleDateFormat62);
        org.junit.Assert.assertNotNull(simpleDateFormat71);
        org.junit.Assert.assertNotNull(simpleDateFormat72);
        org.junit.Assert.assertNotNull(simpleDateFormat76);
        org.junit.Assert.assertNotNull(simpleDateFormat81);
        org.junit.Assert.assertNotNull(simpleDateFormat82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 100 + "'", int86 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat87);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 365 + "'", int93 == 365);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1248");
        net.ajaskey.common.Utils.NL = "                                                                                                                                                                                                                                                                                   -733,554.00";
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1249");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        boolean boolean6 = dateTime4.isNull();
        java.lang.String str7 = dateTime4.format();
        dateTime4.setFirstWorkDay();
        java.text.SimpleDateFormat simpleDateFormat12 = null;
        java.text.SimpleDateFormat simpleDateFormat13 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("January", simpleDateFormat12, simpleDateFormat13);
        java.text.SimpleDateFormat simpleDateFormat17 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime("January", simpleDateFormat17);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime("", simpleDateFormat17);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime("", simpleDateFormat13, simpleDateFormat17);
        java.text.SimpleDateFormat simpleDateFormat23 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat25 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat26 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime("", simpleDateFormat25, simpleDateFormat26);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat23, simpleDateFormat26);
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat35 = null;
        java.text.SimpleDateFormat simpleDateFormat36 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime("January", simpleDateFormat35, simpleDateFormat36);
        java.text.SimpleDateFormat simpleDateFormat40 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("January", simpleDateFormat40);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime("", simpleDateFormat40);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime("", simpleDateFormat36, simpleDateFormat40);
        dateTime32.setSdf(simpleDateFormat36);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime("", simpleDateFormat26, simpleDateFormat36);
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime("   -18,438", simpleDateFormat17, simpleDateFormat36);
        dateTime4.setSdf(simpleDateFormat17);
        int int48 = dateTime4.getDayOfYear();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "BAD-DATE-FORMAT" + "'", str7, "BAD-DATE-FORMAT");
        org.junit.Assert.assertNotNull(simpleDateFormat13);
        org.junit.Assert.assertNotNull(simpleDateFormat17);
        org.junit.Assert.assertNotNull(simpleDateFormat23);
        org.junit.Assert.assertNotNull(simpleDateFormat25);
        org.junit.Assert.assertNotNull(simpleDateFormat26);
        org.junit.Assert.assertNotNull(simpleDateFormat36);
        org.junit.Assert.assertNotNull(simpleDateFormat40);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 365 + "'", int48 == 365);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1250");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime(100L);
        double double8 = dateTime5.getDeltaYears(dateTime7);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime(100L);
        double double15 = dateTime12.getDeltaYears(dateTime14);
        int int16 = dateTime12.getHour();
        int int17 = dateTime12.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime(100L);
        double double24 = dateTime21.getDeltaYears(dateTime23);
        boolean boolean25 = dateTime23.isWeekday();
        boolean boolean26 = net.ajaskey.common.Utils.sameDate(dateTime12, dateTime23);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime(100L);
        dateTime28.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime(100L);
        double double39 = dateTime36.getDeltaYears(dateTime38);
        boolean boolean40 = dateTime38.isWeekday();
        java.util.Date date41 = dateTime38.getTime();
        dateTime28.set(dateTime38);
        int int43 = dateTime28.getYear();
        boolean boolean44 = dateTime23.isGreaterThanOrEqual(dateTime28);
        boolean boolean45 = dateTime5.sameDate(dateTime23);
        net.ajaskey.common.DateTime dateTime46 = dateTime1.copy(dateTime5);
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime(100L);
        long long53 = dateTime50.getDeltaDays(dateTime52);
        int int54 = dateTime50.getHour();
        dateTime50.add((int) (byte) 100, (int) (byte) 0);
        net.ajaskey.common.DateTime dateTime59 = dateTime50.parse("10-Apr-0002");
        int int60 = dateTime50.getDayOfMonth();
        boolean boolean61 = dateTime5.isLessThan(dateTime50);
        java.lang.String str62 = dateTime5.getMonth();
        int int63 = dateTime5.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1972.041095890411d) + "'", double8 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1972.041095890411d) + "'", double15 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1972.041095890411d) + "'", double24 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1972.041095890411d) + "'", double39 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1969 + "'", int43 == 1969);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-719795L) + "'", long53 == (-719795L));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "April" + "'", str62, "April");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1251");
        net.ajaskey.common.Utils.sleep(215);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1252");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("5.00", "     10");
        dateTime2.add((int) (short) 0, (int) 'a');
        int int6 = dateTime2.getDayOfMonth();
        java.lang.String str7 = dateTime2.toString();
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime(100L);
        double double14 = dateTime11.getDeltaYears(dateTime13);
        int int15 = dateTime11.getHour();
        java.text.SimpleDateFormat simpleDateFormat17 = null;
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat17);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double21 = dateTime18.getDeltaYears(dateTime20);
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean26 = dateTime20.isEqual(dateTime25);
        java.util.Calendar calendar27 = dateTime20.getCal();
        java.lang.String str28 = dateTime20.format();
        net.ajaskey.common.DateTime dateTime29 = null;
        long long30 = dateTime20.getDeltaDays(dateTime29);
        int int31 = dateTime20.getSecond();
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime(100L);
        double double38 = dateTime35.getDeltaYears(dateTime37);
        java.text.SimpleDateFormat simpleDateFormat40 = null;
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat40);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double44 = dateTime41.getDeltaYears(dateTime43);
        boolean boolean45 = dateTime41.isWeekday();
        boolean boolean46 = dateTime35.sameDate(dateTime41);
        int int47 = dateTime41.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime48 = dateTime20.copy(dateTime41);
        dateTime11.set(dateTime41);
        boolean boolean50 = dateTime2.isGreaterThan(dateTime41);
        java.text.SimpleDateFormat simpleDateFormat53 = null;
        java.text.SimpleDateFormat simpleDateFormat54 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime("January", simpleDateFormat53, simpleDateFormat54);
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime("100.00", simpleDateFormat53);
        net.ajaskey.common.DateTime dateTime57 = dateTime41.copy(dateTime56);
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime(100L);
        double double64 = dateTime61.getDeltaYears(dateTime63);
        boolean boolean65 = dateTime63.isWeekday();
        java.util.Date date66 = dateTime63.getTime();
        java.text.SimpleDateFormat simpleDateFormat68 = null;
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat68);
        dateTime69.set((int) ' ', 0, 11);
        boolean boolean74 = dateTime69.isWeekday();
        net.ajaskey.common.DateTime dateTime76 = new net.ajaskey.common.DateTime(100L);
        dateTime76.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime84 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime86 = new net.ajaskey.common.DateTime(100L);
        double double87 = dateTime84.getDeltaYears(dateTime86);
        boolean boolean88 = dateTime86.isWeekday();
        java.util.Date date89 = dateTime86.getTime();
        dateTime76.set(dateTime86);
        boolean boolean91 = dateTime69.isEqual(dateTime86);
        boolean boolean92 = dateTime63.isLessThanOrEqual(dateTime86);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = dateTime57.isLessThan(dateTime63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1972.041095890411d) + "'", double14 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "BAD-DATE-FORMAT" + "'", str28, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1972.041095890411d) + "'", double38 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat54);
        org.junit.Assert.assertNull(dateTime57);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1972.041095890411d) + "'", double64 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-1972.041095890411d) + "'", double87 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1253");
        net.ajaskey.common.DateTime dateTime0 = null;
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(dateTime0);
        java.lang.String str3 = dateTime1.format("     5.00");
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime(100L);
        int int7 = dateTime6.getMs();
        java.text.SimpleDateFormat simpleDateFormat8 = net.ajaskey.common.Utils.sdf;
        dateTime6.setSdf(simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((long) 53);
        boolean boolean13 = dateTime12.isWeekday();
        boolean boolean14 = dateTime10.sameDate(dateTime12);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        int int17 = dateTime16.getMs();
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime(100L);
        double double24 = dateTime21.getDeltaYears(dateTime23);
        java.text.SimpleDateFormat simpleDateFormat25 = dateTime21.getSdf();
        boolean boolean26 = dateTime16.isLessThanOrEqual(dateTime21);
        java.text.SimpleDateFormat simpleDateFormat28 = null;
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat28);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double32 = dateTime29.getDeltaYears(dateTime31);
        boolean boolean33 = dateTime29.isWeekday();
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long38 = dateTime29.getDeltaDays(dateTime37);
        long long39 = dateTime16.getDeltaDays(dateTime37);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime(100L);
        dateTime41.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean46 = dateTime41.isWeekday();
        int int47 = dateTime16.getYears(dateTime41);
        java.text.SimpleDateFormat simpleDateFormat49 = null;
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat49);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double53 = dateTime50.getDeltaYears(dateTime52);
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean58 = dateTime52.isEqual(dateTime57);
        int int59 = dateTime52.getDayOfWeek();
        boolean boolean60 = dateTime41.isLessThan(dateTime52);
        boolean boolean61 = dateTime10.isLessThanOrEqual(dateTime41);
        long long62 = dateTime1.getDeltaDays(dateTime41);
        net.ajaskey.common.DateTime dateTime66 = new net.ajaskey.common.DateTime((int) 'a', 1869, (int) (byte) 0);
        int int67 = dateTime66.getYear();
        int int68 = dateTime41.getYears(dateTime66);
        java.lang.String str69 = dateTime41.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "     5.00" + "'", str3, "     5.00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1972.041095890411d) + "'", double24 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 719795L + "'", long39 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1870) + "'", int47 == (-1870));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 701439L + "'", long62 == 701439L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 252 + "'", int67 == 252);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 152 + "'", int68 == 152);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "04-Jan-0100" + "'", str69, "04-Jan-0100");
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1254");
        net.ajaskey.common.Utils.TAB = "30-Sep-0252";
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1255");
        java.util.Date date0 = null;
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(date0);
        net.ajaskey.common.DateTime dateTime3 = dateTime1.parse("Thu 10-Apr-0002 10:42:58");
        int int4 = dateTime1.getMinute();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean9 = dateTime8.isNull();
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime();
        boolean boolean11 = dateTime8.sameDate(dateTime10);
        net.ajaskey.common.DateTime dateTime13 = dateTime10.parse("Thu 10-Apr-0002 10:43:12");
        long long14 = dateTime1.getDeltaMilliSeconds(dateTime10);
        net.ajaskey.common.DateTime dateTime17 = dateTime10.parse("                                    62,190,310,613,374", "");
        org.junit.Assert.assertNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 44 + "'", int4 == 44);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNull(dateTime17);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1256");
        net.ajaskey.common.TextUtils.printline("                                         47");
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1257");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        boolean boolean3 = dateTime1.isWeekday();
        int int4 = dateTime1.getHour();
        java.text.SimpleDateFormat simpleDateFormat6 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime("January", simpleDateFormat6);
        dateTime1.setSdf(simpleDateFormat6);
        java.text.SimpleDateFormat simpleDateFormat9 = dateTime1.getSdf();
        java.util.Calendar calendar10 = dateTime1.getCal();
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime(calendar10);
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime(100L);
        java.util.Calendar calendar14 = dateTime13.getCal();
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        boolean boolean21 = dateTime17.isWeekday();
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long26 = dateTime17.getDeltaDays(dateTime25);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime(dateTime17);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime(100L);
        double double34 = dateTime31.getDeltaYears(dateTime33);
        boolean boolean35 = dateTime33.isWeekday();
        java.util.Date date36 = dateTime33.getTime();
        dateTime17.set(date36);
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime(100L);
        int int40 = dateTime39.getMs();
        java.lang.String str41 = dateTime39.toString();
        boolean boolean42 = dateTime17.isLessThanOrEqual(dateTime39);
        net.ajaskey.common.DateTime dateTime45 = dateTime17.parse("", "100.00");
        dateTime17.add((int) (short) 0, (int) (short) -1);
        double double49 = dateTime13.getDeltaYears(dateTime17);
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat56 = null;
        java.text.SimpleDateFormat simpleDateFormat57 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime("January", simpleDateFormat56, simpleDateFormat57);
        java.text.SimpleDateFormat simpleDateFormat61 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime62 = new net.ajaskey.common.DateTime("January", simpleDateFormat61);
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime("", simpleDateFormat61);
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime("", simpleDateFormat57, simpleDateFormat61);
        dateTime53.setSdf(simpleDateFormat57);
        net.ajaskey.common.DateTime dateTime67 = new net.ajaskey.common.DateTime((long) (short) 0);
        net.ajaskey.common.DateTime dateTime71 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime73 = new net.ajaskey.common.DateTime(100L);
        double double74 = dateTime71.getDeltaYears(dateTime73);
        int int75 = dateTime71.getHour();
        net.ajaskey.common.DateTime dateTime76 = new net.ajaskey.common.DateTime();
        net.ajaskey.common.DateTime dateTime77 = null;
        boolean boolean78 = dateTime76.isGreaterThan(dateTime77);
        java.text.SimpleDateFormat simpleDateFormat80 = null;
        net.ajaskey.common.DateTime dateTime81 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat80);
        net.ajaskey.common.DateTime dateTime83 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double84 = dateTime81.getDeltaYears(dateTime83);
        net.ajaskey.common.DateTime dateTime88 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean89 = dateTime83.isEqual(dateTime88);
        java.util.Calendar calendar90 = dateTime83.getCal();
        net.ajaskey.common.DateTime dateTime91 = new net.ajaskey.common.DateTime(calendar90);
        net.ajaskey.common.DateTime dateTime92 = new net.ajaskey.common.DateTime(calendar90);
        boolean boolean93 = dateTime76.isLessThan(dateTime92);
        boolean boolean94 = dateTime71.isLessThan(dateTime76);
        boolean boolean95 = dateTime67.isGreaterThan(dateTime76);
        boolean boolean96 = dateTime53.isGreaterThanOrEqual(dateTime76);
        java.util.Date date97 = dateTime76.getTime();
        net.ajaskey.common.DateTime dateTime98 = dateTime13.copy(dateTime76);
        double double99 = dateTime11.getDeltaYears(dateTime98);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertNotNull(simpleDateFormat6);
        org.junit.Assert.assertNotNull(simpleDateFormat9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1972.041095890411d) + "'", double34 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "31-Dec-1969" + "'", str41, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(dateTime45);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(simpleDateFormat57);
        org.junit.Assert.assertNotNull(simpleDateFormat61);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-1972.041095890411d) + "'", double74 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(date97);
// flaky:         org.junit.Assert.assertEquals(date97.toString(), "Thu Jun 25 10:44:10 MDT 2020");
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + (-50.515068493150686d) + "'", double99 == (-50.515068493150686d));
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1258");
        java.util.Date date0 = null;
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(date0);
        net.ajaskey.common.DateTime dateTime3 = dateTime1.parse("Thu 10-Apr-0002 10:42:58");
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime(100L);
        double double10 = dateTime7.getDeltaYears(dateTime9);
        java.text.SimpleDateFormat simpleDateFormat12 = null;
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat12);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        boolean boolean17 = dateTime13.isWeekday();
        boolean boolean18 = dateTime7.sameDate(dateTime13);
        int int19 = dateTime13.getDayOfMonth();
        int int20 = dateTime13.getHour();
        java.text.SimpleDateFormat simpleDateFormat22 = null;
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat22);
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double26 = dateTime23.getDeltaYears(dateTime25);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean31 = dateTime25.isEqual(dateTime30);
        java.lang.String str32 = dateTime30.getDay();
        boolean boolean33 = dateTime30.isWeekday();
        java.lang.String str34 = dateTime30.getMonth();
        boolean boolean35 = dateTime13.isLessThanOrEqual(dateTime30);
        boolean boolean36 = net.ajaskey.common.Utils.sameMonth(dateTime1, dateTime30);
        org.junit.Assert.assertNull(dateTime3);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1972.041095890411d) + "'", double10 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Thursday" + "'", str32, "Thursday");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "April" + "'", str34, "April");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1259");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        boolean boolean14 = dateTime9.isGreaterThanOrEqual(dateTime12);
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        boolean boolean21 = dateTime17.isWeekday();
        boolean boolean22 = dateTime12.isLessThanOrEqual(dateTime17);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        dateTime24.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean29 = dateTime24.isWeekday();
        boolean boolean30 = dateTime12.isGreaterThanOrEqual(dateTime24);
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime(100L);
        double double37 = dateTime34.getDeltaYears(dateTime36);
        java.text.SimpleDateFormat simpleDateFormat39 = null;
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double43 = dateTime40.getDeltaYears(dateTime42);
        boolean boolean44 = dateTime40.isWeekday();
        boolean boolean45 = dateTime34.sameDate(dateTime40);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime(100L);
        double double52 = dateTime49.getDeltaYears(dateTime51);
        java.text.SimpleDateFormat simpleDateFormat54 = null;
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat54);
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double58 = dateTime55.getDeltaYears(dateTime57);
        boolean boolean59 = dateTime55.isWeekday();
        boolean boolean60 = dateTime49.sameDate(dateTime55);
        java.text.SimpleDateFormat simpleDateFormat62 = null;
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat62);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double66 = dateTime63.getDeltaYears(dateTime65);
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean71 = dateTime65.isEqual(dateTime70);
        dateTime49.set(dateTime70);
        long long73 = dateTime34.getDeltaMilliSeconds(dateTime70);
        net.ajaskey.common.DateTime dateTime77 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat79 = null;
        net.ajaskey.common.DateTime dateTime80 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat79);
        boolean boolean81 = net.ajaskey.common.Utils.sameDate(dateTime77, dateTime80);
        boolean boolean82 = net.ajaskey.common.Utils.sameDate(dateTime34, dateTime80);
        dateTime24.set(dateTime80);
        dateTime80.set((int) (short) 0, (int) (byte) 0, 9);
        int int88 = dateTime80.getMinute();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1972.041095890411d) + "'", double37 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1972.041095890411d) + "'", double52 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 44 + "'", int88 == 44);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1260");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        java.lang.String str3 = dateTime1.toString();
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        int int6 = dateTime5.getMs();
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        double double13 = dateTime10.getDeltaYears(dateTime12);
        java.text.SimpleDateFormat simpleDateFormat14 = dateTime10.getSdf();
        boolean boolean15 = dateTime5.isLessThanOrEqual(dateTime10);
        boolean boolean16 = dateTime5.isWeekday();
        java.util.Calendar calendar17 = dateTime5.getCal();
        dateTime1.set(calendar17);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime(calendar17);
        java.lang.Class<?> wildcardClass20 = calendar17.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "31-Dec-1969" + "'", str3, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1972.041095890411d) + "'", double13 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1261");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        boolean boolean7 = dateTime5.isWeekday();
        java.util.Date date8 = dateTime5.getTime();
        int int9 = dateTime5.getDayOfWeek();
        java.lang.String str10 = dateTime5.toFullString();
        net.ajaskey.common.DateTime dateTime13 = dateTime5.parse("    25", "                                                                                                   5");
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime(100L);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        java.text.SimpleDateFormat simpleDateFormat22 = null;
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat22);
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double26 = dateTime23.getDeltaYears(dateTime25);
        boolean boolean27 = dateTime23.isWeekday();
        boolean boolean28 = dateTime17.sameDate(dateTime23);
        boolean boolean29 = dateTime5.isLessThanOrEqual(dateTime17);
        java.lang.String str30 = dateTime5.getMonth();
        java.lang.String str31 = dateTime5.getMonth();
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime(100L);
        int int35 = dateTime34.getMs();
        java.text.SimpleDateFormat simpleDateFormat36 = net.ajaskey.common.Utils.sdf;
        dateTime34.setSdf(simpleDateFormat36);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat36);
        java.text.SimpleDateFormat simpleDateFormat40 = null;
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat40);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double44 = dateTime41.getDeltaYears(dateTime43);
        boolean boolean45 = dateTime43.isNull();
        java.text.SimpleDateFormat simpleDateFormat47 = null;
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat47);
        dateTime48.set((int) ' ', 0, 11);
        boolean boolean53 = dateTime43.isGreaterThanOrEqual(dateTime48);
        double double54 = dateTime38.getDeltaYears(dateTime43);
        java.text.SimpleDateFormat simpleDateFormat56 = null;
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat56);
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double60 = dateTime57.getDeltaYears(dateTime59);
        boolean boolean61 = dateTime59.isNull();
        boolean boolean62 = dateTime43.isGreaterThan(dateTime59);
        int int63 = dateTime59.getYear();
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime(100L);
        int int66 = dateTime65.getMs();
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime72 = new net.ajaskey.common.DateTime(100L);
        double double73 = dateTime70.getDeltaYears(dateTime72);
        java.text.SimpleDateFormat simpleDateFormat74 = dateTime70.getSdf();
        boolean boolean75 = dateTime65.isLessThanOrEqual(dateTime70);
        java.lang.String str76 = dateTime65.toString();
        int int77 = dateTime65.getHour();
        int int78 = dateTime65.getYear();
        boolean boolean79 = dateTime65.isNull();
        int int80 = dateTime65.getSecond();
        net.ajaskey.common.DateTime dateTime81 = dateTime59.copy(dateTime65);
        boolean boolean82 = dateTime5.isGreaterThanOrEqual(dateTime81);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str10, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertNull(dateTime13);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1972.041095890411d) + "'", double20 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "December" + "'", str30, "December");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "December" + "'", str31, "December");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat36);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1969 + "'", int63 == 1969);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-1972.041095890411d) + "'", double73 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "31-Dec-1969" + "'", str76, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1969 + "'", int78 == 1969);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1262");
        java.util.zip.ZipOutputStream zipOutputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.Utils.writeToZipFile("Fri 11-Jan-0032 10:43:45", zipOutputStream1);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: Fri 11-Jan-0032 10:43:45 (The filename, directory name, or volume label syntax is incorrect)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1263");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        boolean boolean14 = dateTime9.isGreaterThanOrEqual(dateTime12);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime(100L);
        double double21 = dateTime18.getDeltaYears(dateTime20);
        int int22 = dateTime18.getHour();
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime();
        net.ajaskey.common.DateTime dateTime24 = null;
        boolean boolean25 = dateTime23.isGreaterThan(dateTime24);
        java.text.SimpleDateFormat simpleDateFormat27 = null;
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat27);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double31 = dateTime28.getDeltaYears(dateTime30);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean36 = dateTime30.isEqual(dateTime35);
        java.util.Calendar calendar37 = dateTime30.getCal();
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime(calendar37);
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime(calendar37);
        boolean boolean40 = dateTime23.isLessThan(dateTime39);
        boolean boolean41 = dateTime18.isLessThan(dateTime23);
        java.lang.String str43 = dateTime18.format("     0");
        long long44 = dateTime12.getDeltaMilliSeconds(dateTime18);
        java.lang.String str45 = dateTime12.getMonth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1972.041095890411d) + "'", double21 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "     0" + "'", str43, "     0");
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-62190310549231L) + "'", long44 == (-62190310549231L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "December" + "'", str45, "December");
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1264");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        dateTime1.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str6 = dateTime1.getMonth();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        dateTime8.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str13 = dateTime8.getMonth();
        int int14 = dateTime8.getMs();
        net.ajaskey.common.DateTime dateTime15 = dateTime1.copy(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat17 = null;
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat17);
        dateTime18.set((int) ' ', 0, 11);
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("5.00", "     10");
        dateTime25.add((int) (short) 0, (int) 'a');
        int int29 = dateTime25.getDayOfMonth();
        java.lang.String str30 = dateTime25.toString();
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime(100L);
        double double37 = dateTime34.getDeltaYears(dateTime36);
        int int38 = dateTime34.getHour();
        java.text.SimpleDateFormat simpleDateFormat40 = null;
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat40);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double44 = dateTime41.getDeltaYears(dateTime43);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean49 = dateTime43.isEqual(dateTime48);
        java.util.Calendar calendar50 = dateTime43.getCal();
        java.lang.String str51 = dateTime43.format();
        net.ajaskey.common.DateTime dateTime52 = null;
        long long53 = dateTime43.getDeltaDays(dateTime52);
        int int54 = dateTime43.getSecond();
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime60 = new net.ajaskey.common.DateTime(100L);
        double double61 = dateTime58.getDeltaYears(dateTime60);
        java.text.SimpleDateFormat simpleDateFormat63 = null;
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat63);
        net.ajaskey.common.DateTime dateTime66 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double67 = dateTime64.getDeltaYears(dateTime66);
        boolean boolean68 = dateTime64.isWeekday();
        boolean boolean69 = dateTime58.sameDate(dateTime64);
        int int70 = dateTime64.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime71 = dateTime43.copy(dateTime64);
        dateTime34.set(dateTime64);
        boolean boolean73 = dateTime25.isGreaterThan(dateTime64);
        boolean boolean74 = net.ajaskey.common.Utils.sameDate(dateTime18, dateTime64);
        int int75 = dateTime8.getYears(dateTime18);
        java.lang.Class<?> wildcardClass76 = dateTime8.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "January" + "'", str6, "January");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "January" + "'", str13, "January");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1972.041095890411d) + "'", double37 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "BAD-DATE-FORMAT" + "'", str51, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1972.041095890411d) + "'", double61 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-68) + "'", int75 == (-68));
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1265");
        net.ajaskey.common.DateTime dateTime0 = null;
        java.text.SimpleDateFormat simpleDateFormat2 = null;
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat2);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        boolean boolean7 = dateTime3.isWeekday();
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long12 = dateTime3.getDeltaDays(dateTime11);
        dateTime11.set((int) (short) -1, (int) (byte) 0, (int) ' ');
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime(100L);
        double double23 = dateTime20.getDeltaYears(dateTime22);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime(100L);
        double double30 = dateTime27.getDeltaYears(dateTime29);
        int int31 = dateTime27.getHour();
        int int32 = dateTime27.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime(100L);
        double double39 = dateTime36.getDeltaYears(dateTime38);
        boolean boolean40 = dateTime38.isWeekday();
        boolean boolean41 = net.ajaskey.common.Utils.sameDate(dateTime27, dateTime38);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime(100L);
        dateTime43.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime(100L);
        double double54 = dateTime51.getDeltaYears(dateTime53);
        boolean boolean55 = dateTime53.isWeekday();
        java.util.Date date56 = dateTime53.getTime();
        dateTime43.set(dateTime53);
        int int58 = dateTime43.getYear();
        boolean boolean59 = dateTime38.isGreaterThanOrEqual(dateTime43);
        boolean boolean60 = dateTime20.sameDate(dateTime38);
        boolean boolean61 = dateTime11.isLessThanOrEqual(dateTime20);
        java.util.Date date62 = dateTime11.getTime();
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime(date62);
        java.lang.String str64 = dateTime63.getDay();
        boolean boolean65 = net.ajaskey.common.Utils.sameDate(dateTime0, dateTime63);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1972.041095890411d) + "'", double23 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1972.041095890411d) + "'", double30 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1972.041095890411d) + "'", double39 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1972.041095890411d) + "'", double54 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1969 + "'", int58 == 1969);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(date62);
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Wed Feb 01 10:44:10 MST 2");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Wednesday" + "'", str64, "Wednesday");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1266");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt(1967, 365);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                                                                                                                                                                                                                                                                                                        1,967" + "'", str2, "                                                                                                                                                                                                                                                                                                                                                                        1,967");
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1267");
        net.ajaskey.common.Utils.TAB = "             -62,190,310,593,948";
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1268");
        net.ajaskey.common.Utils.makeDir("January          264          264                                                                                               52.00          264hi!          264");
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1269");
        net.ajaskey.common.Utils.sleep(177);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1270");
        net.ajaskey.common.TextUtils.printline
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1271");
        java.text.DecimalFormat decimalFormat0 = null;
        net.ajaskey.common.Utils.df = decimalFormat0;
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1272");
        net.ajaskey.common.Utils.sleep(47);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1273");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) '4', (int) '#', 5);
        java.lang.String str4 = dateTime3.getMonth();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "December" + "'", str4, "December");
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1274");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        boolean boolean18 = dateTime16.isWeekday();
        int int19 = dateTime16.getDayOfYear();
        net.ajaskey.common.DateTime dateTime20 = dateTime4.copy(dateTime16);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime(100L);
        int int23 = dateTime22.getMs();
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime(100L);
        double double30 = dateTime27.getDeltaYears(dateTime29);
        java.text.SimpleDateFormat simpleDateFormat31 = dateTime27.getSdf();
        boolean boolean32 = dateTime22.isLessThanOrEqual(dateTime27);
        java.text.SimpleDateFormat simpleDateFormat34 = null;
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat34);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double38 = dateTime35.getDeltaYears(dateTime37);
        boolean boolean39 = dateTime35.isWeekday();
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long44 = dateTime35.getDeltaDays(dateTime43);
        long long45 = dateTime22.getDeltaDays(dateTime43);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime(100L);
        dateTime47.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean52 = dateTime47.isWeekday();
        int int53 = dateTime22.getYears(dateTime47);
        int int54 = dateTime22.getYear();
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime(100L);
        int int57 = dateTime56.getMs();
        java.lang.String str58 = dateTime56.toString();
        int int59 = dateTime56.getDayOfYear();
        java.text.SimpleDateFormat simpleDateFormat61 = null;
        net.ajaskey.common.DateTime dateTime62 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat61);
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double65 = dateTime62.getDeltaYears(dateTime64);
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean70 = dateTime64.isEqual(dateTime69);
        net.ajaskey.common.DateTime dateTime72 = new net.ajaskey.common.DateTime(100L);
        int int73 = dateTime72.getMs();
        boolean boolean74 = dateTime69.isGreaterThanOrEqual(dateTime72);
        net.ajaskey.common.DateTime dateTime76 = new net.ajaskey.common.DateTime(100L);
        dateTime76.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime84 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime86 = new net.ajaskey.common.DateTime(100L);
        double double87 = dateTime84.getDeltaYears(dateTime86);
        boolean boolean88 = dateTime86.isWeekday();
        java.util.Date date89 = dateTime86.getTime();
        dateTime76.set(dateTime86);
        boolean boolean91 = net.ajaskey.common.Utils.sameDate(dateTime69, dateTime76);
        dateTime69.add((int) '#', 6);
        boolean boolean95 = dateTime56.sameDate(dateTime69);
        net.ajaskey.common.DateTime dateTime96 = dateTime22.copy(dateTime56);
        int int97 = dateTime56.getYear();
        int int98 = dateTime56.getHour();
        long long99 = dateTime20.getDeltaMilliSeconds(dateTime56);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1972.041095890411d) + "'", double17 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 365 + "'", int19 == 365);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1972.041095890411d) + "'", double30 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 719795L + "'", long45 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1870) + "'", int53 == (-1870));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1969 + "'", int54 == 1969);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "31-Dec-1969" + "'", str58, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 365 + "'", int59 == 365);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-1972.041095890411d) + "'", double87 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1969 + "'", int97 == 1969);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 5 + "'", int98 == 5);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1275");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) (short) 0);
        int int2 = dateTime1.getHour();
        boolean boolean3 = dateTime1.isNull();
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime(dateTime1);
        java.util.Date date5 = null;
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime(date5);
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        double double13 = dateTime10.getDeltaYears(dateTime12);
        int int14 = dateTime10.getHour();
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean25 = dateTime19.isEqual(dateTime24);
        java.util.Calendar calendar26 = dateTime19.getCal();
        dateTime10.set(calendar26);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime(calendar26);
        net.ajaskey.common.DateTime dateTime29 = dateTime6.copy(dateTime28);
        java.text.SimpleDateFormat simpleDateFormat30 = dateTime28.getSdf();
        java.lang.String str31 = dateTime28.toString();
        dateTime4.set(dateTime28);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1972.041095890411d) + "'", double13 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNull(simpleDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "31-Dec-1969" + "'", str31, "31-Dec-1969");
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1276");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("Wed 31-Dec-1969 17:00:00", "      42");
        net.ajaskey.common.DateTime dateTime5 = dateTime2.parse("10-Nov-0042", "05-May-0005");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = dateTime5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(dateTime5);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1277");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(100L);
        int int4 = dateTime3.getMs();
        boolean boolean5 = dateTime3.isWeekday();
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime((long) (short) 0);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime(100L);
        int int10 = dateTime9.getMs();
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        java.text.SimpleDateFormat simpleDateFormat18 = dateTime14.getSdf();
        boolean boolean19 = dateTime9.isLessThanOrEqual(dateTime14);
        java.text.SimpleDateFormat simpleDateFormat21 = null;
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat21);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double25 = dateTime22.getDeltaYears(dateTime24);
        boolean boolean26 = dateTime22.isWeekday();
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long31 = dateTime22.getDeltaDays(dateTime30);
        long long32 = dateTime9.getDeltaDays(dateTime30);
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime(100L);
        dateTime34.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean39 = dateTime34.isWeekday();
        int int40 = dateTime9.getYears(dateTime34);
        int int41 = dateTime9.getYear();
        java.util.Calendar calendar42 = dateTime9.getCal();
        net.ajaskey.common.DateTime dateTime43 = dateTime7.copy(dateTime9);
        boolean boolean44 = dateTime3.isGreaterThan(dateTime9);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime(dateTime3);
        int int46 = dateTime45.getDayOfMonth();
        dateTime45.add(2020, 12);
        java.text.SimpleDateFormat simpleDateFormat52 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat54 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat55 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime("", simpleDateFormat54, simpleDateFormat55);
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat52, simpleDateFormat55);
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat64 = null;
        java.text.SimpleDateFormat simpleDateFormat65 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime66 = new net.ajaskey.common.DateTime("January", simpleDateFormat64, simpleDateFormat65);
        java.text.SimpleDateFormat simpleDateFormat69 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime("January", simpleDateFormat69);
        net.ajaskey.common.DateTime dateTime71 = new net.ajaskey.common.DateTime("", simpleDateFormat69);
        net.ajaskey.common.DateTime dateTime72 = new net.ajaskey.common.DateTime("", simpleDateFormat65, simpleDateFormat69);
        dateTime61.setSdf(simpleDateFormat65);
        net.ajaskey.common.DateTime dateTime74 = new net.ajaskey.common.DateTime("", simpleDateFormat55, simpleDateFormat65);
        dateTime45.setSdf(simpleDateFormat65);
        net.ajaskey.common.DateTime dateTime76 = new net.ajaskey.common.DateTime("Thu 25-Jun-2020 10:43:26", simpleDateFormat65);
        net.ajaskey.common.DateTime dateTime77 = new net.ajaskey.common.DateTime("          264", simpleDateFormat65);
        java.text.SimpleDateFormat simpleDateFormat79 = null;
        net.ajaskey.common.DateTime dateTime80 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat79);
        net.ajaskey.common.DateTime dateTime82 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double83 = dateTime80.getDeltaYears(dateTime82);
        net.ajaskey.common.DateTime dateTime87 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean88 = dateTime82.isEqual(dateTime87);
        int int89 = dateTime82.getMinute();
        boolean boolean90 = dateTime77.isLessThanOrEqual(dateTime82);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1972.041095890411d) + "'", double17 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 719795L + "'", long32 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1870) + "'", int40 == (-1870));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1969 + "'", int41 == 1969);
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 31 + "'", int46 == 31);
        org.junit.Assert.assertNotNull(simpleDateFormat52);
        org.junit.Assert.assertNotNull(simpleDateFormat54);
        org.junit.Assert.assertNotNull(simpleDateFormat55);
        org.junit.Assert.assertNotNull(simpleDateFormat65);
        org.junit.Assert.assertNotNull(simpleDateFormat69);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1278");
        java.lang.String str2 = net.ajaskey.common.Utils.lfmt((long) 313, 18);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "               313" + "'", str2, "               313");
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1279");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        java.text.SimpleDateFormat simpleDateFormat13 = null;
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat13);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        boolean boolean18 = dateTime14.isWeekday();
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long23 = dateTime14.getDeltaDays(dateTime22);
        long long24 = dateTime1.getDeltaDays(dateTime22);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(100L);
        dateTime26.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean31 = dateTime26.isWeekday();
        int int32 = dateTime1.getYears(dateTime26);
        int int33 = dateTime1.getYear();
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime(100L);
        int int36 = dateTime35.getMs();
        java.lang.String str37 = dateTime35.toString();
        int int38 = dateTime35.getDayOfYear();
        java.text.SimpleDateFormat simpleDateFormat40 = null;
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat40);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double44 = dateTime41.getDeltaYears(dateTime43);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean49 = dateTime43.isEqual(dateTime48);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime(100L);
        int int52 = dateTime51.getMs();
        boolean boolean53 = dateTime48.isGreaterThanOrEqual(dateTime51);
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime(100L);
        dateTime55.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime(100L);
        double double66 = dateTime63.getDeltaYears(dateTime65);
        boolean boolean67 = dateTime65.isWeekday();
        java.util.Date date68 = dateTime65.getTime();
        dateTime55.set(dateTime65);
        boolean boolean70 = net.ajaskey.common.Utils.sameDate(dateTime48, dateTime55);
        dateTime48.add((int) '#', 6);
        boolean boolean74 = dateTime35.sameDate(dateTime48);
        net.ajaskey.common.DateTime dateTime75 = dateTime1.copy(dateTime35);
        int int76 = dateTime35.getDayOfMonth();
        dateTime35.setFirstWorkDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 719795L + "'", long24 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1870) + "'", int32 == (-1870));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1969 + "'", int33 == 1969);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "31-Dec-1969" + "'", str37, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 365 + "'", int38 == 365);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1972.041095890411d) + "'", double66 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 31 + "'", int76 == 31);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1280");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((-1870), 1969, 1);
        java.text.SimpleDateFormat simpleDateFormat5 = null;
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat5);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime(dateTime6);
        int int11 = dateTime6.getDayOfYear();
        boolean boolean12 = dateTime3.isGreaterThan(dateTime6);
        dateTime6.add(6, (int) '4');
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1281");
        java.lang.String str2 = net.ajaskey.common.Utils.lfmt((-683000L), 14);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "      -683,000" + "'", str2, "      -683,000");
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1282");
        java.util.Date date0 = null;
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(date0);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime(100L);
        double double8 = dateTime5.getDeltaYears(dateTime7);
        int int9 = dateTime5.getHour();
        java.text.SimpleDateFormat simpleDateFormat11 = null;
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat11);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double15 = dateTime12.getDeltaYears(dateTime14);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean20 = dateTime14.isEqual(dateTime19);
        java.util.Calendar calendar21 = dateTime14.getCal();
        dateTime5.set(calendar21);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime(calendar21);
        net.ajaskey.common.DateTime dateTime24 = dateTime1.copy(dateTime23);
        java.text.SimpleDateFormat simpleDateFormat25 = dateTime23.getSdf();
        int int26 = dateTime23.getYear();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1972.041095890411d) + "'", double8 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNull(simpleDateFormat25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1283");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("", false);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1284");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        int int12 = dateTime1.getDayOfMonth();
        java.util.Date date13 = dateTime1.getTime();
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime(100L);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        int int21 = dateTime17.getHour();
        java.text.SimpleDateFormat simpleDateFormat23 = null;
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat23);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double27 = dateTime24.getDeltaYears(dateTime26);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean32 = dateTime26.isEqual(dateTime31);
        java.util.Calendar calendar33 = dateTime26.getCal();
        dateTime17.set(calendar33);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime(calendar33);
        dateTime35.add(14, 2020);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime(100L);
        double double45 = dateTime42.getDeltaYears(dateTime44);
        boolean boolean46 = dateTime44.isWeekday();
        java.util.Date date47 = dateTime44.getTime();
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime(date47);
        java.text.SimpleDateFormat simpleDateFormat50 = null;
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat50);
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double54 = dateTime51.getDeltaYears(dateTime53);
        boolean boolean55 = dateTime51.isWeekday();
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long60 = dateTime51.getDeltaDays(dateTime59);
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime(dateTime51);
        boolean boolean62 = dateTime48.isGreaterThan(dateTime51);
        java.lang.String str63 = dateTime51.getMonth();
        boolean boolean64 = dateTime35.sameDate(dateTime51);
        net.ajaskey.common.DateTime dateTime68 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime(100L);
        double double71 = dateTime68.getDeltaYears(dateTime70);
        net.ajaskey.common.DateTime dateTime73 = new net.ajaskey.common.DateTime((long) (short) 0);
        int int74 = dateTime73.getHour();
        boolean boolean75 = net.ajaskey.common.Utils.sameDate(dateTime70, dateTime73);
        java.lang.String str76 = dateTime70.getDay();
        boolean boolean77 = dateTime35.isLessThan(dateTime70);
        boolean boolean78 = dateTime1.isGreaterThan(dateTime35);
        java.lang.String str79 = dateTime35.toFullString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1972.041095890411d) + "'", double20 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1972.041095890411d) + "'", double45 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UNKNOWN" + "'", str63, "UNKNOWN");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1972.041095890411d) + "'", double71 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Wednesday" + "'", str76, "Wednesday");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str79, "Wed 31-Dec-1969 17:00:00");
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1285");
        net.ajaskey.common.Utils.NL = "-2,005";
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1286");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("              100", false);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1287");
        java.lang.String str2 = net.ajaskey.common.Utils.fmt((double) (-1L), 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Invalid fmt" + "'", str2, "Invalid fmt");
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1288");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        boolean boolean7 = dateTime5.isWeekday();
        java.util.Date date8 = dateTime5.getTime();
        dateTime5.add((int) (byte) 100, 33);
        java.lang.String str12 = dateTime5.getDay();
        java.text.SimpleDateFormat simpleDateFormat17 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat19 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat20 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime("", simpleDateFormat19, simpleDateFormat20);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat17, simpleDateFormat20);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime("10-Apr-0002", simpleDateFormat20);
        java.text.SimpleDateFormat simpleDateFormat26 = null;
        java.text.SimpleDateFormat simpleDateFormat27 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime("January", simpleDateFormat26, simpleDateFormat27);
        java.text.SimpleDateFormat simpleDateFormat31 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime("January", simpleDateFormat31);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime("", simpleDateFormat31);
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime("", simpleDateFormat27, simpleDateFormat31);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime("January                                                                                               52.00                                                                                               52.00                                                                                               52.00                                                                                               52.00hi!                                                                                               52.00", simpleDateFormat20, simpleDateFormat31);
        java.text.SimpleDateFormat simpleDateFormat37 = null;
        java.text.SimpleDateFormat simpleDateFormat38 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime("January", simpleDateFormat37, simpleDateFormat38);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("December", simpleDateFormat31, simpleDateFormat38);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime(100L);
        int int43 = dateTime42.getMs();
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime(100L);
        double double50 = dateTime47.getDeltaYears(dateTime49);
        java.text.SimpleDateFormat simpleDateFormat51 = dateTime47.getSdf();
        boolean boolean52 = dateTime42.isLessThanOrEqual(dateTime47);
        java.text.SimpleDateFormat simpleDateFormat54 = null;
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat54);
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double58 = dateTime55.getDeltaYears(dateTime57);
        boolean boolean59 = dateTime55.isWeekday();
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long64 = dateTime55.getDeltaDays(dateTime63);
        long long65 = dateTime42.getDeltaDays(dateTime63);
        java.lang.String str66 = dateTime63.toFullString();
        java.util.Calendar calendar67 = dateTime63.getCal();
        dateTime40.set(calendar67);
        dateTime5.set(calendar67);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Wednesday" + "'", str12, "Wednesday");
        org.junit.Assert.assertNotNull(simpleDateFormat17);
        org.junit.Assert.assertNotNull(simpleDateFormat19);
        org.junit.Assert.assertNotNull(simpleDateFormat20);
        org.junit.Assert.assertNotNull(simpleDateFormat27);
        org.junit.Assert.assertNotNull(simpleDateFormat31);
        org.junit.Assert.assertNotNull(simpleDateFormat38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1972.041095890411d) + "'", double50 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 719795L + "'", long65 == 719795L);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Thu 10-Apr-0002 10:44:12" + "'", str66, "Thu 10-Apr-0002 10:44:12");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-62190310547987,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=12,MILLISECOND=13,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1289");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime(100L);
        int int3 = dateTime2.getMs();
        java.text.SimpleDateFormat simpleDateFormat4 = net.ajaskey.common.Utils.sdf;
        dateTime2.setSdf(simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat4);
        java.text.SimpleDateFormat simpleDateFormat8 = null;
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double12 = dateTime9.getDeltaYears(dateTime11);
        boolean boolean13 = dateTime11.isNull();
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat15);
        dateTime16.set((int) ' ', 0, 11);
        boolean boolean21 = dateTime11.isGreaterThanOrEqual(dateTime16);
        double double22 = dateTime6.getDeltaYears(dateTime11);
        java.text.SimpleDateFormat simpleDateFormat24 = null;
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat24);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double28 = dateTime25.getDeltaYears(dateTime27);
        boolean boolean29 = dateTime27.isNull();
        boolean boolean30 = dateTime11.isGreaterThan(dateTime27);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime(dateTime11);
        int int32 = dateTime31.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime(100L);
        int int35 = dateTime34.getMs();
        int int36 = dateTime34.getHour();
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat42 = null;
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat42);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double46 = dateTime43.getDeltaYears(dateTime45);
        boolean boolean47 = dateTime40.isLessThan(dateTime45);
        java.lang.String str48 = dateTime45.toFullString();
        dateTime45.add(10, (int) (byte) -1);
        java.text.SimpleDateFormat simpleDateFormat53 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat55 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat56 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime("", simpleDateFormat55, simpleDateFormat56);
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat53, simpleDateFormat56);
        boolean boolean59 = dateTime45.isGreaterThan(dateTime58);
        boolean boolean60 = dateTime34.isEqual(dateTime45);
        net.ajaskey.common.DateTime dateTime61 = null;
        net.ajaskey.common.DateTime dateTime62 = new net.ajaskey.common.DateTime(dateTime61);
        dateTime62.set(42, 10, 10);
        java.util.Date date67 = dateTime62.getTime();
        net.ajaskey.common.DateTime dateTime68 = dateTime34.copy(dateTime62);
        long long69 = dateTime31.getDeltaDays(dateTime34);
        java.lang.Class<?> wildcardClass70 = dateTime34.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat4);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 31 + "'", int32 == 31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str48, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertNotNull(simpleDateFormat53);
        org.junit.Assert.assertNotNull(simpleDateFormat55);
        org.junit.Assert.assertNotNull(simpleDateFormat56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(date67);
// flaky:         org.junit.Assert.assertEquals(date67.toString(), "Sat Nov 10 10:44:12 MST 42");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1290");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(238, 0, 0);
        java.util.Date date4 = null;
        dateTime3.set(date4);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1291");
        java.lang.String str2 = net.ajaskey.common.Utils.fmt(0.0d, (-2019));
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Invalid fmt" + "'", str2, "Invalid fmt");
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1292");
        net.ajaskey.common.TextUtils.printline("                             100");
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1293");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt(1927, 941);
        org.junit.Assert.assertEquals("'" + strstr2, "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        1,927");
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1294");
        net.ajaskey.common.Utils.sleep((int) (byte) -1);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1295");
        net.ajaskey.common.TextUtils.printline("JanuaryThu 10-Apr-0002 10:43:43Thu 10-Apr-0002 10:43:43                                                                                               52.00Thu 10-Apr-0002 10:43:43hi!Thu 10-Apr-0002 10:43:43");
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1296");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((-59011286399903L));
        java.text.SimpleDateFormat simpleDateFormat3 = null;
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat3);
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double7 = dateTime4.getDeltaYears(dateTime6);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean12 = dateTime6.isEqual(dateTime11);
        java.util.Calendar calendar13 = dateTime6.getCal();
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(100L);
        int int16 = dateTime15.getMs();
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime(100L);
        double double23 = dateTime20.getDeltaYears(dateTime22);
        java.text.SimpleDateFormat simpleDateFormat24 = dateTime20.getSdf();
        boolean boolean25 = dateTime15.isLessThanOrEqual(dateTime20);
        int int26 = dateTime15.getMinute();
        long long27 = dateTime6.getDeltaMilliSeconds(dateTime15);
        long long28 = dateTime1.getDeltaDays(dateTime6);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime("Thu 10-Apr-0002 10:42:54", "                       25");
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime((long) 10);
        boolean boolean34 = dateTime31.isGreaterThan(dateTime33);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat40 = null;
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat40);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double44 = dateTime41.getDeltaYears(dateTime43);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean49 = dateTime43.isEqual(dateTime48);
        java.util.Calendar calendar50 = dateTime43.getCal();
        boolean boolean51 = dateTime38.isLessThan(dateTime43);
        dateTime38.setFirstWorkDay();
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime(100L);
        double double59 = dateTime56.getDeltaYears(dateTime58);
        java.text.SimpleDateFormat simpleDateFormat61 = null;
        net.ajaskey.common.DateTime dateTime62 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat61);
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double65 = dateTime62.getDeltaYears(dateTime64);
        boolean boolean66 = dateTime62.isWeekday();
        boolean boolean67 = dateTime56.sameDate(dateTime62);
        boolean boolean68 = dateTime38.sameDate(dateTime56);
        dateTime56.set(0, 0, (int) (short) 0);
        boolean boolean73 = net.ajaskey.common.Utils.sameDate(dateTime31, dateTime56);
        double double74 = dateTime6.getDeltaYears(dateTime31);
        java.lang.String str75 = dateTime31.toFullString();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1972.041095890411d) + "'", double23 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L + "'", long27 == 100L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-683000L) + "'", long28 == (-683000L));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1972.041095890411d) + "'", double59 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Invalid Time" + "'", str75, "Invalid Time");
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1297");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        java.util.Date date7 = dateTime3.getTime();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(date7);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime(date7);
        java.text.SimpleDateFormat simpleDateFormat12 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat13 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("", simpleDateFormat12, simpleDateFormat13);
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("December", simpleDateFormat13, simpleDateFormat15);
        long long17 = dateTime9.getDeltaMilliSeconds(dateTime16);
        java.lang.String str18 = dateTime9.toString();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Thu Apr 10 10:44:12 MST 2");
        org.junit.Assert.assertNotNull(simpleDateFormat12);
        org.junit.Assert.assertNotNull(simpleDateFormat13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "10-Apr-0002" + "'", str18, "10-Apr-0002");
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1298");
        net.ajaskey.common.Utils.makeDir("31-Dec-1969");
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1299");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt(2, 215);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                                                                                                                                                      2" + "'", str2, "                                                                                                                                                                                                                      2");
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1300");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        int int7 = dateTime3.getHour();
        dateTime3.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat12 = null;
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat12);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        boolean boolean17 = dateTime3.isEqual(dateTime15);
        java.lang.String str18 = dateTime3.toString();
        java.lang.String str19 = dateTime3.toFullString();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "10-Apr-0002" + "'", str18, "10-Apr-0002");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Thu 10-Apr-0002 10:44:12" + "'", str19, "Thu 10-Apr-0002 10:44:12");
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1301");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt(86, (int) ' ');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                              86" + "'", str2, "                              86");
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1302");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) (short) 0);
        int int2 = dateTime1.getHour();
        int int3 = dateTime1.getSecond();
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        int int6 = dateTime5.getMs();
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        double double13 = dateTime10.getDeltaYears(dateTime12);
        java.text.SimpleDateFormat simpleDateFormat14 = dateTime10.getSdf();
        boolean boolean15 = dateTime5.isLessThanOrEqual(dateTime10);
        java.text.SimpleDateFormat simpleDateFormat17 = null;
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat17);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double21 = dateTime18.getDeltaYears(dateTime20);
        boolean boolean22 = dateTime18.isWeekday();
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long27 = dateTime18.getDeltaDays(dateTime26);
        long long28 = dateTime5.getDeltaDays(dateTime26);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime(100L);
        dateTime30.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean35 = dateTime30.isWeekday();
        int int36 = dateTime5.getYears(dateTime30);
        java.text.SimpleDateFormat simpleDateFormat38 = null;
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat38);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double42 = dateTime39.getDeltaYears(dateTime41);
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean47 = dateTime41.isEqual(dateTime46);
        int int48 = dateTime41.getDayOfWeek();
        boolean boolean49 = dateTime30.isLessThan(dateTime41);
        long long50 = dateTime1.getDeltaMilliSeconds(dateTime30);
        dateTime1.add(13, 12);
        net.ajaskey.common.DateTime dateTime56 = dateTime1.parse("January           35           35                                                                                               52.00           35hi!           35", "JanuaryDecemberDecember                                                                                               52.00Decemberhi!December");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = dateTime56.format();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1972.041095890411d) + "'", double13 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 719795L + "'", long28 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1870) + "'", int36 == (-1870));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-59011286399900L) + "'", long50 == (-59011286399900L));
        org.junit.Assert.assertNull(dateTime56);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1303");
        java.lang.String[] strArray4 = new java.lang.String[] { "           4", "           6" };
        java.util.List<java.io.File> fileList5 = net.ajaskey.common.Utils.getDirTree("                                 42", strArray4);
        java.util.List<java.io.File> fileList6 = net.ajaskey.common.Utils.getDirTree("                                     53.00", strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(fileList5);
        org.junit.Assert.assertNull(fileList6);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1304");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        java.text.SimpleDateFormat simpleDateFormat8 = null;
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double12 = dateTime9.getDeltaYears(dateTime11);
        boolean boolean13 = dateTime9.isWeekday();
        boolean boolean14 = dateTime3.sameDate(dateTime9);
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean25 = dateTime19.isEqual(dateTime24);
        dateTime3.set(dateTime24);
        int int27 = dateTime24.getDayOfYear();
        java.text.SimpleDateFormat simpleDateFormat29 = null;
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat29);
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double33 = dateTime30.getDeltaYears(dateTime32);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean38 = dateTime32.isEqual(dateTime37);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime(100L);
        int int41 = dateTime40.getMs();
        boolean boolean42 = dateTime37.isGreaterThanOrEqual(dateTime40);
        java.text.SimpleDateFormat simpleDateFormat44 = null;
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat44);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double48 = dateTime45.getDeltaYears(dateTime47);
        boolean boolean49 = dateTime45.isWeekday();
        boolean boolean50 = dateTime40.isLessThanOrEqual(dateTime45);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime(100L);
        dateTime52.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean57 = dateTime52.isWeekday();
        boolean boolean58 = dateTime40.isGreaterThanOrEqual(dateTime52);
        java.lang.String str59 = dateTime40.toFullString();
        boolean boolean60 = dateTime24.isGreaterThanOrEqual(dateTime40);
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime(4, 53, 32);
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime71 = new net.ajaskey.common.DateTime(100L);
        double double72 = dateTime69.getDeltaYears(dateTime71);
        int int73 = dateTime69.getHour();
        dateTime69.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat78 = null;
        net.ajaskey.common.DateTime dateTime79 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat78);
        net.ajaskey.common.DateTime dateTime81 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double82 = dateTime79.getDeltaYears(dateTime81);
        boolean boolean83 = dateTime69.isEqual(dateTime81);
        java.text.SimpleDateFormat simpleDateFormat85 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat87 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat88 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime89 = new net.ajaskey.common.DateTime("", simpleDateFormat87, simpleDateFormat88);
        net.ajaskey.common.DateTime dateTime90 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat85, simpleDateFormat88);
        dateTime69.setSdf(simpleDateFormat85);
        net.ajaskey.common.DateTime dateTime92 = new net.ajaskey.common.DateTime("         1", simpleDateFormat85);
        dateTime64.setSdf(simpleDateFormat85);
        dateTime40.setSdf(simpleDateFormat85);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str59, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1972.041095890411d) + "'", double72 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat85);
        org.junit.Assert.assertNotNull(simpleDateFormat87);
        org.junit.Assert.assertNotNull(simpleDateFormat88);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1305");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("11", true);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1306");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        boolean boolean6 = dateTime4.isNull();
        java.lang.String str7 = dateTime4.format();
        net.ajaskey.common.DateTime dateTime9 = dateTime4.parse("33.00");
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat15);
        boolean boolean17 = net.ajaskey.common.Utils.sameDate(dateTime13, dateTime16);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = dateTime9.isGreaterThanOrEqual(dateTime16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "BAD-DATE-FORMAT" + "'", str7, "BAD-DATE-FORMAT");
        org.junit.Assert.assertNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1307");
        java.lang.String str2 = net.ajaskey.common.Utils.fmt((double) 18, 31);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Invalid fmt" + "'", str2, "Invalid fmt");
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1308");
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("                                  -1,972.04", "Thu 25-Jun-2020 10:43:40");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'T'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1309");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        boolean boolean14 = dateTime9.isGreaterThanOrEqual(dateTime12);
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        boolean boolean21 = dateTime17.isWeekday();
        boolean boolean22 = dateTime12.isLessThanOrEqual(dateTime17);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        dateTime24.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean29 = dateTime24.isWeekday();
        boolean boolean30 = dateTime12.isGreaterThanOrEqual(dateTime24);
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime(100L);
        double double37 = dateTime34.getDeltaYears(dateTime36);
        java.text.SimpleDateFormat simpleDateFormat39 = null;
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double43 = dateTime40.getDeltaYears(dateTime42);
        boolean boolean44 = dateTime40.isWeekday();
        boolean boolean45 = dateTime34.sameDate(dateTime40);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime(100L);
        double double52 = dateTime49.getDeltaYears(dateTime51);
        java.text.SimpleDateFormat simpleDateFormat54 = null;
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat54);
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double58 = dateTime55.getDeltaYears(dateTime57);
        boolean boolean59 = dateTime55.isWeekday();
        boolean boolean60 = dateTime49.sameDate(dateTime55);
        java.text.SimpleDateFormat simpleDateFormat62 = null;
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat62);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double66 = dateTime63.getDeltaYears(dateTime65);
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean71 = dateTime65.isEqual(dateTime70);
        dateTime49.set(dateTime70);
        long long73 = dateTime34.getDeltaMilliSeconds(dateTime70);
        net.ajaskey.common.DateTime dateTime77 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat79 = null;
        net.ajaskey.common.DateTime dateTime80 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat79);
        boolean boolean81 = net.ajaskey.common.Utils.sameDate(dateTime77, dateTime80);
        boolean boolean82 = net.ajaskey.common.Utils.sameDate(dateTime34, dateTime80);
        dateTime24.set(dateTime80);
        int int84 = dateTime80.getHour();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1972.041095890411d) + "'", double37 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1972.041095890411d) + "'", double52 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1310");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("                                                                                                                                                                                                                                                          22");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1311");
        java.lang.String str2 = net.ajaskey.common.Utils.fmt((double) 719528L, 36);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Invalid fmt" + "'", str2, "Invalid fmt");
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1312");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt(78, 8);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "      78" + "'", str2, "      78");
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1313");
        java.lang.String[] strArray6 = new java.lang.String[] { "           4", "           6" };
        java.util.List<java.io.File> fileList7 = net.ajaskey.common.Utils.getDirTree("                                 42", strArray6);
        java.util.List<java.io.File> fileList8 = net.ajaskey.common.Utils.getDirTree("", strArray6);
        java.util.List<java.io.File> fileList9 = net.ajaskey.common.Utils.getDirTree("        10", strArray6);
        java.util.List<java.io.File> fileList10 = net.ajaskey.common.Utils.getDirTree("-100", strArray6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNull(fileList7);
        org.junit.Assert.assertNull(fileList8);
        org.junit.Assert.assertNull(fileList9);
        org.junit.Assert.assertNull(fileList10);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1314");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("-1", true);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1315");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime(100L);
        int int3 = dateTime2.getMs();
        java.text.SimpleDateFormat simpleDateFormat4 = net.ajaskey.common.Utils.sdf;
        dateTime2.setSdf(simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat4);
        java.text.SimpleDateFormat simpleDateFormat8 = null;
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double12 = dateTime9.getDeltaYears(dateTime11);
        boolean boolean13 = dateTime11.isNull();
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat15);
        dateTime16.set((int) ' ', 0, 11);
        boolean boolean21 = dateTime11.isGreaterThanOrEqual(dateTime16);
        double double22 = dateTime6.getDeltaYears(dateTime11);
        java.text.SimpleDateFormat simpleDateFormat24 = null;
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat24);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double28 = dateTime25.getDeltaYears(dateTime27);
        boolean boolean29 = dateTime27.isNull();
        boolean boolean30 = dateTime11.isGreaterThan(dateTime27);
        java.lang.String str31 = dateTime11.getMonth();
        net.ajaskey.common.DateTime dateTime33 = dateTime11.parse("Thu 10-Apr-0002 10:43:28");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat4);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "December" + "'", str31, "December");
        org.junit.Assert.assertNull(dateTime33);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1316");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readTextFile("Thu 10-Apr-0002 10:42:59", false);
        java.lang.String str3 = net.ajaskey.common.TextUtils.toString(strList2);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1317");
        java.text.SimpleDateFormat simpleDateFormat3 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat4 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime("", simpleDateFormat3, simpleDateFormat4);
        java.text.SimpleDateFormat simpleDateFormat7 = null;
        java.text.SimpleDateFormat simpleDateFormat8 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime("January", simpleDateFormat7, simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat3, simpleDateFormat8);
        java.text.SimpleDateFormat simpleDateFormat13 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat14 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime("", simpleDateFormat13, simpleDateFormat14);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime(100L);
        int int18 = dateTime17.getMs();
        java.text.SimpleDateFormat simpleDateFormat19 = net.ajaskey.common.Utils.sdf;
        dateTime17.setSdf(simpleDateFormat19);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat14, simpleDateFormat19);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime("                             100", simpleDateFormat8, simpleDateFormat14);
        java.text.SimpleDateFormat simpleDateFormat23 = dateTime22.getSdf();
        java.lang.String str24 = dateTime22.getDay();
        java.lang.Class<?> wildcardClass25 = dateTime22.getClass();
        org.junit.Assert.assertNotNull(simpleDateFormat3);
        org.junit.Assert.assertNotNull(simpleDateFormat4);
        org.junit.Assert.assertNotNull(simpleDateFormat8);
        org.junit.Assert.assertNotNull(simpleDateFormat13);
        org.junit.Assert.assertNotNull(simpleDateFormat14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat19);
        org.junit.Assert.assertNull(simpleDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UNKNOWN" + "'", str24, "UNKNOWN");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1318");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        dateTime1.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str6 = dateTime1.getMonth();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        dateTime8.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str13 = dateTime8.getMonth();
        int int14 = dateTime8.getMs();
        net.ajaskey.common.DateTime dateTime15 = dateTime1.copy(dateTime8);
        boolean boolean16 = dateTime1.isWeekday();
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime(100L);
        double double23 = dateTime20.getDeltaYears(dateTime22);
        boolean boolean24 = dateTime22.isWeekday();
        boolean boolean25 = dateTime1.isGreaterThan(dateTime22);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime(100L);
        dateTime27.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str32 = dateTime27.getMonth();
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime(100L);
        dateTime34.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str39 = dateTime34.getMonth();
        int int40 = dateTime34.getMs();
        net.ajaskey.common.DateTime dateTime41 = dateTime27.copy(dateTime34);
        java.lang.String str42 = dateTime34.toFullString();
        boolean boolean43 = net.ajaskey.common.Utils.sameDate(dateTime1, dateTime34);
        int int44 = dateTime1.getDayOfMonth();
        int int45 = dateTime1.getDayOfYear();
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime(dateTime1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "January" + "'", str6, "January");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "January" + "'", str13, "January");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1972.041095890411d) + "'", double23 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "January" + "'", str32, "January");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "January" + "'", str39, "January");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Sat 04-Jan-0100 17:00:00" + "'", str42, "Sat 04-Jan-0100 17:00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1319");
        net.ajaskey.common.TextUtils.printline("Sat 10-Nov-0042 10:43:44");
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1320");
        java.text.DecimalFormat decimalFormat0 = net.ajaskey.common.Utils.df;
        net.ajaskey.common.Utils.df = decimalFormat0;
        net.ajaskey.common.Utils.df = decimalFormat0;
        net.ajaskey.common.Utils.df = decimalFormat0;
        net.ajaskey.common.Utils.df = decimalFormat0;
        net.ajaskey.common.Utils.df = decimalFormat0;
        net.ajaskey.common.Utils.df = decimalFormat0;
        net.ajaskey.common.Utils.df = decimalFormat0;
        net.ajaskey.common.Utils.df = decimalFormat0;
        net.ajaskey.common.Utils.df = decimalFormat0;
        net.ajaskey.common.Utils.df = decimalFormat0;
        net.ajaskey.common.Utils.df = decimalFormat0;
// flaky:         org.junit.Assert.assertNull(decimalFormat0);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1321");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("BAD-DATE-FORMAT", "                                                                                               52.00");
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime("10-Apr-0002", "5.00");
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime(12, 42, (int) (byte) 1);
        java.util.Calendar calendar10 = dateTime9.getCal();
        boolean boolean11 = net.ajaskey.common.Utils.sameDate(dateTime5, dateTime9);
        boolean boolean12 = dateTime2.isLessThan(dateTime5);
        dateTime2.set(5, 235, 28);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-61678304146791,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=15,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=182,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=13,MILLISECOND=209,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1322");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("                               39");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1323");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((-59011286399900L));
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(100L);
        int int4 = dateTime3.getMs();
        boolean boolean5 = dateTime3.isNull();
        java.util.Calendar calendar6 = dateTime3.getCal();
        int int7 = dateTime1.getYears(dateTime3);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime(100L);
        int int10 = dateTime9.getMs();
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        java.text.SimpleDateFormat simpleDateFormat18 = dateTime14.getSdf();
        boolean boolean19 = dateTime9.isLessThanOrEqual(dateTime14);
        java.text.SimpleDateFormat simpleDateFormat21 = null;
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat21);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double25 = dateTime22.getDeltaYears(dateTime24);
        boolean boolean26 = dateTime22.isWeekday();
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long31 = dateTime22.getDeltaDays(dateTime30);
        long long32 = dateTime9.getDeltaDays(dateTime30);
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime(100L);
        dateTime34.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean39 = dateTime34.isWeekday();
        int int40 = dateTime9.getYears(dateTime34);
        int int41 = dateTime9.getYear();
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime(100L);
        int int44 = dateTime43.getMs();
        java.lang.String str45 = dateTime43.toString();
        int int46 = dateTime43.getDayOfYear();
        java.text.SimpleDateFormat simpleDateFormat48 = null;
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat48);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double52 = dateTime49.getDeltaYears(dateTime51);
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean57 = dateTime51.isEqual(dateTime56);
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime(100L);
        int int60 = dateTime59.getMs();
        boolean boolean61 = dateTime56.isGreaterThanOrEqual(dateTime59);
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime(100L);
        dateTime63.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime71 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime73 = new net.ajaskey.common.DateTime(100L);
        double double74 = dateTime71.getDeltaYears(dateTime73);
        boolean boolean75 = dateTime73.isWeekday();
        java.util.Date date76 = dateTime73.getTime();
        dateTime63.set(dateTime73);
        boolean boolean78 = net.ajaskey.common.Utils.sameDate(dateTime56, dateTime63);
        dateTime56.add((int) '#', 6);
        boolean boolean82 = dateTime43.sameDate(dateTime56);
        net.ajaskey.common.DateTime dateTime83 = dateTime9.copy(dateTime43);
        int int84 = dateTime43.getYear();
        int int85 = dateTime43.getHour();
        boolean boolean86 = dateTime1.isGreaterThan(dateTime43);
        net.ajaskey.common.DateTime dateTime89 = dateTime1.parse("Thu 10-Apr-0002 10:43:05", "");
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.DateTime dateTime91 = dateTime89.parse("Thu 10-Apr-0002 10:43:36");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1869 + "'", int7 == 1869);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1972.041095890411d) + "'", double17 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 719795L + "'", long32 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1870) + "'", int40 == (-1870));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1969 + "'", int41 == 1969);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "31-Dec-1969" + "'", str45, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 365 + "'", int46 == 365);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-1972.041095890411d) + "'", double74 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1969 + "'", int84 == 1969);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 5 + "'", int85 == 5);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(dateTime89);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1324");
        net.ajaskey.common.Utils.makeDir("                                                                                                                                                                                                                                                                      10");
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1325");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(11, 7, 98);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1326");
        java.text.SimpleDateFormat simpleDateFormat2 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime("January", simpleDateFormat2);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime("", simpleDateFormat2);
        dateTime4.setFirstWorkDay();
        int int6 = dateTime4.getMs();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        int int9 = dateTime8.getMs();
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(100L);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        java.text.SimpleDateFormat simpleDateFormat17 = dateTime13.getSdf();
        boolean boolean18 = dateTime8.isLessThanOrEqual(dateTime13);
        java.text.SimpleDateFormat simpleDateFormat20 = null;
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat20);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double24 = dateTime21.getDeltaYears(dateTime23);
        boolean boolean25 = dateTime21.isWeekday();
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long30 = dateTime21.getDeltaDays(dateTime29);
        long long31 = dateTime8.getDeltaDays(dateTime29);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat37 = null;
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat37);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double41 = dateTime38.getDeltaYears(dateTime40);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean46 = dateTime40.isEqual(dateTime45);
        java.util.Calendar calendar47 = dateTime40.getCal();
        boolean boolean48 = dateTime35.isLessThan(dateTime40);
        boolean boolean49 = net.ajaskey.common.Utils.sameDate(dateTime8, dateTime35);
        int int50 = dateTime35.getDayOfWeek();
        java.lang.String str51 = dateTime35.toFullString();
        boolean boolean52 = dateTime4.isLessThan(dateTime35);
        int int53 = dateTime35.getHour();
        org.junit.Assert.assertNotNull(simpleDateFormat2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1972.041095890411d) + "'", double16 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 719795L + "'", long31 == 719795L);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Thu 10-Apr-0002 10:44:13" + "'", str51, "Thu 10-Apr-0002 10:44:13");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1327");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) (short) 0);
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(100L);
        int int4 = dateTime3.getMs();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime(100L);
        double double11 = dateTime8.getDeltaYears(dateTime10);
        java.text.SimpleDateFormat simpleDateFormat12 = dateTime8.getSdf();
        boolean boolean13 = dateTime3.isLessThanOrEqual(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat15);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double19 = dateTime16.getDeltaYears(dateTime18);
        boolean boolean20 = dateTime16.isWeekday();
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long25 = dateTime16.getDeltaDays(dateTime24);
        long long26 = dateTime3.getDeltaDays(dateTime24);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime(100L);
        dateTime28.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean33 = dateTime28.isWeekday();
        int int34 = dateTime3.getYears(dateTime28);
        int int35 = dateTime3.getYear();
        java.util.Calendar calendar36 = dateTime3.getCal();
        net.ajaskey.common.DateTime dateTime37 = dateTime1.copy(dateTime3);
        boolean boolean38 = dateTime3.isWeekday();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1972.041095890411d) + "'", double11 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 719795L + "'", long26 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1870) + "'", int34 == (-1870));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1969 + "'", int35 == 1969);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1328");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        java.text.SimpleDateFormat simpleDateFormat8 = null;
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double12 = dateTime9.getDeltaYears(dateTime11);
        boolean boolean13 = dateTime9.isWeekday();
        boolean boolean14 = dateTime3.sameDate(dateTime9);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((long) 10);
        java.util.Calendar calendar17 = dateTime16.getCal();
        double double18 = dateTime3.getDeltaYears(dateTime16);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1972.041095890411d) + "'", double18 == (-1972.041095890411d));
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1329");
        net.ajaskey.common.TextUtils.printline("     35");
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1330");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat5 = null;
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat5);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        boolean boolean10 = dateTime3.isLessThan(dateTime8);
        int int11 = dateTime8.getYear();
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(dateTime8);
        dateTime12.set((int) (short) 10, (int) (byte) 100, 5);
        int int17 = dateTime12.getSecond();
        java.lang.Class<?> wildcardClass18 = dateTime12.getClass();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1969 + "'", int11 == 1969);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1331");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("                                  -1,972.04", false);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1332");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        boolean boolean18 = dateTime16.isWeekday();
        int int19 = dateTime16.getDayOfYear();
        net.ajaskey.common.DateTime dateTime20 = dateTime4.copy(dateTime16);
        boolean boolean21 = dateTime4.isNull();
        dateTime4.set(260, 81, 45);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1972.041095890411d) + "'", double17 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 365 + "'", int19 == 365);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1333");
        java.util.zip.ZipOutputStream zipOutputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.Utils.writeToZipFile("      81", zipOutputStream1);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:       81 (The system cannot find the file specified)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1334");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        dateTime1.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str6 = dateTime1.getMonth();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        dateTime8.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str13 = dateTime8.getMonth();
        int int14 = dateTime8.getMs();
        net.ajaskey.common.DateTime dateTime15 = dateTime1.copy(dateTime8);
        int int16 = dateTime8.getSecond();
        int int17 = dateTime8.getHour();
        int int18 = dateTime8.getYear();
        net.ajaskey.common.DateTime dateTime21 = dateTime8.parse("62,190,310,608,217", "Thu 10-Apr-0002 10:43:11");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "January" + "'", str6, "January");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "January" + "'", str13, "January");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNull(dateTime21);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1335");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime(100L);
        int int3 = dateTime2.getMs();
        java.text.SimpleDateFormat simpleDateFormat4 = net.ajaskey.common.Utils.sdf;
        dateTime2.setSdf(simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime((long) 53);
        boolean boolean9 = dateTime8.isWeekday();
        boolean boolean10 = dateTime6.sameDate(dateTime8);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime(100L);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        java.text.SimpleDateFormat simpleDateFormat21 = dateTime17.getSdf();
        boolean boolean22 = dateTime12.isLessThanOrEqual(dateTime17);
        java.text.SimpleDateFormat simpleDateFormat24 = null;
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat24);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double28 = dateTime25.getDeltaYears(dateTime27);
        boolean boolean29 = dateTime25.isWeekday();
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long34 = dateTime25.getDeltaDays(dateTime33);
        long long35 = dateTime12.getDeltaDays(dateTime33);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime(100L);
        dateTime37.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean42 = dateTime37.isWeekday();
        int int43 = dateTime12.getYears(dateTime37);
        java.text.SimpleDateFormat simpleDateFormat45 = null;
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat45);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double49 = dateTime46.getDeltaYears(dateTime48);
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean54 = dateTime48.isEqual(dateTime53);
        int int55 = dateTime48.getDayOfWeek();
        boolean boolean56 = dateTime37.isLessThan(dateTime48);
        boolean boolean57 = dateTime6.isLessThanOrEqual(dateTime37);
        java.text.SimpleDateFormat simpleDateFormat59 = null;
        net.ajaskey.common.DateTime dateTime60 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat59);
        net.ajaskey.common.DateTime dateTime62 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double63 = dateTime60.getDeltaYears(dateTime62);
        boolean boolean64 = dateTime60.isWeekday();
        net.ajaskey.common.DateTime dateTime68 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long69 = dateTime60.getDeltaDays(dateTime68);
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime(dateTime60);
        net.ajaskey.common.DateTime dateTime74 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime76 = new net.ajaskey.common.DateTime(100L);
        double double77 = dateTime74.getDeltaYears(dateTime76);
        boolean boolean78 = dateTime76.isWeekday();
        java.util.Date date79 = dateTime76.getTime();
        dateTime60.set(date79);
        net.ajaskey.common.DateTime dateTime82 = new net.ajaskey.common.DateTime(100L);
        int int83 = dateTime82.getMs();
        java.lang.String str84 = dateTime82.toString();
        boolean boolean85 = dateTime60.isLessThanOrEqual(dateTime82);
        int int86 = dateTime60.getHour();
        int int87 = dateTime60.getYear();
        java.util.Calendar calendar88 = dateTime60.getCal();
        dateTime37.set(calendar88);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1972.041095890411d) + "'", double20 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 719795L + "'", long35 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1870) + "'", int43 == (-1870));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1972.041095890411d) + "'", double77 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "31-Dec-1969" + "'", str84, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 5 + "'", int86 == 5);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1969 + "'", int87 == 1969);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1336");
        net.ajaskey.common.Utils.makeDir("28");
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1337");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt(31, 378);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                                                                                                                                                                                                                                                                                                                        31" + "'", str2, "                                                                                                                                                                                                                                                                                                                                                                                        31");
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1338");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean4 = dateTime3.isNull();
        int int5 = dateTime3.getDayOfYear();
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(100L);
        long long16 = dateTime13.getDeltaDays(dateTime15);
        int int17 = dateTime13.getHour();
        dateTime13.add((int) (byte) 100, (int) (byte) 0);
        double double21 = dateTime9.getDeltaYears(dateTime13);
        boolean boolean22 = dateTime3.isLessThanOrEqual(dateTime9);
        java.util.Calendar calendar23 = null;
        dateTime3.set(calendar23);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean29 = dateTime28.isNull();
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime(100L);
        dateTime31.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str36 = dateTime31.getMonth();
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime(100L);
        dateTime38.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str43 = dateTime38.getMonth();
        int int44 = dateTime38.getMs();
        net.ajaskey.common.DateTime dateTime45 = dateTime31.copy(dateTime38);
        boolean boolean46 = dateTime28.isGreaterThanOrEqual(dateTime45);
        boolean boolean47 = dateTime3.isGreaterThan(dateTime28);
        dateTime3.setFirstWorkDay();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-719795L) + "'", long16 == (-719795L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "January" + "'", str36, "January");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "January" + "'", str43, "January");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1339");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("5.00", "     10");
        dateTime2.add((int) (short) 0, (int) 'a');
        int int6 = dateTime2.getDayOfMonth();
        java.lang.String str7 = dateTime2.toString();
        boolean boolean8 = dateTime2.isWeekday();
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime("Thu 10-Apr-0002 10:42:54", "                       25");
        java.text.SimpleDateFormat simpleDateFormat13 = null;
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat13);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean22 = dateTime16.isEqual(dateTime21);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        int int25 = dateTime24.getMs();
        boolean boolean26 = dateTime21.isGreaterThanOrEqual(dateTime24);
        double double27 = dateTime11.getDeltaYears(dateTime21);
        boolean boolean28 = net.ajaskey.common.Utils.sameDate(dateTime2, dateTime11);
        int int29 = dateTime11.getMinute();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1340");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((-1870), 1969, 1);
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("5.00", "     10");
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        double double13 = dateTime10.getDeltaYears(dateTime12);
        int int14 = dateTime10.getHour();
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean25 = dateTime19.isEqual(dateTime24);
        java.util.Calendar calendar26 = dateTime19.getCal();
        dateTime10.set(calendar26);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime(calendar26);
        dateTime6.set(calendar26);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime(100L);
        int int32 = dateTime31.getMs();
        java.lang.String str33 = dateTime31.toString();
        java.lang.String str35 = dateTime31.format("         1");
        net.ajaskey.common.DateTime dateTime36 = dateTime6.copy(dateTime31);
        int int37 = dateTime3.getYears(dateTime36);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime(dateTime3);
        java.text.SimpleDateFormat simpleDateFormat40 = null;
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat40);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double44 = dateTime41.getDeltaYears(dateTime43);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean49 = dateTime43.isEqual(dateTime48);
        java.util.Calendar calendar50 = dateTime43.getCal();
        java.lang.String str51 = dateTime43.format();
        net.ajaskey.common.DateTime dateTime52 = null;
        long long53 = dateTime43.getDeltaDays(dateTime52);
        int int54 = dateTime43.getSecond();
        java.text.SimpleDateFormat simpleDateFormat56 = null;
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat56);
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double60 = dateTime57.getDeltaYears(dateTime59);
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean65 = dateTime59.isEqual(dateTime64);
        boolean boolean66 = dateTime43.isGreaterThanOrEqual(dateTime64);
        net.ajaskey.common.DateTime dateTime69 = dateTime64.parse("                                                 100", "Thu 10-Apr-0002 10:42:55");
        boolean boolean70 = dateTime3.isLessThan(dateTime64);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1972.041095890411d) + "'", double13 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "31-Dec-1969" + "'", str33, "31-Dec-1969");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "         1" + "'", str35, "         1");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 262 + "'", int37 == 262);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "BAD-DATE-FORMAT" + "'", str51, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1341");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        boolean boolean12 = dateTime1.isWeekday();
        java.util.Calendar calendar13 = dateTime1.getCal();
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat15);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double19 = dateTime16.getDeltaYears(dateTime18);
        boolean boolean20 = dateTime16.isWeekday();
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long25 = dateTime16.getDeltaDays(dateTime24);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(dateTime16);
        dateTime26.setFirstWorkDay();
        long long28 = dateTime1.getDeltaDays(dateTime26);
        java.lang.String str29 = dateTime26.toFullString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-18438L) + "'", long28 == (-18438L));
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Thu 25-Jun-2020 10:44:14" + "'", str29, "Thu 25-Jun-2020 10:44:14");
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1342");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((-59011286399900L));
        java.text.SimpleDateFormat simpleDateFormat3 = null;
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat3);
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double7 = dateTime4.getDeltaYears(dateTime6);
        boolean boolean8 = dateTime4.isWeekday();
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long13 = dateTime4.getDeltaDays(dateTime12);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime(dateTime4);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime(100L);
        double double21 = dateTime18.getDeltaYears(dateTime20);
        boolean boolean22 = dateTime20.isWeekday();
        java.util.Date date23 = dateTime20.getTime();
        dateTime4.set(date23);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(100L);
        int int27 = dateTime26.getMs();
        java.lang.String str28 = dateTime26.toString();
        boolean boolean29 = dateTime4.isLessThanOrEqual(dateTime26);
        java.lang.String str31 = dateTime26.format("5.00");
        java.text.SimpleDateFormat simpleDateFormat33 = null;
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat33);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double37 = dateTime34.getDeltaYears(dateTime36);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean42 = dateTime36.isEqual(dateTime41);
        java.util.Calendar calendar43 = dateTime36.getCal();
        net.ajaskey.common.DateTime dateTime44 = null;
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime(dateTime44);
        java.lang.String str47 = dateTime45.format("     5.00");
        net.ajaskey.common.DateTime dateTime48 = null;
        long long49 = dateTime45.getDeltaDays(dateTime48);
        long long50 = dateTime36.getDeltaDays(dateTime45);
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime(100L);
        double double57 = dateTime54.getDeltaYears(dateTime56);
        boolean boolean58 = dateTime56.isWeekday();
        java.util.Date date59 = dateTime56.getTime();
        java.text.SimpleDateFormat simpleDateFormat61 = null;
        net.ajaskey.common.DateTime dateTime62 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat61);
        dateTime62.set((int) ' ', 0, 11);
        boolean boolean67 = dateTime62.isWeekday();
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime(100L);
        dateTime69.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime77 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime79 = new net.ajaskey.common.DateTime(100L);
        double double80 = dateTime77.getDeltaYears(dateTime79);
        boolean boolean81 = dateTime79.isWeekday();
        java.util.Date date82 = dateTime79.getTime();
        dateTime69.set(dateTime79);
        boolean boolean84 = dateTime62.isEqual(dateTime79);
        boolean boolean85 = dateTime56.isLessThanOrEqual(dateTime79);
        boolean boolean86 = net.ajaskey.common.Utils.sameDate(dateTime36, dateTime56);
        long long87 = dateTime26.getDeltaDays(dateTime36);
        boolean boolean88 = net.ajaskey.common.Utils.sameDate(dateTime1, dateTime36);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1972.041095890411d) + "'", double21 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "31-Dec-1969" + "'", str28, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "5.00" + "'", str31, "5.00");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "     5.00" + "'", str47, "     5.00");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-18438L) + "'", long50 == (-18438L));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1972.041095890411d) + "'", double57 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-1972.041095890411d) + "'", double80 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1343");
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime(100L);
        double double8 = dateTime5.getDeltaYears(dateTime7);
        int int9 = dateTime5.getHour();
        dateTime5.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat14 = null;
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat14);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double18 = dateTime15.getDeltaYears(dateTime17);
        boolean boolean19 = dateTime5.isEqual(dateTime17);
        java.text.SimpleDateFormat simpleDateFormat21 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat23 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat24 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("", simpleDateFormat23, simpleDateFormat24);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat21, simpleDateFormat24);
        dateTime5.setSdf(simpleDateFormat21);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat34 = null;
        java.text.SimpleDateFormat simpleDateFormat35 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime("January", simpleDateFormat34, simpleDateFormat35);
        java.text.SimpleDateFormat simpleDateFormat39 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("January", simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("", simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime("", simpleDateFormat35, simpleDateFormat39);
        dateTime31.setSdf(simpleDateFormat35);
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime("December", simpleDateFormat21, simpleDateFormat35);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime("5.00", simpleDateFormat35);
        java.text.SimpleDateFormat simpleDateFormat48 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime("January", simpleDateFormat48);
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime("", simpleDateFormat48);
        dateTime50.setFirstWorkDay();
        boolean boolean52 = dateTime45.isLessThan(dateTime50);
        dateTime45.setFirstWorkDay();
        java.util.Calendar calendar54 = dateTime45.getCal();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass55 = calendar54.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1972.041095890411d) + "'", double8 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat21);
        org.junit.Assert.assertNotNull(simpleDateFormat23);
        org.junit.Assert.assertNotNull(simpleDateFormat24);
        org.junit.Assert.assertNotNull(simpleDateFormat35);
        org.junit.Assert.assertNotNull(simpleDateFormat39);
        org.junit.Assert.assertNotNull(simpleDateFormat48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(calendar54);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1344");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        int int7 = dateTime3.getHour();
        java.text.SimpleDateFormat simpleDateFormat9 = null;
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double13 = dateTime10.getDeltaYears(dateTime12);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean18 = dateTime12.isEqual(dateTime17);
        java.util.Calendar calendar19 = dateTime12.getCal();
        dateTime3.set(calendar19);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime(calendar19);
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat27 = null;
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat27);
        boolean boolean29 = net.ajaskey.common.Utils.sameDate(dateTime25, dateTime28);
        boolean boolean30 = dateTime21.isGreaterThanOrEqual(dateTime25);
        java.text.SimpleDateFormat simpleDateFormat32 = null;
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat32);
        dateTime33.set((int) ' ', 0, 11);
        boolean boolean38 = dateTime33.isWeekday();
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime(100L);
        int int41 = dateTime40.getMs();
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime(100L);
        double double48 = dateTime45.getDeltaYears(dateTime47);
        java.text.SimpleDateFormat simpleDateFormat49 = dateTime45.getSdf();
        boolean boolean50 = dateTime40.isLessThanOrEqual(dateTime45);
        java.util.Date date51 = dateTime45.getTime();
        dateTime33.set(date51);
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime(date51);
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime(date51);
        dateTime21.set(date51);
        net.ajaskey.common.DateTime dateTime57 = dateTime21.parse("                                                                                                   5");
        // The following exception was thrown during execution in test generation
        try {
            int int58 = dateTime57.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1972.041095890411d) + "'", double48 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(date51);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Thu Apr 10 10:44:14 MST 2");
        org.junit.Assert.assertNull(dateTime57);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1345");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime(100L);
        int int3 = dateTime2.getMs();
        java.text.SimpleDateFormat simpleDateFormat4 = net.ajaskey.common.Utils.sdf;
        dateTime2.setSdf(simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime(100L);
        int int10 = dateTime9.getMs();
        java.text.SimpleDateFormat simpleDateFormat11 = net.ajaskey.common.Utils.sdf;
        dateTime9.setSdf(simpleDateFormat11);
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat11);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(100L);
        dateTime15.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime(100L);
        double double26 = dateTime23.getDeltaYears(dateTime25);
        boolean boolean27 = dateTime25.isWeekday();
        java.util.Date date28 = dateTime25.getTime();
        dateTime15.set(dateTime25);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat35 = null;
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat35);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double39 = dateTime36.getDeltaYears(dateTime38);
        boolean boolean40 = dateTime33.isLessThan(dateTime38);
        dateTime25.set(dateTime38);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime(100L);
        double double48 = dateTime45.getDeltaYears(dateTime47);
        long long49 = dateTime25.getDeltaMilliSeconds(dateTime47);
        boolean boolean50 = net.ajaskey.common.Utils.sameMonth(dateTime13, dateTime25);
        dateTime6.set(dateTime13);
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime("5.00", "     10");
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime60 = new net.ajaskey.common.DateTime(100L);
        double double61 = dateTime58.getDeltaYears(dateTime60);
        int int62 = dateTime58.getHour();
        java.text.SimpleDateFormat simpleDateFormat64 = null;
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat64);
        net.ajaskey.common.DateTime dateTime67 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double68 = dateTime65.getDeltaYears(dateTime67);
        net.ajaskey.common.DateTime dateTime72 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean73 = dateTime67.isEqual(dateTime72);
        java.util.Calendar calendar74 = dateTime67.getCal();
        dateTime58.set(calendar74);
        net.ajaskey.common.DateTime dateTime76 = new net.ajaskey.common.DateTime(calendar74);
        dateTime54.set(calendar74);
        net.ajaskey.common.DateTime dateTime78 = new net.ajaskey.common.DateTime(calendar74);
        net.ajaskey.common.DateTime dateTime79 = new net.ajaskey.common.DateTime(calendar74);
        net.ajaskey.common.DateTime dateTime80 = new net.ajaskey.common.DateTime(calendar74);
        int int81 = dateTime80.getMinute();
        boolean boolean82 = dateTime13.isGreaterThan(dateTime80);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat11);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1972.041095890411d) + "'", double26 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1972.041095890411d) + "'", double48 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 100L + "'", long49 == 100L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1972.041095890411d) + "'", double61 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1346");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(54, 1866, 245);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1347");
        java.util.Map<java.lang.String, java.lang.Integer> strMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = net.ajaskey.common.Utils.findName(strMap0, (java.lang.Integer) 44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1348");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((-1870), 1969, 1);
        java.text.SimpleDateFormat simpleDateFormat5 = null;
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat5);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime(dateTime6);
        int int11 = dateTime6.getDayOfYear();
        boolean boolean12 = dateTime3.isGreaterThan(dateTime6);
        net.ajaskey.common.DateTime dateTime14 = dateTime6.parse("November");
        int int15 = dateTime6.getDayOfMonth();
        int int16 = dateTime6.getMs();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1349");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("Thu 10-Apr-0002 10:43:23");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1350");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(34, 46, 11);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1351");
        net.ajaskey.common.Utils.TAB = "                                     53.00";
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1352");
        net.ajaskey.common.Utils.NL = "Thu 10-Apr-0002 10:43:18";
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1353");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("Thu 10-Apr-0002 10:43:42", false);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1354");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("                      -733,554.00", true);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1355");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("JanuaryThu 10-Apr-0002 10:43:43Thu 10-Apr-0002 10:43:43                                                                                               52.00Thu 10-Apr-0002 10:43:43hi!Thu 10-Apr-0002 10:43:43");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1356");
        java.lang.String str2 = net.ajaskey.common.Utils.fmt((double) (-738233L), 252);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Invalid fmt" + "'", str2, "Invalid fmt");
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1357");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        boolean boolean3 = dateTime1.isWeekday();
        int int4 = dateTime1.getHour();
        dateTime1.setFirstWorkDay();
        java.lang.String str6 = dateTime1.format();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(62190310608217L);
        boolean boolean9 = dateTime1.isGreaterThanOrEqual(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime1.getSdf();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "BAD-DATE-FORMAT" + "'", str6, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(simpleDateFormat10);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1358");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("5.00", "     10");
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        int int10 = dateTime6.getHour();
        java.text.SimpleDateFormat simpleDateFormat12 = null;
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat12);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean21 = dateTime15.isEqual(dateTime20);
        java.util.Calendar calendar22 = dateTime15.getCal();
        dateTime6.set(calendar22);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(calendar22);
        dateTime2.set(calendar22);
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime(100L);
        double double32 = dateTime29.getDeltaYears(dateTime31);
        int int33 = dateTime29.getHour();
        dateTime29.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat38 = null;
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat38);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double42 = dateTime39.getDeltaYears(dateTime41);
        boolean boolean43 = dateTime29.isEqual(dateTime41);
        java.text.SimpleDateFormat simpleDateFormat45 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat47 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat48 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime("", simpleDateFormat47, simpleDateFormat48);
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat45, simpleDateFormat48);
        dateTime29.setSdf(simpleDateFormat45);
        boolean boolean52 = net.ajaskey.common.Utils.sameDate(dateTime2, dateTime29);
        java.util.Date date53 = dateTime2.getTime();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1972.041095890411d) + "'", double32 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat45);
        org.junit.Assert.assertNotNull(simpleDateFormat47);
        org.junit.Assert.assertNotNull(simpleDateFormat48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 17:00:00 MST 1969");
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1359");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        double double13 = dateTime10.getDeltaYears(dateTime12);
        int int14 = dateTime10.getHour();
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime(100L);
        double double21 = dateTime18.getDeltaYears(dateTime20);
        int int22 = dateTime18.getHour();
        dateTime18.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat27 = null;
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat27);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double31 = dateTime28.getDeltaYears(dateTime30);
        boolean boolean32 = dateTime18.isEqual(dateTime30);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat38 = null;
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat38);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double42 = dateTime39.getDeltaYears(dateTime41);
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean47 = dateTime41.isEqual(dateTime46);
        java.util.Calendar calendar48 = dateTime41.getCal();
        boolean boolean49 = dateTime36.isLessThan(dateTime41);
        dateTime36.setFirstWorkDay();
        boolean boolean51 = dateTime18.sameDate(dateTime36);
        dateTime10.set(dateTime18);
        java.text.SimpleDateFormat simpleDateFormat54 = null;
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat54);
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double58 = dateTime55.getDeltaYears(dateTime57);
        boolean boolean59 = dateTime55.isWeekday();
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long64 = dateTime55.getDeltaDays(dateTime63);
        boolean boolean65 = dateTime18.isLessThanOrEqual(dateTime55);
        int int66 = dateTime18.getYear();
        boolean boolean67 = dateTime5.isLessThan(dateTime18);
        boolean boolean68 = dateTime18.isWeekday();
        net.ajaskey.common.DateTime dateTime72 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime74 = new net.ajaskey.common.DateTime(100L);
        double double75 = dateTime72.getDeltaYears(dateTime74);
        java.text.SimpleDateFormat simpleDateFormat77 = null;
        net.ajaskey.common.DateTime dateTime78 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat77);
        net.ajaskey.common.DateTime dateTime80 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double81 = dateTime78.getDeltaYears(dateTime80);
        boolean boolean82 = dateTime78.isWeekday();
        boolean boolean83 = dateTime72.sameDate(dateTime78);
        java.text.SimpleDateFormat simpleDateFormat85 = null;
        net.ajaskey.common.DateTime dateTime86 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat85);
        net.ajaskey.common.DateTime dateTime88 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double89 = dateTime86.getDeltaYears(dateTime88);
        net.ajaskey.common.DateTime dateTime93 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean94 = dateTime88.isEqual(dateTime93);
        dateTime72.set(dateTime93);
        int int96 = dateTime72.getDayOfMonth();
        java.util.Date date97 = dateTime72.getTime();
        net.ajaskey.common.DateTime dateTime98 = new net.ajaskey.common.DateTime(date97);
        long long99 = dateTime18.getDeltaMilliSeconds(dateTime98);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1972.041095890411d) + "'", double13 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1972.041095890411d) + "'", double21 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-1972.041095890411d) + "'", double75 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 10 + "'", int96 == 10);
        org.junit.Assert.assertNotNull(date97);
// flaky:         org.junit.Assert.assertEquals(date97.toString(), "Thu Apr 10 10:44:14 MST 2");
// flaky:         org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1360");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("5.00", "     10");
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        int int10 = dateTime6.getHour();
        java.text.SimpleDateFormat simpleDateFormat12 = null;
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat12);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean21 = dateTime15.isEqual(dateTime20);
        java.util.Calendar calendar22 = dateTime15.getCal();
        dateTime6.set(calendar22);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(calendar22);
        dateTime2.set(calendar22);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(calendar22);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime(calendar22);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime(calendar22);
        int int29 = dateTime28.getMinute();
        java.lang.String str30 = dateTime28.toFullString();
        java.text.SimpleDateFormat simpleDateFormat31 = dateTime28.getSdf();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str30, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertNull(simpleDateFormat31);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1361");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        boolean boolean3 = dateTime1.isWeekday();
        int int4 = dateTime1.getHour();
        java.text.SimpleDateFormat simpleDateFormat6 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime("January", simpleDateFormat6);
        dateTime1.setSdf(simpleDateFormat6);
        java.text.SimpleDateFormat simpleDateFormat9 = dateTime1.getSdf();
        java.util.Calendar calendar10 = dateTime1.getCal();
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime(calendar10);
        int int12 = dateTime11.getHour();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertNotNull(simpleDateFormat6);
        org.junit.Assert.assertNotNull(simpleDateFormat9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1362");
        java.text.SimpleDateFormat simpleDateFormat2 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat4 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat5 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("", simpleDateFormat4, simpleDateFormat5);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat2, simpleDateFormat5);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime("10-Apr-0002", simpleDateFormat5);
        java.text.SimpleDateFormat simpleDateFormat10 = null;
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat10);
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double14 = dateTime11.getDeltaYears(dateTime13);
        boolean boolean15 = dateTime11.isWeekday();
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long20 = dateTime11.getDeltaDays(dateTime19);
        boolean boolean21 = net.ajaskey.common.Utils.sameDate(dateTime8, dateTime11);
        java.lang.String str22 = dateTime11.getMonth();
        org.junit.Assert.assertNotNull(simpleDateFormat2);
        org.junit.Assert.assertNotNull(simpleDateFormat4);
        org.junit.Assert.assertNotNull(simpleDateFormat5);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UNKNOWN" + "'", str22, "UNKNOWN");
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1363");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readTextFile("          264", false);
        org.junit.Assert.assertNotNull(strList2);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1364");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        java.lang.String str3 = dateTime1.toString();
        java.util.Date date4 = dateTime1.getTime();
        int int5 = dateTime1.getDayOfYear();
        int int6 = dateTime1.getHour();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        int int9 = dateTime8.getMs();
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(100L);
        dateTime15.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str20 = dateTime15.getMonth();
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime(100L);
        dateTime22.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str27 = dateTime22.getMonth();
        int int28 = dateTime22.getMs();
        net.ajaskey.common.DateTime dateTime29 = dateTime15.copy(dateTime22);
        dateTime13.set(dateTime15);
        boolean boolean31 = dateTime8.isGreaterThanOrEqual(dateTime15);
        net.ajaskey.common.DateTime dateTime33 = dateTime15.parse("                       25");
        boolean boolean34 = dateTime1.isEqual(dateTime15);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "31-Dec-1969" + "'", str3, "31-Dec-1969");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 365 + "'", int5 == 365);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "January" + "'", str20, "January");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "January" + "'", str27, "January");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1365");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) (short) 1);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime(100L);
        double double8 = dateTime5.getDeltaYears(dateTime7);
        int int9 = dateTime5.getHour();
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(100L);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        int int17 = dateTime13.getHour();
        dateTime13.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat22 = null;
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat22);
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double26 = dateTime23.getDeltaYears(dateTime25);
        boolean boolean27 = dateTime13.isEqual(dateTime25);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat33 = null;
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat33);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double37 = dateTime34.getDeltaYears(dateTime36);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean42 = dateTime36.isEqual(dateTime41);
        java.util.Calendar calendar43 = dateTime36.getCal();
        boolean boolean44 = dateTime31.isLessThan(dateTime36);
        dateTime31.setFirstWorkDay();
        boolean boolean46 = dateTime13.sameDate(dateTime31);
        dateTime5.set(dateTime13);
        java.text.SimpleDateFormat simpleDateFormat49 = null;
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat49);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double53 = dateTime50.getDeltaYears(dateTime52);
        boolean boolean54 = dateTime50.isWeekday();
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long59 = dateTime50.getDeltaDays(dateTime58);
        boolean boolean60 = dateTime13.isLessThanOrEqual(dateTime50);
        int int61 = dateTime13.getYear();
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime67 = new net.ajaskey.common.DateTime(100L);
        double double68 = dateTime65.getDeltaYears(dateTime67);
        int int69 = dateTime65.getHour();
        dateTime65.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat74 = null;
        net.ajaskey.common.DateTime dateTime75 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat74);
        net.ajaskey.common.DateTime dateTime77 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double78 = dateTime75.getDeltaYears(dateTime77);
        boolean boolean79 = dateTime65.isEqual(dateTime77);
        int int80 = dateTime65.getMinute();
        dateTime65.setFirstWorkDay();
        long long82 = dateTime13.getDeltaDays(dateTime65);
        net.ajaskey.common.DateTime dateTime86 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime88 = new net.ajaskey.common.DateTime(100L);
        double double89 = dateTime86.getDeltaYears(dateTime88);
        boolean boolean90 = dateTime88.isWeekday();
        net.ajaskey.common.DateTime dateTime93 = dateTime88.parse("           35", "UNKNOWN");
        boolean boolean94 = dateTime13.isLessThanOrEqual(dateTime93);
        dateTime1.set(dateTime93);
        net.ajaskey.common.DateTime dateTime96 = new net.ajaskey.common.DateTime(dateTime93);
        java.lang.String str97 = dateTime96.getMonth();
        java.text.SimpleDateFormat simpleDateFormat98 = dateTime96.getSdf();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1972.041095890411d) + "'", double8 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1972.041095890411d) + "'", double16 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1972.041095890411d) + "'", double68 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 44 + "'", int80 == 44);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-1972.041095890411d) + "'", double89 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "June" + "'", str97, "June");
        org.junit.Assert.assertNull(simpleDateFormat98);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1366");
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime(100L);
        double double8 = dateTime5.getDeltaYears(dateTime7);
        int int9 = dateTime5.getHour();
        dateTime5.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat14 = null;
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat14);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double18 = dateTime15.getDeltaYears(dateTime17);
        boolean boolean19 = dateTime5.isEqual(dateTime17);
        java.text.SimpleDateFormat simpleDateFormat21 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat23 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat24 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("", simpleDateFormat23, simpleDateFormat24);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat21, simpleDateFormat24);
        dateTime5.setSdf(simpleDateFormat21);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat34 = null;
        java.text.SimpleDateFormat simpleDateFormat35 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime("January", simpleDateFormat34, simpleDateFormat35);
        java.text.SimpleDateFormat simpleDateFormat39 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("January", simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("", simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime("", simpleDateFormat35, simpleDateFormat39);
        dateTime31.setSdf(simpleDateFormat35);
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime("December", simpleDateFormat21, simpleDateFormat35);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime("5.00", simpleDateFormat35);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime(100L);
        double double52 = dateTime49.getDeltaYears(dateTime51);
        int int53 = dateTime49.getHour();
        int int54 = dateTime49.getDayOfMonth();
        int int55 = dateTime49.getMinute();
        long long56 = dateTime45.getDeltaMilliSeconds(dateTime49);
        java.text.SimpleDateFormat simpleDateFormat59 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime60 = new net.ajaskey.common.DateTime("January", simpleDateFormat59);
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime("", simpleDateFormat59);
        dateTime61.setFirstWorkDay();
        int int63 = dateTime61.getMs();
        net.ajaskey.common.DateTime dateTime67 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime(100L);
        double double70 = dateTime67.getDeltaYears(dateTime69);
        java.text.SimpleDateFormat simpleDateFormat72 = null;
        net.ajaskey.common.DateTime dateTime73 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat72);
        net.ajaskey.common.DateTime dateTime75 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double76 = dateTime73.getDeltaYears(dateTime75);
        boolean boolean77 = dateTime73.isWeekday();
        boolean boolean78 = dateTime67.sameDate(dateTime73);
        java.text.SimpleDateFormat simpleDateFormat80 = null;
        net.ajaskey.common.DateTime dateTime81 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat80);
        net.ajaskey.common.DateTime dateTime83 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double84 = dateTime81.getDeltaYears(dateTime83);
        net.ajaskey.common.DateTime dateTime88 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean89 = dateTime83.isEqual(dateTime88);
        dateTime67.set(dateTime88);
        java.lang.String str91 = dateTime88.toString();
        dateTime61.set(dateTime88);
        net.ajaskey.common.DateTime dateTime93 = dateTime45.copy(dateTime61);
        java.util.Calendar calendar94 = dateTime45.getCal();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1972.041095890411d) + "'", double8 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat21);
        org.junit.Assert.assertNotNull(simpleDateFormat23);
        org.junit.Assert.assertNotNull(simpleDateFormat24);
        org.junit.Assert.assertNotNull(simpleDateFormat35);
        org.junit.Assert.assertNotNull(simpleDateFormat39);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1972.041095890411d) + "'", double52 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 44 + "'", int55 == 44);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(simpleDateFormat59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-1972.041095890411d) + "'", double70 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "10-Apr-0002" + "'", str91, "10-Apr-0002");
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNull(calendar94);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1367");
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("Mon 06-Jan-0100 17:00:00", "Thu 10-Apr-0002 10:43:29");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'T'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1368");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("Wed 12-Apr-0139 10:43:33");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1369");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("Tuesday");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1370");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime(100L);
        int int3 = dateTime2.getMs();
        java.text.SimpleDateFormat simpleDateFormat4 = net.ajaskey.common.Utils.sdf;
        dateTime2.setSdf(simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat4);
        java.text.SimpleDateFormat simpleDateFormat8 = null;
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double12 = dateTime9.getDeltaYears(dateTime11);
        boolean boolean13 = dateTime11.isNull();
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat15);
        dateTime16.set((int) ' ', 0, 11);
        boolean boolean21 = dateTime11.isGreaterThanOrEqual(dateTime16);
        double double22 = dateTime6.getDeltaYears(dateTime11);
        java.text.SimpleDateFormat simpleDateFormat24 = null;
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat24);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double28 = dateTime25.getDeltaYears(dateTime27);
        boolean boolean29 = dateTime27.isNull();
        boolean boolean30 = dateTime11.isGreaterThan(dateTime27);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime(dateTime11);
        int int32 = dateTime31.getDayOfMonth();
        java.lang.String str33 = dateTime31.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat4);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 31 + "'", int32 == 31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "31-Dec-1969" + "'", str33, "31-Dec-1969");
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1371");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime(100L);
        int int3 = dateTime2.getMs();
        java.text.SimpleDateFormat simpleDateFormat4 = net.ajaskey.common.Utils.sdf;
        dateTime2.setSdf(simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime((long) 53);
        boolean boolean9 = dateTime8.isWeekday();
        boolean boolean10 = dateTime6.sameDate(dateTime8);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime(100L);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        java.text.SimpleDateFormat simpleDateFormat21 = dateTime17.getSdf();
        boolean boolean22 = dateTime12.isLessThanOrEqual(dateTime17);
        java.text.SimpleDateFormat simpleDateFormat24 = null;
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat24);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double28 = dateTime25.getDeltaYears(dateTime27);
        boolean boolean29 = dateTime25.isWeekday();
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long34 = dateTime25.getDeltaDays(dateTime33);
        long long35 = dateTime12.getDeltaDays(dateTime33);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime(100L);
        dateTime37.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean42 = dateTime37.isWeekday();
        int int43 = dateTime12.getYears(dateTime37);
        java.text.SimpleDateFormat simpleDateFormat45 = null;
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat45);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double49 = dateTime46.getDeltaYears(dateTime48);
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean54 = dateTime48.isEqual(dateTime53);
        int int55 = dateTime48.getDayOfWeek();
        boolean boolean56 = dateTime37.isLessThan(dateTime48);
        boolean boolean57 = dateTime6.isLessThanOrEqual(dateTime37);
        int int58 = dateTime6.getHour();
        java.lang.String str59 = dateTime6.getDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1972.041095890411d) + "'", double20 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 719795L + "'", long35 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1870) + "'", int43 == (-1870));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UNKNOWN" + "'", str59, "UNKNOWN");
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1372");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("Thu 10-Apr-0002 10:43:47", false);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1373");
        java.util.Date date0 = null;
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(date0);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime(100L);
        double double8 = dateTime5.getDeltaYears(dateTime7);
        int int9 = dateTime5.getHour();
        java.text.SimpleDateFormat simpleDateFormat11 = null;
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat11);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double15 = dateTime12.getDeltaYears(dateTime14);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean20 = dateTime14.isEqual(dateTime19);
        java.util.Calendar calendar21 = dateTime14.getCal();
        dateTime5.set(calendar21);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime(calendar21);
        net.ajaskey.common.DateTime dateTime24 = dateTime1.copy(dateTime23);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime(100L);
        double double31 = dateTime28.getDeltaYears(dateTime30);
        boolean boolean32 = dateTime30.isWeekday();
        int int33 = dateTime30.getDayOfYear();
        long long34 = dateTime24.getDeltaMilliSeconds(dateTime30);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime(100L);
        double double41 = dateTime38.getDeltaYears(dateTime40);
        int int42 = dateTime38.getHour();
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime(100L);
        double double49 = dateTime46.getDeltaYears(dateTime48);
        int int50 = dateTime46.getHour();
        dateTime46.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat55 = null;
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat55);
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double59 = dateTime56.getDeltaYears(dateTime58);
        boolean boolean60 = dateTime46.isEqual(dateTime58);
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat66 = null;
        net.ajaskey.common.DateTime dateTime67 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat66);
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double70 = dateTime67.getDeltaYears(dateTime69);
        net.ajaskey.common.DateTime dateTime74 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean75 = dateTime69.isEqual(dateTime74);
        java.util.Calendar calendar76 = dateTime69.getCal();
        boolean boolean77 = dateTime64.isLessThan(dateTime69);
        dateTime64.setFirstWorkDay();
        boolean boolean79 = dateTime46.sameDate(dateTime64);
        dateTime38.set(dateTime46);
        java.text.SimpleDateFormat simpleDateFormat82 = null;
        net.ajaskey.common.DateTime dateTime83 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat82);
        net.ajaskey.common.DateTime dateTime85 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double86 = dateTime83.getDeltaYears(dateTime85);
        boolean boolean87 = dateTime83.isWeekday();
        net.ajaskey.common.DateTime dateTime91 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long92 = dateTime83.getDeltaDays(dateTime91);
        boolean boolean93 = dateTime46.isLessThanOrEqual(dateTime83);
        long long94 = dateTime30.getDeltaDays(dateTime46);
        net.ajaskey.common.DateTime dateTime96 = dateTime30.parse("-716,608.00");
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.DateTime dateTime99 = dateTime96.parse("                                        33", "January          264          264                                                                                               52.00          264hi!          264");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1972.041095890411d) + "'", double8 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1972.041095890411d) + "'", double31 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 365 + "'", int33 == 365);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1972.041095890411d) + "'", double41 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1972.041095890411d) + "'", double49 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(calendar76);
        org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 719795L + "'", long94 == 719795L);
        org.junit.Assert.assertNull(dateTime96);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1374");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        java.util.Calendar calendar11 = dateTime4.getCal();
        java.lang.String str12 = dateTime4.format();
        dateTime4.add(12, 2020);
        int int16 = dateTime4.getDayOfYear();
        dateTime4.add(177, (-1870));
        int int20 = dateTime4.getDayOfYear();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "BAD-DATE-FORMAT" + "'", str12, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 365 + "'", int16 == 365);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 365 + "'", int20 == 365);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1375");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        java.text.SimpleDateFormat simpleDateFormat13 = null;
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat13);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        boolean boolean18 = dateTime14.isWeekday();
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long23 = dateTime14.getDeltaDays(dateTime22);
        long long24 = dateTime1.getDeltaDays(dateTime22);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(100L);
        dateTime26.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean31 = dateTime26.isWeekday();
        int int32 = dateTime1.getYears(dateTime26);
        java.text.SimpleDateFormat simpleDateFormat34 = null;
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat34);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double38 = dateTime35.getDeltaYears(dateTime37);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean43 = dateTime37.isEqual(dateTime42);
        int int44 = dateTime37.getDayOfWeek();
        boolean boolean45 = dateTime26.isLessThan(dateTime37);
        java.lang.Class<?> wildcardClass46 = dateTime37.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 719795L + "'", long24 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1870) + "'", int32 == (-1870));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1376");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("5.00", "     10");
        java.text.SimpleDateFormat simpleDateFormat3 = dateTime2.getSdf();
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean8 = dateTime7.isNull();
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime();
        boolean boolean10 = dateTime7.sameDate(dateTime9);
        dateTime9.set(43, (int) (byte) 1, 12);
        double double15 = dateTime2.getDeltaYears(dateTime9);
        java.text.SimpleDateFormat simpleDateFormat17 = null;
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat17);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double21 = dateTime18.getDeltaYears(dateTime20);
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean26 = dateTime20.isEqual(dateTime25);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime(100L);
        int int29 = dateTime28.getMs();
        boolean boolean30 = dateTime25.isGreaterThanOrEqual(dateTime28);
        java.text.SimpleDateFormat simpleDateFormat32 = null;
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat32);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double36 = dateTime33.getDeltaYears(dateTime35);
        boolean boolean37 = dateTime33.isWeekday();
        boolean boolean38 = dateTime28.isLessThanOrEqual(dateTime33);
        java.text.SimpleDateFormat simpleDateFormat40 = null;
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat40);
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double44 = dateTime41.getDeltaYears(dateTime43);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean49 = dateTime43.isEqual(dateTime48);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime(100L);
        int int52 = dateTime51.getMs();
        boolean boolean53 = dateTime48.isGreaterThanOrEqual(dateTime51);
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime(100L);
        dateTime55.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime(100L);
        double double66 = dateTime63.getDeltaYears(dateTime65);
        boolean boolean67 = dateTime65.isWeekday();
        java.util.Date date68 = dateTime65.getTime();
        dateTime55.set(dateTime65);
        boolean boolean70 = net.ajaskey.common.Utils.sameDate(dateTime48, dateTime55);
        boolean boolean71 = dateTime28.isEqual(dateTime55);
        net.ajaskey.common.DateTime dateTime75 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat78 = null;
        java.text.SimpleDateFormat simpleDateFormat79 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime80 = new net.ajaskey.common.DateTime("January", simpleDateFormat78, simpleDateFormat79);
        java.text.SimpleDateFormat simpleDateFormat83 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime84 = new net.ajaskey.common.DateTime("January", simpleDateFormat83);
        net.ajaskey.common.DateTime dateTime85 = new net.ajaskey.common.DateTime("", simpleDateFormat83);
        net.ajaskey.common.DateTime dateTime86 = new net.ajaskey.common.DateTime("", simpleDateFormat79, simpleDateFormat83);
        dateTime75.setSdf(simpleDateFormat79);
        dateTime55.setSdf(simpleDateFormat79);
        dateTime2.setSdf(simpleDateFormat79);
        org.junit.Assert.assertNull(simpleDateFormat3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1972.041095890411d) + "'", double66 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(simpleDateFormat79);
        org.junit.Assert.assertNotNull(simpleDateFormat83);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1377");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) 31);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1378");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        java.lang.String str3 = dateTime1.toString();
        int int4 = dateTime1.getDayOfYear();
        java.text.SimpleDateFormat simpleDateFormat6 = null;
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat6);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double10 = dateTime7.getDeltaYears(dateTime9);
        boolean boolean11 = dateTime7.isWeekday();
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long16 = dateTime7.getDeltaDays(dateTime15);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime(dateTime7);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime(100L);
        double double24 = dateTime21.getDeltaYears(dateTime23);
        boolean boolean25 = dateTime23.isWeekday();
        java.util.Date date26 = dateTime23.getTime();
        dateTime7.set(date26);
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime(100L);
        int int30 = dateTime29.getMs();
        java.lang.String str31 = dateTime29.toString();
        boolean boolean32 = dateTime7.isLessThanOrEqual(dateTime29);
        int int33 = dateTime7.getHour();
        boolean boolean34 = net.ajaskey.common.Utils.sameDate(dateTime1, dateTime7);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime(100L);
        int int37 = dateTime36.getMs();
        java.text.SimpleDateFormat simpleDateFormat38 = net.ajaskey.common.Utils.sdf;
        dateTime36.setSdf(simpleDateFormat38);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime("5.00", "     10");
        dateTime42.add((int) (short) 0, (int) 'a');
        int int46 = dateTime42.getDayOfMonth();
        java.lang.String str47 = dateTime42.toString();
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime(100L);
        double double54 = dateTime51.getDeltaYears(dateTime53);
        int int55 = dateTime51.getHour();
        java.text.SimpleDateFormat simpleDateFormat57 = null;
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat57);
        net.ajaskey.common.DateTime dateTime60 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double61 = dateTime58.getDeltaYears(dateTime60);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean66 = dateTime60.isEqual(dateTime65);
        java.util.Calendar calendar67 = dateTime60.getCal();
        java.lang.String str68 = dateTime60.format();
        net.ajaskey.common.DateTime dateTime69 = null;
        long long70 = dateTime60.getDeltaDays(dateTime69);
        int int71 = dateTime60.getSecond();
        net.ajaskey.common.DateTime dateTime75 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime77 = new net.ajaskey.common.DateTime(100L);
        double double78 = dateTime75.getDeltaYears(dateTime77);
        java.text.SimpleDateFormat simpleDateFormat80 = null;
        net.ajaskey.common.DateTime dateTime81 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat80);
        net.ajaskey.common.DateTime dateTime83 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double84 = dateTime81.getDeltaYears(dateTime83);
        boolean boolean85 = dateTime81.isWeekday();
        boolean boolean86 = dateTime75.sameDate(dateTime81);
        int int87 = dateTime81.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime88 = dateTime60.copy(dateTime81);
        dateTime51.set(dateTime81);
        boolean boolean90 = dateTime42.isGreaterThan(dateTime81);
        boolean boolean91 = net.ajaskey.common.Utils.sameMonth(dateTime36, dateTime42);
        int int92 = dateTime36.getMs();
        boolean boolean93 = net.ajaskey.common.Utils.sameMonth(dateTime1, dateTime36);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "31-Dec-1969" + "'", str3, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 365 + "'", int4 == 365);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1972.041095890411d) + "'", double24 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "31-Dec-1969" + "'", str31, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat38);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1972.041095890411d) + "'", double54 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "BAD-DATE-FORMAT" + "'", str68, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-1972.041095890411d) + "'", double78 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1379");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        java.text.SimpleDateFormat simpleDateFormat13 = null;
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat13);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        boolean boolean18 = dateTime14.isWeekday();
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long23 = dateTime14.getDeltaDays(dateTime22);
        long long24 = dateTime1.getDeltaDays(dateTime22);
        java.lang.String str25 = dateTime22.toFullString();
        java.util.Calendar calendar26 = dateTime22.getCal();
        java.util.Calendar calendar27 = dateTime22.getCal();
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime(12, 42, (int) (byte) 1);
        net.ajaskey.common.DateTime dateTime34 = dateTime31.parse(" 1.00", "       262");
        boolean boolean35 = net.ajaskey.common.Utils.sameMonth(dateTime22, dateTime34);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = dateTime34.getDayOfWeek();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 719795L + "'", long24 == 719795L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Thu 10-Apr-0002 10:44:15" + "'", str25, "Thu 10-Apr-0002 10:44:15");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-62190310544513,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=15,MILLISECOND=487,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-62190310544513,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=15,MILLISECOND=487,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1380");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        boolean boolean14 = dateTime9.isGreaterThanOrEqual(dateTime12);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        dateTime16.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(100L);
        double double27 = dateTime24.getDeltaYears(dateTime26);
        boolean boolean28 = dateTime26.isWeekday();
        java.util.Date date29 = dateTime26.getTime();
        dateTime16.set(dateTime26);
        boolean boolean31 = net.ajaskey.common.Utils.sameDate(dateTime9, dateTime16);
        boolean boolean32 = dateTime9.isNull();
        java.text.SimpleDateFormat simpleDateFormat34 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat36 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat37 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime("", simpleDateFormat36, simpleDateFormat37);
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat34, simpleDateFormat37);
        dateTime9.setSdf(simpleDateFormat37);
        java.lang.String str41 = dateTime9.format();
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime(100L);
        int int44 = dateTime43.getMs();
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime(100L);
        double double51 = dateTime48.getDeltaYears(dateTime50);
        java.text.SimpleDateFormat simpleDateFormat52 = dateTime48.getSdf();
        boolean boolean53 = dateTime43.isLessThanOrEqual(dateTime48);
        int int54 = dateTime43.getMinute();
        int int55 = dateTime43.getMinute();
        java.util.Calendar calendar56 = null;
        dateTime43.set(calendar56);
        java.util.Calendar calendar58 = dateTime43.getCal();
        dateTime9.set(calendar58);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1972.041095890411d) + "'", double27 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat34);
        org.junit.Assert.assertNotNull(simpleDateFormat36);
        org.junit.Assert.assertNotNull(simpleDateFormat37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "10-Apr-0002" + "'", str41, "10-Apr-0002");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1972.041095890411d) + "'", double51 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1381");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        int int7 = dateTime3.getHour();
        java.text.SimpleDateFormat simpleDateFormat9 = null;
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double13 = dateTime10.getDeltaYears(dateTime12);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean18 = dateTime12.isEqual(dateTime17);
        java.util.Calendar calendar19 = dateTime12.getCal();
        java.lang.String str20 = dateTime12.format();
        net.ajaskey.common.DateTime dateTime21 = null;
        long long22 = dateTime12.getDeltaDays(dateTime21);
        int int23 = dateTime12.getSecond();
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime(100L);
        double double30 = dateTime27.getDeltaYears(dateTime29);
        java.text.SimpleDateFormat simpleDateFormat32 = null;
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat32);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double36 = dateTime33.getDeltaYears(dateTime35);
        boolean boolean37 = dateTime33.isWeekday();
        boolean boolean38 = dateTime27.sameDate(dateTime33);
        int int39 = dateTime33.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime40 = dateTime12.copy(dateTime33);
        dateTime3.set(dateTime33);
        int int42 = dateTime33.getSecond();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "BAD-DATE-FORMAT" + "'", str20, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1972.041095890411d) + "'", double30 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1382");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = net.ajaskey.common.Utils.ifmt(264, 0);
            org.junit.Assert.fail("Expected exception of type java.util.FormatFlagsConversionMismatchException; message: Conversion = s, Flags = 0");
        } catch (java.util.FormatFlagsConversionMismatchException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1383");
        net.ajaskey.common.Utils.NL = "                                    26";
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1384");
        java.lang.String str2 = net.ajaskey.common.Utils.fmt(0.0d, 238);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Invalid fmt" + "'", str2, "Invalid fmt");
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1385");
        java.util.Map<java.lang.String, java.lang.Integer> strMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = net.ajaskey.common.Utils.findName(strMap0, (java.lang.Integer) 57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1386");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        dateTime1.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str6 = dateTime1.getMonth();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        dateTime8.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str13 = dateTime8.getMonth();
        int int14 = dateTime8.getMs();
        net.ajaskey.common.DateTime dateTime15 = dateTime1.copy(dateTime8);
        int int16 = dateTime8.getSecond();
        dateTime8.set((int) (byte) 100, 0, 49);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "January" + "'", str6, "January");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "January" + "'", str13, "January");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1387");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        boolean boolean11 = dateTime4.isNull();
        int int12 = dateTime4.getHour();
        net.ajaskey.common.DateTime dateTime14 = dateTime4.parse("hi!");
        net.ajaskey.common.DateTime dateTime16 = dateTime4.parse("Invalid fmt");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = dateTime16.isWeekday();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNull(dateTime14);
        org.junit.Assert.assertNull(dateTime16);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1388");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("5.00", "     10");
        dateTime2.add((int) (short) 0, (int) 'a');
        int int6 = dateTime2.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        int int9 = dateTime8.getMs();
        int int10 = dateTime8.getHour();
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        boolean boolean21 = dateTime14.isLessThan(dateTime19);
        java.lang.String str22 = dateTime19.toFullString();
        dateTime19.add(10, (int) (byte) -1);
        java.text.SimpleDateFormat simpleDateFormat27 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat29 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat30 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime("", simpleDateFormat29, simpleDateFormat30);
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat27, simpleDateFormat30);
        boolean boolean33 = dateTime19.isGreaterThan(dateTime32);
        boolean boolean34 = dateTime8.isEqual(dateTime19);
        net.ajaskey.common.DateTime dateTime35 = null;
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime(dateTime35);
        dateTime36.set(42, 10, 10);
        java.util.Date date41 = dateTime36.getTime();
        net.ajaskey.common.DateTime dateTime42 = dateTime8.copy(dateTime36);
        net.ajaskey.common.DateTime dateTime43 = dateTime2.copy(dateTime8);
        int int44 = dateTime43.getHour();
        boolean boolean45 = dateTime43.isNull();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str22, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertNotNull(simpleDateFormat27);
        org.junit.Assert.assertNotNull(simpleDateFormat29);
        org.junit.Assert.assertNotNull(simpleDateFormat30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Sat Nov 10 10:44:15 MST 42");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1389");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt((-68), 264);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                                                                                                                                                                                                     -68" + "'", str2, "                                                                                                                                                                                                                                                                     -68");
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1390");
        java.util.zip.ZipOutputStream zipOutputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.Utils.writeToZipFile("JanuaryThu 10-Apr-0002 10:43:06Thu 10-Apr-0002 10:43:06                                                                                               52.00Thu 10-Apr-0002 10:43:06hi!Thu 10-Apr-0002 10:43:06", zipOutputStream1);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: JanuaryThu 10-Apr-0002 10:43:06Thu 10-Apr-0002 10:43:06                                                                                               52.00Thu 10-Apr-0002 10:43:06hi!Thu 10-Apr-0002 10:43:06 (The filename, directory name, or volume label syntax is incorrect)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1391");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        dateTime2.set((int) ' ', 0, 11);
        boolean boolean7 = dateTime2.isWeekday();
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime(100L);
        int int10 = dateTime9.getMs();
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        java.text.SimpleDateFormat simpleDateFormat18 = dateTime14.getSdf();
        boolean boolean19 = dateTime9.isLessThanOrEqual(dateTime14);
        java.util.Date date20 = dateTime14.getTime();
        dateTime2.set(date20);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime(100L);
        int int24 = dateTime23.getMs();
        int int25 = dateTime23.getHour();
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat31 = null;
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat31);
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double35 = dateTime32.getDeltaYears(dateTime34);
        boolean boolean36 = dateTime29.isLessThan(dateTime34);
        java.lang.String str37 = dateTime34.toFullString();
        dateTime34.add(10, (int) (byte) -1);
        java.text.SimpleDateFormat simpleDateFormat42 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat44 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat45 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime("", simpleDateFormat44, simpleDateFormat45);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat42, simpleDateFormat45);
        boolean boolean48 = dateTime34.isGreaterThan(dateTime47);
        boolean boolean49 = dateTime23.isEqual(dateTime34);
        int int50 = dateTime23.getDayOfYear();
        boolean boolean51 = dateTime2.isLessThanOrEqual(dateTime23);
        java.util.Date date52 = dateTime23.getTime();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1972.041095890411d) + "'", double17 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Thu Apr 10 10:44:15 MST 2");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str37, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertNotNull(simpleDateFormat42);
        org.junit.Assert.assertNotNull(simpleDateFormat44);
        org.junit.Assert.assertNotNull(simpleDateFormat45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 365 + "'", int50 == 365);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 17:00:00 MST 1969");
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1392");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        java.text.SimpleDateFormat simpleDateFormat4 = null;
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double8 = dateTime5.getDeltaYears(dateTime7);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean13 = dateTime7.isEqual(dateTime12);
        java.util.Calendar calendar14 = dateTime7.getCal();
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(calendar14);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(calendar14);
        dateTime1.set(calendar14);
        boolean boolean18 = dateTime1.isNull();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1393");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("         8.00");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1394");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        boolean boolean6 = dateTime2.isWeekday();
        java.text.SimpleDateFormat simpleDateFormat7 = dateTime2.getSdf();
        net.ajaskey.common.DateTime dateTime8 = null;
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime(dateTime8);
        dateTime9.set(42, 10, 10);
        java.util.Date date14 = dateTime9.getTime();
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(date14);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(date14);
        boolean boolean17 = dateTime16.isNull();
        java.util.Date date18 = dateTime16.getTime();
        dateTime2.set(date18);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime(date18);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(simpleDateFormat7);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 10 10:44:16 MST 42");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 10 10:44:16 MST 42");
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1395");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(594, 1969, 10);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1396");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) 'a', 1869, (int) (byte) 0);
        java.text.SimpleDateFormat simpleDateFormat5 = null;
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat5);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean14 = dateTime8.isEqual(dateTime13);
        java.util.Calendar calendar15 = dateTime8.getCal();
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(calendar15);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime(calendar15);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime(calendar15);
        java.text.SimpleDateFormat simpleDateFormat20 = null;
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat20);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double24 = dateTime21.getDeltaYears(dateTime23);
        boolean boolean25 = dateTime23.isNull();
        boolean boolean26 = net.ajaskey.common.Utils.sameDate(dateTime18, dateTime23);
        double double27 = dateTime3.getDeltaYears(dateTime18);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1718.3917808219178d) + "'", double27 == (-1718.3917808219178d));
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1397");
        java.lang.String str2 = net.ajaskey.common.Utils.fmt((double) 54, 26);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Invalid fmt" + "'", str2, "Invalid fmt");
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1398");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        java.text.SimpleDateFormat simpleDateFormat8 = null;
        java.text.SimpleDateFormat simpleDateFormat9 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("January", simpleDateFormat8, simpleDateFormat9);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime("Thursday", simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(dateTime11);
        boolean boolean13 = dateTime2.isEqual(dateTime11);
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat15);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double19 = dateTime16.getDeltaYears(dateTime18);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean24 = dateTime18.isEqual(dateTime23);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(100L);
        int int27 = dateTime26.getMs();
        boolean boolean28 = dateTime23.isGreaterThanOrEqual(dateTime26);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime(100L);
        dateTime30.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime(100L);
        double double41 = dateTime38.getDeltaYears(dateTime40);
        boolean boolean42 = dateTime40.isWeekday();
        java.util.Date date43 = dateTime40.getTime();
        dateTime30.set(dateTime40);
        boolean boolean45 = net.ajaskey.common.Utils.sameDate(dateTime23, dateTime30);
        dateTime23.add((int) '#', 6);
        int int49 = dateTime2.getYears(dateTime23);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime("5.00", "     10");
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime(100L);
        double double59 = dateTime56.getDeltaYears(dateTime58);
        int int60 = dateTime56.getHour();
        java.text.SimpleDateFormat simpleDateFormat62 = null;
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat62);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double66 = dateTime63.getDeltaYears(dateTime65);
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean71 = dateTime65.isEqual(dateTime70);
        java.util.Calendar calendar72 = dateTime65.getCal();
        dateTime56.set(calendar72);
        net.ajaskey.common.DateTime dateTime74 = new net.ajaskey.common.DateTime(calendar72);
        dateTime52.set(calendar72);
        dateTime2.set(dateTime52);
        int int77 = dateTime52.getYear();
        boolean boolean78 = dateTime52.isNull();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(simpleDateFormat9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1972.041095890411d) + "'", double41 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1972.041095890411d) + "'", double59 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1969 + "'", int77 == 1969);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1399");
        java.text.SimpleDateFormat simpleDateFormat4 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat5 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("", simpleDateFormat4, simpleDateFormat5);
        java.text.SimpleDateFormat simpleDateFormat8 = null;
        java.text.SimpleDateFormat simpleDateFormat9 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("January", simpleDateFormat8, simpleDateFormat9);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat4, simpleDateFormat9);
        java.text.SimpleDateFormat simpleDateFormat14 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat15 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("", simpleDateFormat14, simpleDateFormat15);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime(100L);
        int int19 = dateTime18.getMs();
        java.text.SimpleDateFormat simpleDateFormat20 = net.ajaskey.common.Utils.sdf;
        dateTime18.setSdf(simpleDateFormat20);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat15, simpleDateFormat20);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime("                             100", simpleDateFormat9, simpleDateFormat15);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime("Thu 10-Apr-0002 10:42:58", simpleDateFormat9);
        dateTime24.set((int) (byte) 10, 5, 42);
        int int29 = dateTime24.getHour();
        java.lang.String str30 = dateTime24.getDay();
        org.junit.Assert.assertNotNull(simpleDateFormat4);
        org.junit.Assert.assertNotNull(simpleDateFormat5);
        org.junit.Assert.assertNotNull(simpleDateFormat9);
        org.junit.Assert.assertNotNull(simpleDateFormat14);
        org.junit.Assert.assertNotNull(simpleDateFormat15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Saturday" + "'", str30, "Saturday");
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1400");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = net.ajaskey.common.Utils.lfmt((long) 23, 0);
            org.junit.Assert.fail("Expected exception of type java.util.FormatFlagsConversionMismatchException; message: Conversion = s, Flags = 0");
        } catch (java.util.FormatFlagsConversionMismatchException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1401");
        java.lang.String str2 = net.ajaskey.common.Utils.fmt((-1928.4246575342465d), 17);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Invalid fmt" + "'", str2, "Invalid fmt");
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1402");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        dateTime1.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime(100L);
        double double12 = dateTime9.getDeltaYears(dateTime11);
        boolean boolean13 = dateTime11.isWeekday();
        java.util.Date date14 = dateTime11.getTime();
        dateTime1.set(dateTime11);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime(100L);
        double double22 = dateTime19.getDeltaYears(dateTime21);
        int int23 = dateTime19.getHour();
        java.text.SimpleDateFormat simpleDateFormat25 = null;
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat25);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double29 = dateTime26.getDeltaYears(dateTime28);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean34 = dateTime28.isEqual(dateTime33);
        java.util.Calendar calendar35 = dateTime28.getCal();
        dateTime19.set(calendar35);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime(calendar35);
        boolean boolean38 = dateTime11.isGreaterThan(dateTime37);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean43 = dateTime42.isNull();
        java.lang.String str44 = dateTime42.getDay();
        java.text.SimpleDateFormat simpleDateFormat45 = dateTime42.getSdf();
        int int46 = dateTime42.getHour();
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime(dateTime42);
        boolean boolean48 = dateTime11.isGreaterThan(dateTime47);
        int int49 = dateTime11.getSecond();
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime(100L);
        double double56 = dateTime53.getDeltaYears(dateTime55);
        java.text.SimpleDateFormat simpleDateFormat58 = null;
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat58);
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double62 = dateTime59.getDeltaYears(dateTime61);
        boolean boolean63 = dateTime59.isWeekday();
        boolean boolean64 = dateTime53.sameDate(dateTime59);
        java.text.SimpleDateFormat simpleDateFormat66 = null;
        net.ajaskey.common.DateTime dateTime67 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat66);
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double70 = dateTime67.getDeltaYears(dateTime69);
        net.ajaskey.common.DateTime dateTime74 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean75 = dateTime69.isEqual(dateTime74);
        dateTime53.set(dateTime74);
        int int77 = dateTime74.getDayOfWeek();
        java.util.Date date78 = dateTime74.getTime();
        dateTime11.set(date78);
        int int80 = dateTime11.getMs();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1972.041095890411d) + "'", double12 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1972.041095890411d) + "'", double22 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Thursday" + "'", str44, "Thursday");
        org.junit.Assert.assertNull(simpleDateFormat45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1972.041095890411d) + "'", double56 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertNotNull(date78);
// flaky:         org.junit.Assert.assertEquals(date78.toString(), "Thu Apr 10 10:44:16 MST 2");
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 205 + "'", int80 == 205);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1403");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        java.util.Calendar calendar11 = dateTime4.getCal();
        java.lang.String str12 = dateTime4.format();
        net.ajaskey.common.DateTime dateTime13 = null;
        long long14 = dateTime4.getDeltaDays(dateTime13);
        int int15 = dateTime4.getSecond();
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime(100L);
        double double22 = dateTime19.getDeltaYears(dateTime21);
        java.text.SimpleDateFormat simpleDateFormat24 = null;
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat24);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double28 = dateTime25.getDeltaYears(dateTime27);
        boolean boolean29 = dateTime25.isWeekday();
        boolean boolean30 = dateTime19.sameDate(dateTime25);
        int int31 = dateTime25.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime32 = dateTime4.copy(dateTime25);
        java.text.SimpleDateFormat simpleDateFormat34 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime("1,969.00", simpleDateFormat34);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = dateTime32.isLessThanOrEqual(dateTime35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "BAD-DATE-FORMAT" + "'", str12, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1972.041095890411d) + "'", double22 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(dateTime32);
        org.junit.Assert.assertNotNull(simpleDateFormat34);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1404");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("5.00", "     10");
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        int int10 = dateTime6.getHour();
        java.text.SimpleDateFormat simpleDateFormat12 = null;
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat12);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean21 = dateTime15.isEqual(dateTime20);
        java.util.Calendar calendar22 = dateTime15.getCal();
        dateTime6.set(calendar22);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(calendar22);
        dateTime2.set(calendar22);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime(100L);
        int int28 = dateTime27.getMs();
        java.lang.String str29 = dateTime27.toString();
        java.lang.String str31 = dateTime27.format("         1");
        net.ajaskey.common.DateTime dateTime32 = dateTime2.copy(dateTime27);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime(dateTime2);
        net.ajaskey.common.DateTime dateTime34 = null;
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime(dateTime34);
        dateTime35.set(42, 10, 10);
        java.util.Date date40 = dateTime35.getTime();
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat46 = null;
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat46);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double50 = dateTime47.getDeltaYears(dateTime49);
        boolean boolean51 = dateTime44.isLessThan(dateTime49);
        java.lang.String str52 = dateTime49.toFullString();
        int int53 = dateTime49.getSecond();
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime(dateTime49);
        java.text.SimpleDateFormat simpleDateFormat56 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat57 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime("", simpleDateFormat56, simpleDateFormat57);
        net.ajaskey.common.DateTime dateTime62 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime(100L);
        double double65 = dateTime62.getDeltaYears(dateTime64);
        int int66 = dateTime62.getHour();
        java.text.SimpleDateFormat simpleDateFormat68 = null;
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat68);
        net.ajaskey.common.DateTime dateTime71 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double72 = dateTime69.getDeltaYears(dateTime71);
        net.ajaskey.common.DateTime dateTime76 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean77 = dateTime71.isEqual(dateTime76);
        java.util.Calendar calendar78 = dateTime71.getCal();
        dateTime62.set(calendar78);
        net.ajaskey.common.DateTime dateTime80 = new net.ajaskey.common.DateTime(calendar78);
        boolean boolean81 = dateTime58.isLessThan(dateTime80);
        double double82 = dateTime49.getDeltaYears(dateTime80);
        net.ajaskey.common.DateTime dateTime83 = dateTime35.copy(dateTime80);
        dateTime33.set(dateTime35);
        int int85 = dateTime35.getDayOfWeek();
        java.text.SimpleDateFormat simpleDateFormat88 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime89 = new net.ajaskey.common.DateTime("1,969.00", simpleDateFormat88);
        java.text.SimpleDateFormat simpleDateFormat93 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat94 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime95 = new net.ajaskey.common.DateTime("", simpleDateFormat93, simpleDateFormat94);
        net.ajaskey.common.DateTime dateTime96 = new net.ajaskey.common.DateTime("Thu 10-Apr-0002 10:42:54", simpleDateFormat93);
        net.ajaskey.common.DateTime dateTime97 = new net.ajaskey.common.DateTime("Thu 10-Apr-0002 10:43:09", simpleDateFormat93);
        net.ajaskey.common.DateTime dateTime98 = new net.ajaskey.common.DateTime("   -18,438", simpleDateFormat88, simpleDateFormat93);
        dateTime35.setSdf(simpleDateFormat88);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "31-Dec-1969" + "'", str29, "31-Dec-1969");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "         1" + "'", str31, "         1");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Sat Nov 10 10:44:16 MST 42");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str52, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(simpleDateFormat56);
        org.junit.Assert.assertNotNull(simpleDateFormat57);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-1972.041095890411d) + "'", double65 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(calendar78);
        org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 7 + "'", int85 == 7);
        org.junit.Assert.assertNotNull(simpleDateFormat88);
        org.junit.Assert.assertNotNull(simpleDateFormat93);
        org.junit.Assert.assertNotNull(simpleDateFormat94);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1405");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("Thu 10-Apr-0002 10:43:02", true);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1406");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        java.util.Calendar calendar11 = dateTime4.getCal();
        java.lang.String str12 = dateTime4.format();
        net.ajaskey.common.DateTime dateTime13 = null;
        long long14 = dateTime4.getDeltaDays(dateTime13);
        int int15 = dateTime4.getSecond();
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime(100L);
        int int18 = dateTime17.getMs();
        boolean boolean19 = dateTime17.isNull();
        java.util.Calendar calendar20 = dateTime17.getCal();
        dateTime4.set(calendar20);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime(calendar20);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((long) (short) 0);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(100L);
        int int27 = dateTime26.getMs();
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime(100L);
        double double34 = dateTime31.getDeltaYears(dateTime33);
        java.text.SimpleDateFormat simpleDateFormat35 = dateTime31.getSdf();
        boolean boolean36 = dateTime26.isLessThanOrEqual(dateTime31);
        java.text.SimpleDateFormat simpleDateFormat38 = null;
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat38);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double42 = dateTime39.getDeltaYears(dateTime41);
        boolean boolean43 = dateTime39.isWeekday();
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long48 = dateTime39.getDeltaDays(dateTime47);
        long long49 = dateTime26.getDeltaDays(dateTime47);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime(100L);
        dateTime51.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean56 = dateTime51.isWeekday();
        int int57 = dateTime26.getYears(dateTime51);
        int int58 = dateTime26.getYear();
        java.util.Calendar calendar59 = dateTime26.getCal();
        net.ajaskey.common.DateTime dateTime60 = dateTime24.copy(dateTime26);
        java.util.Calendar calendar61 = dateTime26.getCal();
        net.ajaskey.common.DateTime dateTime62 = new net.ajaskey.common.DateTime(calendar61);
        dateTime22.set(calendar61);
        java.lang.Class<?> wildcardClass64 = dateTime22.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "BAD-DATE-FORMAT" + "'", str12, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1972.041095890411d) + "'", double34 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 719795L + "'", long49 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1870) + "'", int57 == (-1870));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1969 + "'", int58 == 1969);
        org.junit.Assert.assertNotNull(calendar59);
        org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1407");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        java.lang.String str3 = dateTime1.toString();
        int int4 = dateTime1.getDayOfYear();
        java.text.SimpleDateFormat simpleDateFormat6 = null;
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat6);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double10 = dateTime7.getDeltaYears(dateTime9);
        boolean boolean11 = dateTime7.isWeekday();
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long16 = dateTime7.getDeltaDays(dateTime15);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime(dateTime7);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime(100L);
        double double24 = dateTime21.getDeltaYears(dateTime23);
        boolean boolean25 = dateTime23.isWeekday();
        java.util.Date date26 = dateTime23.getTime();
        dateTime7.set(date26);
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime(100L);
        int int30 = dateTime29.getMs();
        java.lang.String str31 = dateTime29.toString();
        boolean boolean32 = dateTime7.isLessThanOrEqual(dateTime29);
        int int33 = dateTime7.getHour();
        boolean boolean34 = net.ajaskey.common.Utils.sameDate(dateTime1, dateTime7);
        java.text.SimpleDateFormat simpleDateFormat36 = null;
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat36);
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double40 = dateTime37.getDeltaYears(dateTime39);
        boolean boolean41 = dateTime37.isWeekday();
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long46 = dateTime37.getDeltaDays(dateTime45);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime(dateTime37);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime(100L);
        double double54 = dateTime51.getDeltaYears(dateTime53);
        int int55 = dateTime51.getHour();
        java.text.SimpleDateFormat simpleDateFormat57 = null;
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat57);
        net.ajaskey.common.DateTime dateTime60 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double61 = dateTime58.getDeltaYears(dateTime60);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean66 = dateTime60.isEqual(dateTime65);
        java.util.Calendar calendar67 = dateTime60.getCal();
        java.lang.String str68 = dateTime60.format();
        net.ajaskey.common.DateTime dateTime69 = null;
        long long70 = dateTime60.getDeltaDays(dateTime69);
        int int71 = dateTime60.getSecond();
        net.ajaskey.common.DateTime dateTime75 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime77 = new net.ajaskey.common.DateTime(100L);
        double double78 = dateTime75.getDeltaYears(dateTime77);
        java.text.SimpleDateFormat simpleDateFormat80 = null;
        net.ajaskey.common.DateTime dateTime81 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat80);
        net.ajaskey.common.DateTime dateTime83 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double84 = dateTime81.getDeltaYears(dateTime83);
        boolean boolean85 = dateTime81.isWeekday();
        boolean boolean86 = dateTime75.sameDate(dateTime81);
        int int87 = dateTime81.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime88 = dateTime60.copy(dateTime81);
        dateTime51.set(dateTime81);
        dateTime47.set(dateTime81);
        boolean boolean91 = dateTime1.isGreaterThanOrEqual(dateTime81);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "31-Dec-1969" + "'", str3, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 365 + "'", int4 == 365);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1972.041095890411d) + "'", double24 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "31-Dec-1969" + "'", str31, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1972.041095890411d) + "'", double54 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "BAD-DATE-FORMAT" + "'", str68, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-1972.041095890411d) + "'", double78 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1408");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt((int) (byte) 0, 59);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                          0" + "'", str2, "                                                          0");
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1409");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("                                             2,020.00", false);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1410");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("                                                                                                                                                    0.00");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1411");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        java.lang.String str3 = dateTime1.format();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "BAD-DATE-FORMAT" + "'", str3, "BAD-DATE-FORMAT");
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1412");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("Fri 01-Jul-0001 10:44:03");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1413");
        java.lang.String[] strArray5 = new java.lang.String[] { "           4", "           6" };
        java.util.List<java.io.File> fileList6 = net.ajaskey.common.Utils.getDirTree("                                 42", strArray5);
        java.util.List<java.io.File> fileList7 = net.ajaskey.common.Utils.getDirTree("                                                                                                                                                                                                                                                                                                                                                                          100", strArray5);
        java.util.List<java.io.File> fileList8 = net.ajaskey.common.Utils.getDirTree("                                                                                                                                                                                                                                                                      35", strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(fileList6);
        org.junit.Assert.assertNull(fileList7);
        org.junit.Assert.assertNull(fileList8);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1414");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("5.00", "     10");
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        int int10 = dateTime6.getHour();
        java.text.SimpleDateFormat simpleDateFormat12 = null;
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat12);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean21 = dateTime15.isEqual(dateTime20);
        java.util.Calendar calendar22 = dateTime15.getCal();
        dateTime6.set(calendar22);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(calendar22);
        dateTime2.set(calendar22);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime(100L);
        int int28 = dateTime27.getMs();
        java.lang.String str29 = dateTime27.toString();
        java.lang.String str31 = dateTime27.format("         1");
        net.ajaskey.common.DateTime dateTime32 = dateTime2.copy(dateTime27);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime(dateTime2);
        net.ajaskey.common.DateTime dateTime34 = null;
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime(dateTime34);
        dateTime35.set(42, 10, 10);
        java.util.Date date40 = dateTime35.getTime();
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat46 = null;
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat46);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double50 = dateTime47.getDeltaYears(dateTime49);
        boolean boolean51 = dateTime44.isLessThan(dateTime49);
        java.lang.String str52 = dateTime49.toFullString();
        int int53 = dateTime49.getSecond();
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime(dateTime49);
        java.text.SimpleDateFormat simpleDateFormat56 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat57 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime("", simpleDateFormat56, simpleDateFormat57);
        net.ajaskey.common.DateTime dateTime62 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime(100L);
        double double65 = dateTime62.getDeltaYears(dateTime64);
        int int66 = dateTime62.getHour();
        java.text.SimpleDateFormat simpleDateFormat68 = null;
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat68);
        net.ajaskey.common.DateTime dateTime71 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double72 = dateTime69.getDeltaYears(dateTime71);
        net.ajaskey.common.DateTime dateTime76 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean77 = dateTime71.isEqual(dateTime76);
        java.util.Calendar calendar78 = dateTime71.getCal();
        dateTime62.set(calendar78);
        net.ajaskey.common.DateTime dateTime80 = new net.ajaskey.common.DateTime(calendar78);
        boolean boolean81 = dateTime58.isLessThan(dateTime80);
        double double82 = dateTime49.getDeltaYears(dateTime80);
        net.ajaskey.common.DateTime dateTime83 = dateTime35.copy(dateTime80);
        dateTime33.set(dateTime35);
        boolean boolean85 = dateTime35.isWeekday();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "31-Dec-1969" + "'", str29, "31-Dec-1969");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "         1" + "'", str31, "         1");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Sat Nov 10 10:44:16 MST 42");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str52, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(simpleDateFormat56);
        org.junit.Assert.assertNotNull(simpleDateFormat57);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-1972.041095890411d) + "'", double65 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(calendar78);
        org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1415");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        boolean boolean12 = dateTime1.isWeekday();
        java.util.Calendar calendar13 = dateTime1.getCal();
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat15);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double19 = dateTime16.getDeltaYears(dateTime18);
        boolean boolean20 = dateTime16.isWeekday();
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long25 = dateTime16.getDeltaDays(dateTime24);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(dateTime16);
        dateTime26.setFirstWorkDay();
        long long28 = dateTime1.getDeltaDays(dateTime26);
        java.lang.String str29 = dateTime26.getMonth();
        int int30 = dateTime26.getYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-18438L) + "'", long28 == (-18438L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "June" + "'", str29, "June");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2020 + "'", int30 == 2020);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1416");
        net.ajaskey.common.DateTime dateTime0 = null;
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(dateTime0);
        dateTime1.set(42, 10, 10);
        java.lang.String str7 = dateTime1.format("                                                                                                                                                                                                                                                                                                                                                                        1,869");
        java.lang.String str8 = dateTime1.toFullString();
        int int9 = dateTime1.getYear();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                                                                                                                                                                                                                                                                                                                                        1,869" + "'", str7, "                                                                                                                                                                                                                                                                                                                                                                        1,869");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Sat 10-Nov-0042 10:44:16" + "'", str8, "Sat 10-Nov-0042 10:44:16");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 42 + "'", int9 == 42);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1417");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        dateTime1.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str6 = dateTime1.getMonth();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        dateTime8.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str13 = dateTime8.getMonth();
        int int14 = dateTime8.getMs();
        net.ajaskey.common.DateTime dateTime15 = dateTime1.copy(dateTime8);
        int int16 = dateTime8.getSecond();
        java.util.Date date17 = null;
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime(date17);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        double double25 = dateTime22.getDeltaYears(dateTime24);
        int int26 = dateTime22.getHour();
        java.text.SimpleDateFormat simpleDateFormat28 = null;
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat28);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double32 = dateTime29.getDeltaYears(dateTime31);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean37 = dateTime31.isEqual(dateTime36);
        java.util.Calendar calendar38 = dateTime31.getCal();
        dateTime22.set(calendar38);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime(calendar38);
        net.ajaskey.common.DateTime dateTime41 = dateTime18.copy(dateTime40);
        boolean boolean42 = dateTime8.isLessThan(dateTime40);
        java.text.SimpleDateFormat simpleDateFormat44 = null;
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat44);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double48 = dateTime45.getDeltaYears(dateTime47);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean53 = dateTime47.isEqual(dateTime52);
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime(100L);
        int int56 = dateTime55.getMs();
        boolean boolean57 = dateTime52.isGreaterThanOrEqual(dateTime55);
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime(100L);
        dateTime59.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime67 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime(100L);
        double double70 = dateTime67.getDeltaYears(dateTime69);
        boolean boolean71 = dateTime69.isWeekday();
        java.util.Date date72 = dateTime69.getTime();
        dateTime59.set(dateTime69);
        boolean boolean74 = net.ajaskey.common.Utils.sameDate(dateTime52, dateTime59);
        java.lang.String str76 = dateTime59.format("                             100");
        int int77 = dateTime59.getDayOfWeek();
        net.ajaskey.common.DateTime dateTime79 = new net.ajaskey.common.DateTime(100L);
        int int80 = dateTime79.getMs();
        java.lang.String str81 = dateTime79.toString();
        java.util.Date date82 = dateTime79.getTime();
        java.util.Date date83 = dateTime79.getTime();
        dateTime59.set(date83);
        dateTime8.set(date83);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "January" + "'", str6, "January");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "January" + "'", str13, "January");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1972.041095890411d) + "'", double25 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-1972.041095890411d) + "'", double70 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "                             100" + "'", str76, "                             100");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 100 + "'", int80 == 100);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "31-Dec-1969" + "'", str81, "31-Dec-1969");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Wed Dec 31 17:00:00 MST 1969");
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1418");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        long long6 = dateTime3.getDeltaDays(dateTime5);
        int int7 = dateTime3.getHour();
        dateTime3.add((int) (byte) 100, (int) (byte) 0);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime(100L);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        java.text.SimpleDateFormat simpleDateFormat21 = dateTime17.getSdf();
        boolean boolean22 = dateTime12.isLessThanOrEqual(dateTime17);
        java.text.SimpleDateFormat simpleDateFormat24 = null;
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat24);
        boolean boolean26 = dateTime17.isLessThanOrEqual(dateTime25);
        boolean boolean27 = dateTime3.sameDate(dateTime17);
        dateTime17.add(17, 86);
        net.ajaskey.common.DateTime dateTime32 = dateTime17.parse("    -36,794");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-719795L) + "'", long6 == (-719795L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1972.041095890411d) + "'", double20 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(dateTime32);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1419");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        dateTime2.set((int) ' ', 0, 11);
        boolean boolean7 = dateTime2.isWeekday();
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime(100L);
        int int10 = dateTime9.getMs();
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        java.text.SimpleDateFormat simpleDateFormat18 = dateTime14.getSdf();
        boolean boolean19 = dateTime9.isLessThanOrEqual(dateTime14);
        java.util.Date date20 = dateTime14.getTime();
        dateTime2.set(date20);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime(date20);
        java.util.Date date23 = dateTime22.getTime();
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(date23);
        java.text.SimpleDateFormat simpleDateFormat28 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat29 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime("", simpleDateFormat28, simpleDateFormat29);
        java.text.SimpleDateFormat simpleDateFormat32 = null;
        java.text.SimpleDateFormat simpleDateFormat33 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime("January", simpleDateFormat32, simpleDateFormat33);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat28, simpleDateFormat33);
        java.text.SimpleDateFormat simpleDateFormat38 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat39 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("", simpleDateFormat38, simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime(100L);
        int int43 = dateTime42.getMs();
        java.text.SimpleDateFormat simpleDateFormat44 = net.ajaskey.common.Utils.sdf;
        dateTime42.setSdf(simpleDateFormat44);
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat39, simpleDateFormat44);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime("                             100", simpleDateFormat33, simpleDateFormat39);
        java.text.SimpleDateFormat simpleDateFormat48 = dateTime47.getSdf();
        boolean boolean49 = dateTime24.isEqual(dateTime47);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime(100L);
        int int52 = dateTime51.getMs();
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime(100L);
        double double59 = dateTime56.getDeltaYears(dateTime58);
        java.text.SimpleDateFormat simpleDateFormat60 = dateTime56.getSdf();
        boolean boolean61 = dateTime51.isLessThanOrEqual(dateTime56);
        boolean boolean62 = dateTime56.isWeekday();
        boolean boolean63 = dateTime47.isGreaterThanOrEqual(dateTime56);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime(100L);
        int int66 = dateTime65.getMs();
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime72 = new net.ajaskey.common.DateTime(100L);
        double double73 = dateTime70.getDeltaYears(dateTime72);
        java.text.SimpleDateFormat simpleDateFormat74 = dateTime70.getSdf();
        boolean boolean75 = dateTime65.isLessThanOrEqual(dateTime70);
        int int76 = dateTime65.getMinute();
        int int77 = dateTime65.getMs();
        double double78 = dateTime47.getDeltaYears(dateTime65);
        java.lang.String str79 = dateTime47.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1972.041095890411d) + "'", double17 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Thu Apr 10 10:44:16 MST 2");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Thu Apr 10 10:44:16 MST 2");
        org.junit.Assert.assertNotNull(simpleDateFormat28);
        org.junit.Assert.assertNotNull(simpleDateFormat29);
        org.junit.Assert.assertNotNull(simpleDateFormat33);
        org.junit.Assert.assertNotNull(simpleDateFormat38);
        org.junit.Assert.assertNotNull(simpleDateFormat39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat44);
        org.junit.Assert.assertNull(simpleDateFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1972.041095890411d) + "'", double59 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-1972.041095890411d) + "'", double73 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1420");
        java.lang.String[] strArray4 = new java.lang.String[] { "January", "", "                                                                                               52.00", "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        net.ajaskey.common.TextUtils.print((java.util.List<java.lang.String>) strList5);
        java.lang.String str8 = net.ajaskey.common.TextUtils.toString((java.util.List<java.lang.String>) strList5);
        java.lang.String str9 = net.ajaskey.common.TextUtils.toString((java.util.List<java.lang.String>) strList5);
        net.ajaskey.common.TextUtils.print((java.util.List<java.lang.String>) strList5);
        java.lang.String str11 = net.ajaskey.common.TextUtils.toString((java.util.List<java.lang.String>) strList5);
        java.lang.String str12 = net.ajaskey.common.TextUtils.toString((java.util.List<java.lang.String>) strList5);
        net.ajaskey.common.TextUtils.print((java.util.List<java.lang.String>) strList5);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "January                                    26                                    26                                                                                               52.00                                    26hi!                                    26" + "'", str8, "January                                    26                                    26                                                                                               52.00                                    26hi!                                    26");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January                                    26                                    26                                                                                               52.00                                    26hi!                                    26" + "'", str9, "January                                    26                                    26                                                                                               52.00                                    26hi!                                    26");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "January                                    26                                    26                                                                                               52.00                                    26hi!                                    26" + "'", str11, "January                                    26                                    26                                                                                               52.00                                    26hi!                                    26");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "January                                    26                                    26                                                                                               52.00                                    26hi!                                    26" + "'", str12, "January                                    26                                    26                                                                                               52.00                                    26hi!                                    26");
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1421");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("Thu 10-Apr-0002 10:43:56", false);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1422");
        java.text.SimpleDateFormat simpleDateFormat6 = null;
        java.text.SimpleDateFormat simpleDateFormat7 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime("January", simpleDateFormat6, simpleDateFormat7);
        java.text.SimpleDateFormat simpleDateFormat11 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime("January", simpleDateFormat11);
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("", simpleDateFormat11);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("", simpleDateFormat7, simpleDateFormat11);
        java.text.SimpleDateFormat simpleDateFormat17 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat19 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat20 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime("", simpleDateFormat19, simpleDateFormat20);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat17, simpleDateFormat20);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat29 = null;
        java.text.SimpleDateFormat simpleDateFormat30 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime("January", simpleDateFormat29, simpleDateFormat30);
        java.text.SimpleDateFormat simpleDateFormat34 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime("January", simpleDateFormat34);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime("", simpleDateFormat34);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime("", simpleDateFormat30, simpleDateFormat34);
        dateTime26.setSdf(simpleDateFormat30);
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime("", simpleDateFormat20, simpleDateFormat30);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("   -18,438", simpleDateFormat11, simpleDateFormat30);
        java.text.SimpleDateFormat simpleDateFormat45 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat46 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime("", simpleDateFormat45, simpleDateFormat46);
        java.text.SimpleDateFormat simpleDateFormat49 = null;
        java.text.SimpleDateFormat simpleDateFormat50 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime("January", simpleDateFormat49, simpleDateFormat50);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat45, simpleDateFormat50);
        java.text.SimpleDateFormat simpleDateFormat55 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat56 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime("", simpleDateFormat55, simpleDateFormat56);
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime(100L);
        int int60 = dateTime59.getMs();
        java.text.SimpleDateFormat simpleDateFormat61 = net.ajaskey.common.Utils.sdf;
        dateTime59.setSdf(simpleDateFormat61);
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat56, simpleDateFormat61);
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime("                             100", simpleDateFormat50, simpleDateFormat56);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime("11", simpleDateFormat50);
        net.ajaskey.common.DateTime dateTime66 = new net.ajaskey.common.DateTime("10-Apr-0002", simpleDateFormat30, simpleDateFormat50);
        net.ajaskey.common.DateTime dateTime67 = new net.ajaskey.common.DateTime("", simpleDateFormat30);
        net.ajaskey.common.DateTime dateTime68 = new net.ajaskey.common.DateTime("                     8.00", simpleDateFormat30);
        org.junit.Assert.assertNotNull(simpleDateFormat7);
        org.junit.Assert.assertNotNull(simpleDateFormat11);
        org.junit.Assert.assertNotNull(simpleDateFormat17);
        org.junit.Assert.assertNotNull(simpleDateFormat19);
        org.junit.Assert.assertNotNull(simpleDateFormat20);
        org.junit.Assert.assertNotNull(simpleDateFormat30);
        org.junit.Assert.assertNotNull(simpleDateFormat34);
        org.junit.Assert.assertNotNull(simpleDateFormat45);
        org.junit.Assert.assertNotNull(simpleDateFormat46);
        org.junit.Assert.assertNotNull(simpleDateFormat50);
        org.junit.Assert.assertNotNull(simpleDateFormat55);
        org.junit.Assert.assertNotNull(simpleDateFormat56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat61);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1423");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt((-51), 515);
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1424");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(100L);
        boolean boolean4 = dateTime3.isWeekday();
        java.lang.String str5 = dateTime3.getMonth();
        dateTime3.add(7, 10);
        java.text.SimpleDateFormat simpleDateFormat11 = null;
        java.text.SimpleDateFormat simpleDateFormat12 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("January", simpleDateFormat11, simpleDateFormat12);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("100.00", simpleDateFormat11);
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean25 = dateTime19.isEqual(dateTime24);
        long long26 = dateTime14.getDeltaDays(dateTime24);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime(dateTime14);
        boolean boolean28 = dateTime3.isGreaterThan(dateTime14);
        boolean boolean29 = net.ajaskey.common.Utils.sameDate(dateTime1, dateTime3);
        int int30 = dateTime3.getMinute();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "December" + "'", str5, "December");
        org.junit.Assert.assertNotNull(simpleDateFormat12);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1425");
        java.lang.String str2 = net.ajaskey.common.Utils.fmt((double) 49, 28);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Invalid fmt" + "'", str2, "Invalid fmt");
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1426");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        int int7 = dateTime3.getHour();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime();
        net.ajaskey.common.DateTime dateTime9 = null;
        boolean boolean10 = dateTime8.isGreaterThan(dateTime9);
        java.text.SimpleDateFormat simpleDateFormat12 = null;
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat12);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean21 = dateTime15.isEqual(dateTime20);
        java.util.Calendar calendar22 = dateTime15.getCal();
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime(calendar22);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(calendar22);
        boolean boolean25 = dateTime8.isLessThan(dateTime24);
        boolean boolean26 = dateTime3.isLessThan(dateTime8);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime(53, (int) (byte) 100, 28);
        java.lang.String str32 = dateTime30.format("                0");
        int int33 = dateTime8.getYears(dateTime30);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                0" + "'", str32, "                0");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1960) + "'", int33 == (-1960));
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1427");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        java.util.Calendar calendar2 = dateTime1.getCal();
        java.text.SimpleDateFormat simpleDateFormat4 = null;
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double8 = dateTime5.getDeltaYears(dateTime7);
        boolean boolean9 = dateTime5.isWeekday();
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long14 = dateTime5.getDeltaDays(dateTime13);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(dateTime5);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime(100L);
        double double22 = dateTime19.getDeltaYears(dateTime21);
        boolean boolean23 = dateTime21.isWeekday();
        java.util.Date date24 = dateTime21.getTime();
        dateTime5.set(date24);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime(100L);
        int int28 = dateTime27.getMs();
        java.lang.String str29 = dateTime27.toString();
        boolean boolean30 = dateTime5.isLessThanOrEqual(dateTime27);
        net.ajaskey.common.DateTime dateTime33 = dateTime5.parse("", "100.00");
        dateTime5.add((int) (short) 0, (int) (short) -1);
        double double37 = dateTime1.getDeltaYears(dateTime5);
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime(100L);
        int int40 = dateTime39.getMs();
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime(100L);
        double double47 = dateTime44.getDeltaYears(dateTime46);
        java.text.SimpleDateFormat simpleDateFormat48 = dateTime44.getSdf();
        boolean boolean49 = dateTime39.isLessThanOrEqual(dateTime44);
        int int50 = dateTime39.getDayOfMonth();
        boolean boolean51 = net.ajaskey.common.Utils.sameMonth(dateTime5, dateTime39);
        java.lang.String str52 = dateTime39.format();
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1972.041095890411d) + "'", double22 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "31-Dec-1969" + "'", str29, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(dateTime33);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1972.041095890411d) + "'", double47 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 31 + "'", int50 == 31);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "BAD-DATE-FORMAT" + "'", str52, "BAD-DATE-FORMAT");
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1428");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) (short) 100);
        java.lang.String str2 = dateTime1.toFullString();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        long long9 = dateTime6.getDeltaDays(dateTime8);
        int int10 = dateTime6.getHour();
        dateTime6.add((int) (byte) 100, (int) (byte) 0);
        net.ajaskey.common.DateTime dateTime15 = dateTime6.parse("10-Apr-0002");
        int int16 = dateTime6.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime(100L);
        dateTime22.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str27 = dateTime22.getMonth();
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime(100L);
        dateTime29.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str34 = dateTime29.getMonth();
        int int35 = dateTime29.getMs();
        net.ajaskey.common.DateTime dateTime36 = dateTime22.copy(dateTime29);
        dateTime20.set(dateTime22);
        net.ajaskey.common.DateTime dateTime40 = dateTime20.parse("100.00", "     5.00");
        java.util.Date date41 = null;
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime(date41);
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime(100L);
        double double49 = dateTime46.getDeltaYears(dateTime48);
        int int50 = dateTime46.getHour();
        java.text.SimpleDateFormat simpleDateFormat52 = null;
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat52);
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double56 = dateTime53.getDeltaYears(dateTime55);
        net.ajaskey.common.DateTime dateTime60 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean61 = dateTime55.isEqual(dateTime60);
        java.util.Calendar calendar62 = dateTime55.getCal();
        dateTime46.set(calendar62);
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime(calendar62);
        net.ajaskey.common.DateTime dateTime65 = dateTime42.copy(dateTime64);
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime71 = new net.ajaskey.common.DateTime(100L);
        double double72 = dateTime69.getDeltaYears(dateTime71);
        boolean boolean73 = dateTime71.isWeekday();
        int int74 = dateTime71.getDayOfYear();
        long long75 = dateTime65.getDeltaMilliSeconds(dateTime71);
        net.ajaskey.common.DateTime dateTime77 = new net.ajaskey.common.DateTime(100L);
        int int78 = dateTime77.getMs();
        java.lang.String str79 = dateTime77.toString();
        java.lang.String str81 = dateTime77.format("         1");
        long long82 = dateTime65.getDeltaDays(dateTime77);
        boolean boolean83 = net.ajaskey.common.Utils.sameMonth(dateTime20, dateTime77);
        dateTime6.set(dateTime77);
        dateTime77.set(262, (int) ' ', (int) (short) -1);
        net.ajaskey.common.DateTime dateTime89 = dateTime1.copy(dateTime77);
        java.lang.String str90 = dateTime1.format();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str2, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-719795L) + "'", long9 == (-719795L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "January" + "'", str27, "January");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "January" + "'", str34, "January");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNull(dateTime40);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1972.041095890411d) + "'", double49 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1972.041095890411d) + "'", double72 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 365 + "'", int74 == 365);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 100L + "'", long75 == 100L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "31-Dec-1969" + "'", str79, "31-Dec-1969");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "         1" + "'", str81, "         1");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "BAD-DATE-FORMAT" + "'", str90, "BAD-DATE-FORMAT");
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1429");
        net.ajaskey.common.TextUtils.printline("           4");
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1430");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean4 = dateTime3.isNull();
        int int5 = dateTime3.getDayOfYear();
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(100L);
        long long16 = dateTime13.getDeltaDays(dateTime15);
        int int17 = dateTime13.getHour();
        dateTime13.add((int) (byte) 100, (int) (byte) 0);
        double double21 = dateTime9.getDeltaYears(dateTime13);
        boolean boolean22 = dateTime3.isLessThanOrEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        boolean boolean25 = dateTime24.isWeekday();
        dateTime24.setFirstWorkDay();
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime(100L);
        dateTime28.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str33 = dateTime28.getMonth();
        boolean boolean34 = dateTime24.isLessThan(dateTime28);
        java.util.Date date35 = dateTime28.getTime();
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime(100L);
        int int38 = dateTime37.getMs();
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime(100L);
        double double45 = dateTime42.getDeltaYears(dateTime44);
        java.text.SimpleDateFormat simpleDateFormat46 = dateTime42.getSdf();
        boolean boolean47 = dateTime37.isLessThanOrEqual(dateTime42);
        boolean boolean48 = dateTime37.isWeekday();
        boolean boolean49 = dateTime28.isGreaterThan(dateTime37);
        java.lang.String str50 = dateTime37.getDay();
        long long51 = dateTime9.getDeltaDays(dateTime37);
        dateTime37.add((-2005), 23);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-719795L) + "'", long16 == (-719795L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "January" + "'", str33, "January");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Jan 04 17:00:00 MST 100");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1972.041095890411d) + "'", double45 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Wednesday" + "'", str50, "Wednesday");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-719795L) + "'", long51 == (-719795L));
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1431");
        java.text.SimpleDateFormat simpleDateFormat1 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat2 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime("", simpleDateFormat1, simpleDateFormat2);
        int int4 = dateTime3.getHour();
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(dateTime3);
        int int6 = dateTime5.getHour();
        org.junit.Assert.assertNotNull(simpleDateFormat1);
        org.junit.Assert.assertNotNull(simpleDateFormat2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1432");
        java.util.Map<java.lang.String, java.lang.Integer> strMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = net.ajaskey.common.Utils.findName(strMap0, (java.lang.Integer) 56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1433");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        java.lang.String str6 = dateTime4.getMonth();
        java.util.Date date7 = null;
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(date7);
        net.ajaskey.common.DateTime dateTime10 = dateTime8.parse("Thu 10-Apr-0002 10:42:58");
        dateTime8.setFirstWorkDay();
        int int12 = dateTime8.getSecond();
        boolean boolean13 = net.ajaskey.common.Utils.sameDate(dateTime4, dateTime8);
        int int14 = dateTime8.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "December" + "'", str6, "December");
        org.junit.Assert.assertNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 17 + "'", int12 == 17);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1434");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readTextFile("                                                                                              100", false);
        net.ajaskey.common.TextUtils.print(strList2);
        java.lang.String str4 = net.ajaskey.common.TextUtils.toString(strList2);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1435");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("Thu 10-Apr-0002 10:43:35", false);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1436");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(3, 2, 5);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1437");
        java.lang.String str2 = net.ajaskey.common.Utils.fmt((double) (-62190310544158L), 101);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Invalid fmt" + "'", str2, "Invalid fmt");
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1438");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        boolean boolean6 = dateTime2.isWeekday();
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long11 = dateTime2.getDeltaDays(dateTime10);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(dateTime2);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime(100L);
        double double19 = dateTime16.getDeltaYears(dateTime18);
        boolean boolean20 = dateTime18.isWeekday();
        java.util.Date date21 = dateTime18.getTime();
        dateTime2.set(date21);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        int int25 = dateTime24.getMs();
        java.lang.String str26 = dateTime24.toString();
        boolean boolean27 = dateTime2.isLessThanOrEqual(dateTime24);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime(100L);
        double double34 = dateTime31.getDeltaYears(dateTime33);
        int int35 = dateTime31.getHour();
        java.text.SimpleDateFormat simpleDateFormat37 = null;
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat37);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double41 = dateTime38.getDeltaYears(dateTime40);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean46 = dateTime40.isEqual(dateTime45);
        java.util.Calendar calendar47 = dateTime40.getCal();
        dateTime31.set(calendar47);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime(calendar47);
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime(calendar47);
        dateTime2.set(calendar47);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime(calendar47);
        net.ajaskey.common.DateTime dateTime55 = dateTime52.parse("May", "Mon 06-Jan-0100 17:00:00");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1972.041095890411d) + "'", double19 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "31-Dec-1969" + "'", str26, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1972.041095890411d) + "'", double34 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNull(dateTime55);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1439");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        java.text.SimpleDateFormat simpleDateFormat13 = null;
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat13);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        boolean boolean18 = dateTime14.isWeekday();
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long23 = dateTime14.getDeltaDays(dateTime22);
        long long24 = dateTime1.getDeltaDays(dateTime22);
        java.lang.String str25 = dateTime22.toFullString();
        java.util.Calendar calendar26 = dateTime22.getCal();
        java.util.Calendar calendar27 = dateTime22.getCal();
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime((long) (short) 0);
        int int30 = dateTime29.getHour();
        boolean boolean31 = dateTime29.isNull();
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime(dateTime29);
        boolean boolean33 = dateTime22.isLessThanOrEqual(dateTime29);
        java.lang.Class<?> wildcardClass34 = dateTime29.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 719795L + "'", long24 == 719795L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Thu 10-Apr-0002 10:44:17" + "'", str25, "Thu 10-Apr-0002 10:44:17");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-62190310542442,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=17,MILLISECOND=558,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-62190310542442,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=17,MILLISECOND=558,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1440");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime(100L);
        double double8 = dateTime5.getDeltaYears(dateTime7);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime(100L);
        double double15 = dateTime12.getDeltaYears(dateTime14);
        int int16 = dateTime12.getHour();
        int int17 = dateTime12.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime(100L);
        double double24 = dateTime21.getDeltaYears(dateTime23);
        boolean boolean25 = dateTime23.isWeekday();
        boolean boolean26 = net.ajaskey.common.Utils.sameDate(dateTime12, dateTime23);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime(100L);
        dateTime28.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime(100L);
        double double39 = dateTime36.getDeltaYears(dateTime38);
        boolean boolean40 = dateTime38.isWeekday();
        java.util.Date date41 = dateTime38.getTime();
        dateTime28.set(dateTime38);
        int int43 = dateTime28.getYear();
        boolean boolean44 = dateTime23.isGreaterThanOrEqual(dateTime28);
        boolean boolean45 = dateTime5.sameDate(dateTime23);
        net.ajaskey.common.DateTime dateTime46 = dateTime1.copy(dateTime5);
        java.text.SimpleDateFormat simpleDateFormat47 = dateTime46.getSdf();
        java.lang.String str48 = dateTime46.format();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1972.041095890411d) + "'", double8 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1972.041095890411d) + "'", double15 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1972.041095890411d) + "'", double24 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1972.041095890411d) + "'", double39 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1969 + "'", int43 == 1969);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertNotNull(simpleDateFormat47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "10-Apr-0002" + "'", str48, "10-Apr-0002");
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1441");
        java.lang.String str2 = net.ajaskey.common.Utils.lfmt((long) '4', 26);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                        52" + "'", str2, "                        52");
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1442");
        net.ajaskey.common.Utils.TAB = "                                                 100";
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1443");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime(100L);
        int int3 = dateTime2.getMs();
        java.text.SimpleDateFormat simpleDateFormat4 = net.ajaskey.common.Utils.sdf;
        dateTime2.setSdf(simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat4);
        java.text.SimpleDateFormat simpleDateFormat8 = null;
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double12 = dateTime9.getDeltaYears(dateTime11);
        boolean boolean13 = dateTime11.isNull();
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat15);
        dateTime16.set((int) ' ', 0, 11);
        boolean boolean21 = dateTime11.isGreaterThanOrEqual(dateTime16);
        double double22 = dateTime6.getDeltaYears(dateTime11);
        java.text.SimpleDateFormat simpleDateFormat24 = null;
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat24);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double28 = dateTime25.getDeltaYears(dateTime27);
        boolean boolean29 = dateTime27.isNull();
        boolean boolean30 = dateTime11.isGreaterThan(dateTime27);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime(dateTime11);
        java.text.SimpleDateFormat simpleDateFormat33 = net.ajaskey.common.Utils.sdfFull;
        java.text.SimpleDateFormat simpleDateFormat35 = null;
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat35);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double39 = dateTime36.getDeltaYears(dateTime38);
        boolean boolean40 = dateTime36.isWeekday();
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long45 = dateTime36.getDeltaDays(dateTime44);
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime(dateTime36);
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime(100L);
        double double53 = dateTime50.getDeltaYears(dateTime52);
        boolean boolean54 = dateTime52.isWeekday();
        java.util.Date date55 = dateTime52.getTime();
        dateTime36.set(date55);
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime(100L);
        int int59 = dateTime58.getMs();
        java.lang.String str60 = dateTime58.toString();
        boolean boolean61 = dateTime36.isLessThanOrEqual(dateTime58);
        int int62 = dateTime36.getHour();
        int int63 = dateTime36.getYear();
        java.util.Calendar calendar64 = dateTime36.getCal();
        net.ajaskey.common.DateTime dateTime66 = new net.ajaskey.common.DateTime(100L);
        int int67 = dateTime66.getMs();
        boolean boolean68 = dateTime66.isWeekday();
        int int69 = dateTime66.getHour();
        java.text.SimpleDateFormat simpleDateFormat71 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime72 = new net.ajaskey.common.DateTime("January", simpleDateFormat71);
        dateTime66.setSdf(simpleDateFormat71);
        dateTime36.setSdf(simpleDateFormat71);
        net.ajaskey.common.DateTime dateTime75 = new net.ajaskey.common.DateTime("Thu 10-Apr-0002 10:42:59", simpleDateFormat33, simpleDateFormat71);
        int int76 = dateTime75.getSecond();
        net.ajaskey.common.DateTime dateTime77 = new net.ajaskey.common.DateTime(dateTime75);
        boolean boolean78 = dateTime31.isEqual(dateTime77);
        java.lang.String str79 = dateTime31.format();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat4);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat33);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1972.041095890411d) + "'", double53 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "31-Dec-1969" + "'", str60, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1969 + "'", int63 == 1969);
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(simpleDateFormat71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 59 + "'", int76 == 59);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "BAD-DATE-FORMAT" + "'", str79, "BAD-DATE-FORMAT");
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1444");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        boolean boolean14 = dateTime9.isGreaterThanOrEqual(dateTime12);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        dateTime16.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(100L);
        double double27 = dateTime24.getDeltaYears(dateTime26);
        boolean boolean28 = dateTime26.isWeekday();
        java.util.Date date29 = dateTime26.getTime();
        dateTime16.set(dateTime26);
        boolean boolean31 = net.ajaskey.common.Utils.sameDate(dateTime9, dateTime16);
        dateTime9.add((int) '#', 6);
        net.ajaskey.common.DateTime dateTime37 = dateTime9.parse("31-Dec-1969", "");
        java.text.SimpleDateFormat simpleDateFormat39 = null;
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double43 = dateTime40.getDeltaYears(dateTime42);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean48 = dateTime42.isEqual(dateTime47);
        java.util.Calendar calendar49 = dateTime42.getCal();
        java.lang.String str50 = dateTime42.format();
        net.ajaskey.common.DateTime dateTime51 = null;
        long long52 = dateTime42.getDeltaDays(dateTime51);
        int int53 = dateTime42.getSecond();
        net.ajaskey.common.DateTime dateTime57 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime(100L);
        double double60 = dateTime57.getDeltaYears(dateTime59);
        java.text.SimpleDateFormat simpleDateFormat62 = null;
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat62);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double66 = dateTime63.getDeltaYears(dateTime65);
        boolean boolean67 = dateTime63.isWeekday();
        boolean boolean68 = dateTime57.sameDate(dateTime63);
        int int69 = dateTime63.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime70 = dateTime42.copy(dateTime63);
        long long71 = dateTime9.getDeltaMilliSeconds(dateTime42);
        int int72 = dateTime42.getDayOfMonth();
        boolean boolean73 = dateTime42.isNull();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1972.041095890411d) + "'", double27 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(dateTime37);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "BAD-DATE-FORMAT" + "'", str50, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1972.041095890411d) + "'", double60 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNull(dateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 62190310542280L + "'", long71 == 62190310542280L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 31 + "'", int72 == 31);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1445");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        int int7 = dateTime3.getHour();
        java.text.SimpleDateFormat simpleDateFormat9 = null;
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double13 = dateTime10.getDeltaYears(dateTime12);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean18 = dateTime12.isEqual(dateTime17);
        java.util.Calendar calendar19 = dateTime12.getCal();
        java.lang.String str20 = dateTime12.format();
        net.ajaskey.common.DateTime dateTime21 = null;
        long long22 = dateTime12.getDeltaDays(dateTime21);
        int int23 = dateTime12.getSecond();
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime29 = new net.ajaskey.common.DateTime(100L);
        double double30 = dateTime27.getDeltaYears(dateTime29);
        java.text.SimpleDateFormat simpleDateFormat32 = null;
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat32);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double36 = dateTime33.getDeltaYears(dateTime35);
        boolean boolean37 = dateTime33.isWeekday();
        boolean boolean38 = dateTime27.sameDate(dateTime33);
        int int39 = dateTime33.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime40 = dateTime12.copy(dateTime33);
        dateTime3.set(dateTime33);
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime(100L);
        int int45 = dateTime44.getMs();
        java.text.SimpleDateFormat simpleDateFormat46 = net.ajaskey.common.Utils.sdf;
        dateTime44.setSdf(simpleDateFormat46);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat46);
        java.text.SimpleDateFormat simpleDateFormat50 = null;
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat50);
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double54 = dateTime51.getDeltaYears(dateTime53);
        boolean boolean55 = dateTime53.isNull();
        java.text.SimpleDateFormat simpleDateFormat57 = null;
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat57);
        dateTime58.set((int) ' ', 0, 11);
        boolean boolean63 = dateTime53.isGreaterThanOrEqual(dateTime58);
        double double64 = dateTime48.getDeltaYears(dateTime53);
        java.text.SimpleDateFormat simpleDateFormat66 = null;
        net.ajaskey.common.DateTime dateTime67 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat66);
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double70 = dateTime67.getDeltaYears(dateTime69);
        boolean boolean71 = dateTime69.isNull();
        boolean boolean72 = dateTime53.isGreaterThan(dateTime69);
        java.lang.String str73 = dateTime53.getMonth();
        java.text.SimpleDateFormat simpleDateFormat75 = null;
        net.ajaskey.common.DateTime dateTime76 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat75);
        net.ajaskey.common.DateTime dateTime78 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double79 = dateTime76.getDeltaYears(dateTime78);
        net.ajaskey.common.DateTime dateTime83 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean84 = dateTime78.isEqual(dateTime83);
        java.util.Calendar calendar85 = dateTime78.getCal();
        java.lang.String str86 = dateTime78.format();
        net.ajaskey.common.DateTime dateTime87 = null;
        long long88 = dateTime78.getDeltaDays(dateTime87);
        int int89 = dateTime78.getSecond();
        int int90 = dateTime78.getHour();
        boolean boolean91 = dateTime53.isGreaterThanOrEqual(dateTime78);
        boolean boolean92 = dateTime33.sameDate(dateTime53);
        net.ajaskey.common.DateTime dateTime95 = new net.ajaskey.common.DateTime("10-Apr-0002", "5.00");
        boolean boolean96 = dateTime53.isGreaterThan(dateTime95);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "BAD-DATE-FORMAT" + "'", str20, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1972.041095890411d) + "'", double30 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat46);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "December" + "'", str73, "December");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "BAD-DATE-FORMAT" + "'", str86, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 5 + "'", int90 == 5);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1446");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("      42", false);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1447");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("30-Sep-0252", "                                     2");
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1448");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) (short) 0);
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(100L);
        int int4 = dateTime3.getMs();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime(100L);
        double double11 = dateTime8.getDeltaYears(dateTime10);
        java.text.SimpleDateFormat simpleDateFormat12 = dateTime8.getSdf();
        boolean boolean13 = dateTime3.isLessThanOrEqual(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat15);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double19 = dateTime16.getDeltaYears(dateTime18);
        boolean boolean20 = dateTime16.isWeekday();
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long25 = dateTime16.getDeltaDays(dateTime24);
        long long26 = dateTime3.getDeltaDays(dateTime24);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime(100L);
        dateTime28.set((int) (byte) 100, (-1), (int) '#');
        boolean boolean33 = dateTime28.isWeekday();
        int int34 = dateTime3.getYears(dateTime28);
        int int35 = dateTime3.getYear();
        java.util.Calendar calendar36 = dateTime3.getCal();
        net.ajaskey.common.DateTime dateTime37 = dateTime1.copy(dateTime3);
        net.ajaskey.common.DateTime dateTime38 = null;
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime(dateTime38);
        java.lang.String str41 = dateTime39.format("     5.00");
        net.ajaskey.common.DateTime dateTime42 = null;
        long long43 = dateTime39.getDeltaDays(dateTime42);
        int int44 = dateTime39.getDayOfMonth();
        int int45 = dateTime39.getHour();
        boolean boolean46 = dateTime1.isEqual(dateTime39);
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime((long) (short) 0);
        int int49 = dateTime48.getHour();
        boolean boolean50 = dateTime48.isNull();
        boolean boolean51 = dateTime39.sameDate(dateTime48);
        java.lang.Class<?> wildcardClass52 = dateTime48.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1972.041095890411d) + "'", double11 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 719795L + "'", long26 == 719795L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1870) + "'", int34 == (-1870));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1969 + "'", int35 == 1969);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "     5.00" + "'", str41, "     5.00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 25 + "'", int44 == 25);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1449");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        boolean boolean3 = dateTime1.isWeekday();
        int int4 = dateTime1.getHour();
        java.text.SimpleDateFormat simpleDateFormat6 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime("January", simpleDateFormat6);
        dateTime1.setSdf(simpleDateFormat6);
        java.text.SimpleDateFormat simpleDateFormat9 = dateTime1.getSdf();
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(100L);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        java.text.SimpleDateFormat simpleDateFormat18 = null;
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat18);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double22 = dateTime19.getDeltaYears(dateTime21);
        boolean boolean23 = dateTime19.isWeekday();
        boolean boolean24 = dateTime13.sameDate(dateTime19);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime(100L);
        double double31 = dateTime28.getDeltaYears(dateTime30);
        java.text.SimpleDateFormat simpleDateFormat33 = null;
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat33);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double37 = dateTime34.getDeltaYears(dateTime36);
        boolean boolean38 = dateTime34.isWeekday();
        boolean boolean39 = dateTime28.sameDate(dateTime34);
        java.text.SimpleDateFormat simpleDateFormat41 = null;
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat41);
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double45 = dateTime42.getDeltaYears(dateTime44);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean50 = dateTime44.isEqual(dateTime49);
        dateTime28.set(dateTime49);
        long long52 = dateTime13.getDeltaMilliSeconds(dateTime49);
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime(100L);
        int int55 = dateTime54.getMs();
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime(100L);
        double double62 = dateTime59.getDeltaYears(dateTime61);
        java.text.SimpleDateFormat simpleDateFormat63 = dateTime59.getSdf();
        boolean boolean64 = dateTime54.isLessThanOrEqual(dateTime59);
        int int65 = dateTime59.getDayOfYear();
        boolean boolean66 = dateTime59.isWeekday();
        boolean boolean67 = dateTime13.sameDate(dateTime59);
        java.util.Calendar calendar68 = dateTime13.getCal();
        boolean boolean69 = dateTime13.isWeekday();
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime(dateTime13);
        boolean boolean71 = dateTime1.isGreaterThan(dateTime70);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertNotNull(simpleDateFormat6);
        org.junit.Assert.assertNotNull(simpleDateFormat9);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1972.041095890411d) + "'", double16 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1972.041095890411d) + "'", double31 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1972.041095890411d) + "'", double62 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(calendar68);
// flaky:         org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-62190310541900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=18,MILLISECOND=100,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1450");
        java.util.zip.ZipOutputStream zipOutputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.Utils.writeToZipFile("Thu 10-Apr-0002 10:43:08", zipOutputStream1);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: Thu 10-Apr-0002 10:43:08 (The filename, directory name, or volume label syntax is incorrect)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1451");
        java.lang.String[] strArray5 = new java.lang.String[] { "           4", "           6" };
        java.util.List<java.io.File> fileList6 = net.ajaskey.common.Utils.getDirTree("                                 42", strArray5);
        java.util.List<java.io.File> fileList7 = net.ajaskey.common.Utils.getDirTree("                                                                                                                                                                                                                                                                                                                                                                          100", strArray5);
        java.util.List<java.io.File> fileList8 = net.ajaskey.common.Utils.getDirTree("", strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(fileList6);
        org.junit.Assert.assertNull(fileList7);
        org.junit.Assert.assertNull(fileList8);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1452");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        java.text.SimpleDateFormat simpleDateFormat8 = null;
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double12 = dateTime9.getDeltaYears(dateTime11);
        boolean boolean13 = dateTime9.isWeekday();
        boolean boolean14 = dateTime3.sameDate(dateTime9);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime(100L);
        double double21 = dateTime18.getDeltaYears(dateTime20);
        java.text.SimpleDateFormat simpleDateFormat23 = null;
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat23);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double27 = dateTime24.getDeltaYears(dateTime26);
        boolean boolean28 = dateTime24.isWeekday();
        boolean boolean29 = dateTime18.sameDate(dateTime24);
        java.text.SimpleDateFormat simpleDateFormat31 = null;
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat31);
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double35 = dateTime32.getDeltaYears(dateTime34);
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean40 = dateTime34.isEqual(dateTime39);
        dateTime18.set(dateTime39);
        long long42 = dateTime3.getDeltaMilliSeconds(dateTime39);
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime(100L);
        int int45 = dateTime44.getMs();
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime(100L);
        double double52 = dateTime49.getDeltaYears(dateTime51);
        java.text.SimpleDateFormat simpleDateFormat53 = dateTime49.getSdf();
        boolean boolean54 = dateTime44.isLessThanOrEqual(dateTime49);
        int int55 = dateTime49.getDayOfYear();
        boolean boolean56 = dateTime49.isWeekday();
        boolean boolean57 = dateTime3.sameDate(dateTime49);
        java.util.Date date58 = dateTime49.getTime();
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime(date58);
        java.text.SimpleDateFormat simpleDateFormat61 = null;
        net.ajaskey.common.DateTime dateTime62 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat61);
        dateTime62.set((int) ' ', 0, 11);
        boolean boolean67 = dateTime62.isWeekday();
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime(100L);
        int int70 = dateTime69.getMs();
        net.ajaskey.common.DateTime dateTime74 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime76 = new net.ajaskey.common.DateTime(100L);
        double double77 = dateTime74.getDeltaYears(dateTime76);
        java.text.SimpleDateFormat simpleDateFormat78 = dateTime74.getSdf();
        boolean boolean79 = dateTime69.isLessThanOrEqual(dateTime74);
        java.util.Date date80 = dateTime74.getTime();
        dateTime62.set(date80);
        net.ajaskey.common.DateTime dateTime82 = new net.ajaskey.common.DateTime(date80);
        net.ajaskey.common.DateTime dateTime83 = null;
        net.ajaskey.common.DateTime dateTime84 = new net.ajaskey.common.DateTime(dateTime83);
        dateTime84.set(42, 10, 10);
        java.util.Date date89 = dateTime84.getTime();
        dateTime82.set(date89);
        dateTime59.set(date89);
        int int92 = dateTime59.getYear();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1972.041095890411d) + "'", double21 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1972.041095890411d) + "'", double52 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(date58);
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Thu Apr 10 10:44:18 MST 2");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1972.041095890411d) + "'", double77 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(date80);
// flaky:         org.junit.Assert.assertEquals(date80.toString(), "Thu Apr 10 10:44:18 MST 2");
        org.junit.Assert.assertNotNull(date89);
// flaky:         org.junit.Assert.assertEquals(date89.toString(), "Sat Nov 10 10:44:18 MST 42");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 42 + "'", int92 == 42);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1453");
        net.ajaskey.common.Utils.NL = "Thu 10-Apr-0002 10:43:22";
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1454");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        int int7 = dateTime3.getHour();
        dateTime3.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat12 = null;
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat12);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        boolean boolean17 = dateTime3.isEqual(dateTime15);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat23 = null;
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat23);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double27 = dateTime24.getDeltaYears(dateTime26);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean32 = dateTime26.isEqual(dateTime31);
        java.util.Calendar calendar33 = dateTime26.getCal();
        boolean boolean34 = dateTime21.isLessThan(dateTime26);
        dateTime21.setFirstWorkDay();
        boolean boolean36 = dateTime3.sameDate(dateTime21);
        int int37 = dateTime21.getYear();
        boolean boolean38 = dateTime21.isNull();
        java.lang.String str39 = dateTime21.getMonth();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "April" + "'", str39, "April");
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1455");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        java.text.SimpleDateFormat simpleDateFormat13 = null;
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat13);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        boolean boolean18 = dateTime14.isWeekday();
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long23 = dateTime14.getDeltaDays(dateTime22);
        long long24 = dateTime1.getDeltaDays(dateTime22);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat30 = null;
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat30);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double34 = dateTime31.getDeltaYears(dateTime33);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean39 = dateTime33.isEqual(dateTime38);
        java.util.Calendar calendar40 = dateTime33.getCal();
        boolean boolean41 = dateTime28.isLessThan(dateTime33);
        boolean boolean42 = net.ajaskey.common.Utils.sameDate(dateTime1, dateTime28);
        java.lang.String str43 = dateTime28.getDay();
        java.lang.Class<?> wildcardClass44 = dateTime28.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 719795L + "'", long24 == 719795L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Thursday" + "'", str43, "Thursday");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1456");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) 100, (int) (byte) 1, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime6 = dateTime3.parse("11", "Thursday");
        // The following exception was thrown during execution in test generation
        try {
            int int7 = dateTime6.getMinute();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(dateTime6);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1457");
        net.ajaskey.common.Utils.makeDir("                                                                                                                                                                                                                                                                                                                                                                        1,869");
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1458");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readTextFile("                           97.00", true);
        net.ajaskey.common.TextUtils.print(strList2);
        org.junit.Assert.assertNotNull(strList2);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1459");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("Thu 10-Apr-0002 10:43:18");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1460");
        java.util.zip.ZipOutputStream zipOutputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.ajaskey.common.Utils.writeToZipFile("0", zipOutputStream1);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: 0 (The system cannot find the file specified)");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1461");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime(100L);
        double double6 = dateTime3.getDeltaYears(dateTime5);
        java.text.SimpleDateFormat simpleDateFormat7 = dateTime3.getSdf();
        int int8 = dateTime3.getMinute();
        int int9 = dateTime3.getDayOfYear();
        net.ajaskey.common.DateTime dateTime10 = null;
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime(dateTime10);
        dateTime11.set(42, 10, 10);
        java.util.Date date16 = dateTime11.getTime();
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime(date16);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime(date16);
        java.lang.String str19 = dateTime18.getMonth();
        boolean boolean20 = dateTime3.sameDate(dateTime18);
        int int21 = dateTime3.getHour();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1972.041095890411d) + "'", double6 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 44 + "'", int8 == 44);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 10 10:44:18 MST 42");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "November" + "'", str19, "November");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1462");
        net.ajaskey.common.DateTime dateTime0 = null;
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(dateTime0);
        dateTime1.set(42, 10, 10);
        java.util.Date date6 = dateTime1.getTime();
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime(date6);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.util.Calendar calendar12 = null;
        dateTime11.set(calendar12);
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat15);
        dateTime16.set((int) ' ', 0, 11);
        boolean boolean21 = dateTime16.isWeekday();
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime(100L);
        int int24 = dateTime23.getMs();
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime(100L);
        double double31 = dateTime28.getDeltaYears(dateTime30);
        java.text.SimpleDateFormat simpleDateFormat32 = dateTime28.getSdf();
        boolean boolean33 = dateTime23.isLessThanOrEqual(dateTime28);
        java.util.Date date34 = dateTime28.getTime();
        dateTime16.set(date34);
        long long36 = dateTime11.getDeltaMilliSeconds(dateTime16);
        boolean boolean37 = net.ajaskey.common.Utils.sameDate(dateTime7, dateTime11);
        int int38 = dateTime7.getSecond();
        java.lang.String str39 = dateTime7.toFullString();
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 10 10:44:18 MST 42");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1972.041095890411d) + "'", double31 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Thu Apr 10 10:44:18 MST 2");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 18 + "'", int38 == 18);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Sat 10-Nov-0042 10:44:18" + "'", str39, "Sat 10-Nov-0042 10:44:18");
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1463");
        java.lang.String str2 = net.ajaskey.common.Utils.lfmt((-62190310610288L), 14);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-62,190,310,610,288" + "'", str2, "-62,190,310,610,288");
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1464");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        boolean boolean6 = dateTime2.isWeekday();
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long11 = dateTime2.getDeltaDays(dateTime10);
        dateTime10.set((int) (short) -1, (int) (byte) 0, (int) ' ');
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime(100L);
        double double22 = dateTime19.getDeltaYears(dateTime21);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime(100L);
        double double29 = dateTime26.getDeltaYears(dateTime28);
        int int30 = dateTime26.getHour();
        int int31 = dateTime26.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime(100L);
        double double38 = dateTime35.getDeltaYears(dateTime37);
        boolean boolean39 = dateTime37.isWeekday();
        boolean boolean40 = net.ajaskey.common.Utils.sameDate(dateTime26, dateTime37);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime(100L);
        dateTime42.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime(100L);
        double double53 = dateTime50.getDeltaYears(dateTime52);
        boolean boolean54 = dateTime52.isWeekday();
        java.util.Date date55 = dateTime52.getTime();
        dateTime42.set(dateTime52);
        int int57 = dateTime42.getYear();
        boolean boolean58 = dateTime37.isGreaterThanOrEqual(dateTime42);
        boolean boolean59 = dateTime19.sameDate(dateTime37);
        boolean boolean60 = dateTime10.isLessThanOrEqual(dateTime19);
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime(dateTime19);
        java.text.SimpleDateFormat simpleDateFormat64 = null;
        java.text.SimpleDateFormat simpleDateFormat65 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime66 = new net.ajaskey.common.DateTime("January", simpleDateFormat64, simpleDateFormat65);
        java.text.SimpleDateFormat simpleDateFormat69 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime70 = new net.ajaskey.common.DateTime("January", simpleDateFormat69);
        net.ajaskey.common.DateTime dateTime71 = new net.ajaskey.common.DateTime("", simpleDateFormat69);
        net.ajaskey.common.DateTime dateTime72 = new net.ajaskey.common.DateTime("", simpleDateFormat65, simpleDateFormat69);
        net.ajaskey.common.DateTime dateTime76 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat78 = null;
        net.ajaskey.common.DateTime dateTime79 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat78);
        net.ajaskey.common.DateTime dateTime81 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double82 = dateTime79.getDeltaYears(dateTime81);
        boolean boolean83 = dateTime76.isLessThan(dateTime81);
        java.lang.String str84 = dateTime81.toFullString();
        int int85 = dateTime81.getSecond();
        net.ajaskey.common.DateTime dateTime86 = new net.ajaskey.common.DateTime(dateTime81);
        boolean boolean87 = net.ajaskey.common.Utils.sameDate(dateTime72, dateTime86);
        boolean boolean88 = dateTime61.isEqual(dateTime86);
        int int89 = dateTime86.getYear();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1972.041095890411d) + "'", double22 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1972.041095890411d) + "'", double29 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1972.041095890411d) + "'", double38 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1972.041095890411d) + "'", double53 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1969 + "'", int57 == 1969);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat65);
        org.junit.Assert.assertNotNull(simpleDateFormat69);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str84, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1969 + "'", int89 == 1969);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1465");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) (short) 0);
        int int2 = dateTime1.getHour();
        boolean boolean3 = dateTime1.isNull();
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime(dateTime1);
        java.text.SimpleDateFormat simpleDateFormat5 = dateTime1.getSdf();
        boolean boolean6 = dateTime1.isWeekday();
        java.lang.String str7 = dateTime1.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(simpleDateFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "31-Dec-1969" + "'", str7, "31-Dec-1969");
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1466");
        java.text.SimpleDateFormat simpleDateFormat2 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime("January", simpleDateFormat2);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime("", simpleDateFormat2);
        dateTime4.setFirstWorkDay();
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat11 = null;
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat11);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double15 = dateTime12.getDeltaYears(dateTime14);
        boolean boolean16 = dateTime9.isLessThan(dateTime14);
        java.lang.String str17 = dateTime14.toFullString();
        dateTime14.add(10, (int) (byte) -1);
        java.text.SimpleDateFormat simpleDateFormat22 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat24 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat25 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime("", simpleDateFormat24, simpleDateFormat25);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat22, simpleDateFormat25);
        boolean boolean28 = dateTime14.isGreaterThan(dateTime27);
        java.text.SimpleDateFormat simpleDateFormat30 = null;
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat30);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double34 = dateTime31.getDeltaYears(dateTime33);
        boolean boolean35 = dateTime31.isWeekday();
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long40 = dateTime31.getDeltaDays(dateTime39);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime(dateTime31);
        boolean boolean42 = dateTime27.sameDate(dateTime31);
        boolean boolean43 = dateTime4.isGreaterThan(dateTime31);
        net.ajaskey.common.DateTime dateTime45 = dateTime31.parse("Fri 11-Jan-0032 10:44:03");
        org.junit.Assert.assertNotNull(simpleDateFormat2);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str17, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertNotNull(simpleDateFormat22);
        org.junit.Assert.assertNotNull(simpleDateFormat24);
        org.junit.Assert.assertNotNull(simpleDateFormat25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(dateTime45);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1467");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat5 = null;
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat5);
        boolean boolean7 = net.ajaskey.common.Utils.sameDate(dateTime3, dateTime6);
        java.lang.String str8 = dateTime6.getMonth();
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean13 = dateTime12.isNull();
        int int14 = dateTime12.getDayOfYear();
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        long long25 = dateTime22.getDeltaDays(dateTime24);
        int int26 = dateTime22.getHour();
        dateTime22.add((int) (byte) 100, (int) (byte) 0);
        double double30 = dateTime18.getDeltaYears(dateTime22);
        boolean boolean31 = dateTime12.isLessThanOrEqual(dateTime18);
        boolean boolean32 = dateTime6.isEqual(dateTime12);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat38 = null;
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat38);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double42 = dateTime39.getDeltaYears(dateTime41);
        boolean boolean43 = dateTime36.isLessThan(dateTime41);
        java.lang.String str44 = dateTime41.toFullString();
        int int45 = dateTime41.getSecond();
        boolean boolean46 = dateTime12.isGreaterThan(dateTime41);
        int int47 = dateTime41.getYear();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UNKNOWN" + "'", str8, "UNKNOWN");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-719795L) + "'", long25 == (-719795L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str44, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1969 + "'", int47 == 1969);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1468");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        boolean boolean6 = dateTime2.isWeekday();
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long11 = dateTime2.getDeltaDays(dateTime10);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(dateTime2);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime(100L);
        double double19 = dateTime16.getDeltaYears(dateTime18);
        boolean boolean20 = dateTime18.isWeekday();
        java.util.Date date21 = dateTime18.getTime();
        dateTime2.set(date21);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        int int25 = dateTime24.getMs();
        java.lang.String str26 = dateTime24.toString();
        boolean boolean27 = dateTime2.isLessThanOrEqual(dateTime24);
        net.ajaskey.common.DateTime dateTime30 = dateTime2.parse("           35", "Wed 31-Dec-1969 17:00:00");
        int int31 = dateTime2.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1972.041095890411d) + "'", double19 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "31-Dec-1969" + "'", str26, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1469");
        java.text.SimpleDateFormat simpleDateFormat2 = null;
        java.text.SimpleDateFormat simpleDateFormat3 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime("January", simpleDateFormat2, simpleDateFormat3);
        java.text.SimpleDateFormat simpleDateFormat7 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime("January", simpleDateFormat7);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime("", simpleDateFormat7);
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("", simpleDateFormat3, simpleDateFormat7);
        java.lang.Class<?> wildcardClass11 = simpleDateFormat7.getClass();
        org.junit.Assert.assertNotNull(simpleDateFormat3);
        org.junit.Assert.assertNotNull(simpleDateFormat7);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1470");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime(594, 7, 100);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1471");
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("10-Apr-0002", "5.00");
        dateTime2.set((int) (short) 10, 4, (int) 'a');
        int int7 = dateTime2.getHour();
        dateTime2.setFirstWorkDay();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1472");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt(18, 252);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                                                                                                                                                                                          18" + "'", str2, "                                                                                                                                                                                                                                                          18");
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1473");
        java.lang.String str2 = net.ajaskey.common.Utils.ifmt(313, 36);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                 313" + "'", str2, "                                 313");
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1474");
        net.ajaskey.common.Utils.TAB = "Invalid fmt";
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1475");
        java.lang.String str2 = net.ajaskey.common.Utils.fmt((double) 621, (int) ' ');
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Invalid fmt" + "'", str2, "Invalid fmt");
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1476");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat5 = null;
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat5);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        boolean boolean10 = dateTime3.isLessThan(dateTime8);
        java.lang.String str11 = dateTime8.toFullString();
        dateTime8.add(10, (int) (byte) -1);
        java.text.SimpleDateFormat simpleDateFormat16 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat18 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat19 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime20 = new net.ajaskey.common.DateTime("", simpleDateFormat18, simpleDateFormat19);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat16, simpleDateFormat19);
        boolean boolean22 = dateTime8.isGreaterThan(dateTime21);
        java.text.SimpleDateFormat simpleDateFormat24 = null;
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat24);
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double28 = dateTime25.getDeltaYears(dateTime27);
        boolean boolean29 = dateTime25.isWeekday();
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long34 = dateTime25.getDeltaDays(dateTime33);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime(dateTime25);
        boolean boolean36 = dateTime21.sameDate(dateTime25);
        boolean boolean37 = dateTime21.isNull();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str11, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertNotNull(simpleDateFormat16);
        org.junit.Assert.assertNotNull(simpleDateFormat18);
        org.junit.Assert.assertNotNull(simpleDateFormat19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1477");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("Thu 10-Apr-0002 10:42:54");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1478");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readTextFile("                                                                                                                                                                                                                                                                                                                                                                        1,967", true);
        org.junit.Assert.assertNotNull(strList2);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1479");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(100L);
        int int13 = dateTime12.getMs();
        boolean boolean14 = dateTime9.isGreaterThanOrEqual(dateTime12);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        dateTime16.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(100L);
        double double27 = dateTime24.getDeltaYears(dateTime26);
        boolean boolean28 = dateTime26.isWeekday();
        java.util.Date date29 = dateTime26.getTime();
        dateTime16.set(dateTime26);
        boolean boolean31 = net.ajaskey.common.Utils.sameDate(dateTime9, dateTime16);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime(100L);
        double double38 = dateTime35.getDeltaYears(dateTime37);
        int int39 = dateTime35.getHour();
        java.text.SimpleDateFormat simpleDateFormat41 = null;
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat41);
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double45 = dateTime42.getDeltaYears(dateTime44);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean50 = dateTime44.isEqual(dateTime49);
        java.util.Calendar calendar51 = dateTime44.getCal();
        java.lang.String str52 = dateTime44.format();
        net.ajaskey.common.DateTime dateTime53 = null;
        long long54 = dateTime44.getDeltaDays(dateTime53);
        int int55 = dateTime44.getSecond();
        net.ajaskey.common.DateTime dateTime59 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime(100L);
        double double62 = dateTime59.getDeltaYears(dateTime61);
        java.text.SimpleDateFormat simpleDateFormat64 = null;
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat64);
        net.ajaskey.common.DateTime dateTime67 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double68 = dateTime65.getDeltaYears(dateTime67);
        boolean boolean69 = dateTime65.isWeekday();
        boolean boolean70 = dateTime59.sameDate(dateTime65);
        int int71 = dateTime65.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime72 = dateTime44.copy(dateTime65);
        dateTime35.set(dateTime65);
        net.ajaskey.common.DateTime dateTime75 = dateTime35.parse("Thursday");
        double double76 = dateTime16.getDeltaYears(dateTime35);
        int int77 = dateTime16.getMinute();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1972.041095890411d) + "'", double27 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1972.041095890411d) + "'", double38 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "BAD-DATE-FORMAT" + "'", str52, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1972.041095890411d) + "'", double62 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNull(dateTime72);
        org.junit.Assert.assertNull(dateTime75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1972.041095890411d + "'", double76 == 1972.041095890411d);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1480");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        dateTime1.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str6 = dateTime1.getMonth();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        dateTime8.set((int) (byte) 100, (-1), (int) '#');
        java.lang.String str13 = dateTime8.getMonth();
        int int14 = dateTime8.getMs();
        net.ajaskey.common.DateTime dateTime15 = dateTime1.copy(dateTime8);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime(100L);
        int int18 = dateTime17.getMs();
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        double double25 = dateTime22.getDeltaYears(dateTime24);
        java.text.SimpleDateFormat simpleDateFormat26 = dateTime22.getSdf();
        boolean boolean27 = dateTime17.isLessThanOrEqual(dateTime22);
        java.text.SimpleDateFormat simpleDateFormat29 = null;
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat29);
        net.ajaskey.common.DateTime dateTime32 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double33 = dateTime30.getDeltaYears(dateTime32);
        boolean boolean34 = dateTime30.isWeekday();
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long39 = dateTime30.getDeltaDays(dateTime38);
        long long40 = dateTime17.getDeltaDays(dateTime38);
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat46 = null;
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat46);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double50 = dateTime47.getDeltaYears(dateTime49);
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean55 = dateTime49.isEqual(dateTime54);
        java.util.Calendar calendar56 = dateTime49.getCal();
        boolean boolean57 = dateTime44.isLessThan(dateTime49);
        boolean boolean58 = net.ajaskey.common.Utils.sameDate(dateTime17, dateTime44);
        boolean boolean59 = dateTime8.isEqual(dateTime17);
        java.lang.String str60 = dateTime17.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "January" + "'", str6, "January");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "January" + "'", str13, "January");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1972.041095890411d) + "'", double25 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 719795L + "'", long40 == 719795L);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "31-Dec-1969" + "'", str60, "31-Dec-1969");
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1481");
        java.lang.String str1 = net.ajaskey.common.Utils.getFromUrl("                                     5");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1482");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) (short) 1);
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime(100L);
        double double8 = dateTime5.getDeltaYears(dateTime7);
        int int9 = dateTime5.getHour();
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime(100L);
        double double16 = dateTime13.getDeltaYears(dateTime15);
        int int17 = dateTime13.getHour();
        dateTime13.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat22 = null;
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat22);
        net.ajaskey.common.DateTime dateTime25 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double26 = dateTime23.getDeltaYears(dateTime25);
        boolean boolean27 = dateTime13.isEqual(dateTime25);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat33 = null;
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat33);
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double37 = dateTime34.getDeltaYears(dateTime36);
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean42 = dateTime36.isEqual(dateTime41);
        java.util.Calendar calendar43 = dateTime36.getCal();
        boolean boolean44 = dateTime31.isLessThan(dateTime36);
        dateTime31.setFirstWorkDay();
        boolean boolean46 = dateTime13.sameDate(dateTime31);
        dateTime5.set(dateTime13);
        java.text.SimpleDateFormat simpleDateFormat49 = null;
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat49);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double53 = dateTime50.getDeltaYears(dateTime52);
        boolean boolean54 = dateTime50.isWeekday();
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long59 = dateTime50.getDeltaDays(dateTime58);
        boolean boolean60 = dateTime13.isLessThanOrEqual(dateTime50);
        int int61 = dateTime13.getYear();
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime67 = new net.ajaskey.common.DateTime(100L);
        double double68 = dateTime65.getDeltaYears(dateTime67);
        int int69 = dateTime65.getHour();
        dateTime65.add(9, 3);
        java.text.SimpleDateFormat simpleDateFormat74 = null;
        net.ajaskey.common.DateTime dateTime75 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat74);
        net.ajaskey.common.DateTime dateTime77 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double78 = dateTime75.getDeltaYears(dateTime77);
        boolean boolean79 = dateTime65.isEqual(dateTime77);
        int int80 = dateTime65.getMinute();
        dateTime65.setFirstWorkDay();
        long long82 = dateTime13.getDeltaDays(dateTime65);
        net.ajaskey.common.DateTime dateTime86 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime88 = new net.ajaskey.common.DateTime(100L);
        double double89 = dateTime86.getDeltaYears(dateTime88);
        boolean boolean90 = dateTime88.isWeekday();
        net.ajaskey.common.DateTime dateTime93 = dateTime88.parse("           35", "UNKNOWN");
        boolean boolean94 = dateTime13.isLessThanOrEqual(dateTime93);
        dateTime1.set(dateTime93);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = dateTime93.getDayOfMonth();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1972.041095890411d) + "'", double8 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1972.041095890411d) + "'", double16 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1972.041095890411d) + "'", double68 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 44 + "'", int80 == 44);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-1972.041095890411d) + "'", double89 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1483");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        int int3 = dateTime1.getHour();
        java.text.SimpleDateFormat simpleDateFormat5 = null;
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat5);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        boolean boolean10 = dateTime6.isWeekday();
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long15 = dateTime6.getDeltaDays(dateTime14);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(dateTime6);
        boolean boolean17 = dateTime1.isLessThanOrEqual(dateTime16);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime(100L);
        double double24 = dateTime21.getDeltaYears(dateTime23);
        int int25 = dateTime21.getHour();
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime();
        net.ajaskey.common.DateTime dateTime27 = null;
        boolean boolean28 = dateTime26.isGreaterThan(dateTime27);
        java.text.SimpleDateFormat simpleDateFormat30 = null;
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat30);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double34 = dateTime31.getDeltaYears(dateTime33);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean39 = dateTime33.isEqual(dateTime38);
        java.util.Calendar calendar40 = dateTime33.getCal();
        net.ajaskey.common.DateTime dateTime41 = new net.ajaskey.common.DateTime(calendar40);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime(calendar40);
        boolean boolean43 = dateTime26.isLessThan(dateTime42);
        boolean boolean44 = dateTime21.isLessThan(dateTime26);
        java.lang.String str46 = dateTime21.format("     0");
        double double47 = dateTime16.getDeltaYears(dateTime21);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime(100L);
        int int50 = dateTime49.getMs();
        boolean boolean51 = dateTime49.isWeekday();
        int int52 = dateTime49.getHour();
        dateTime49.setFirstWorkDay();
        java.lang.String str54 = dateTime49.format();
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime(62190310608217L);
        boolean boolean57 = dateTime49.isGreaterThanOrEqual(dateTime56);
        net.ajaskey.common.DateTime dateTime58 = dateTime21.copy(dateTime56);
        java.lang.String str59 = dateTime58.getMonth();
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime((long) (byte) 100);
        boolean boolean62 = dateTime58.sameDate(dateTime61);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1972.041095890411d) + "'", double24 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "     0" + "'", str46, "     0");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2022.5561643835617d + "'", double47 == 2022.5561643835617d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "BAD-DATE-FORMAT" + "'", str54, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "September" + "'", str59, "September");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1484");
        java.util.List<java.lang.String> strList2 = net.ajaskey.common.TextUtils.readGzipFile("-716,608.00", true);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1485");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        boolean boolean6 = dateTime2.isWeekday();
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long11 = dateTime2.getDeltaDays(dateTime10);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(dateTime2);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime(100L);
        double double19 = dateTime16.getDeltaYears(dateTime18);
        boolean boolean20 = dateTime18.isWeekday();
        java.util.Date date21 = dateTime18.getTime();
        dateTime2.set(date21);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        int int25 = dateTime24.getMs();
        java.lang.String str26 = dateTime24.toString();
        boolean boolean27 = dateTime2.isLessThanOrEqual(dateTime24);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime(100L);
        double double34 = dateTime31.getDeltaYears(dateTime33);
        int int35 = dateTime31.getHour();
        java.text.SimpleDateFormat simpleDateFormat37 = null;
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat37);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double41 = dateTime38.getDeltaYears(dateTime40);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean46 = dateTime40.isEqual(dateTime45);
        java.util.Calendar calendar47 = dateTime40.getCal();
        dateTime31.set(calendar47);
        net.ajaskey.common.DateTime dateTime49 = new net.ajaskey.common.DateTime(calendar47);
        net.ajaskey.common.DateTime dateTime53 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat55 = null;
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat55);
        boolean boolean57 = net.ajaskey.common.Utils.sameDate(dateTime53, dateTime56);
        boolean boolean58 = dateTime49.isGreaterThanOrEqual(dateTime53);
        java.text.SimpleDateFormat simpleDateFormat61 = null;
        java.text.SimpleDateFormat simpleDateFormat62 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime("January", simpleDateFormat61, simpleDateFormat62);
        net.ajaskey.common.DateTime dateTime64 = new net.ajaskey.common.DateTime("100.00", simpleDateFormat61);
        java.lang.String str66 = dateTime64.format("");
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime("5.00", "     10");
        boolean boolean70 = net.ajaskey.common.Utils.sameMonth(dateTime64, dateTime69);
        boolean boolean71 = dateTime49.isEqual(dateTime64);
        boolean boolean72 = net.ajaskey.common.Utils.sameMonth(dateTime2, dateTime64);
        net.ajaskey.common.DateTime dateTime75 = dateTime64.parse("Thu 10-Apr-0002 10:44:15", "                              -1");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1972.041095890411d) + "'", double19 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "31-Dec-1969" + "'", str26, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1972.041095890411d) + "'", double34 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(simpleDateFormat62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "BAD-DATE-FORMAT" + "'", str66, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(dateTime75);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1486");
        net.ajaskey.common.TextUtils.printline("Thu 25-Jun-2020 10:43:34");
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1487");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        java.util.Calendar calendar11 = dateTime4.getCal();
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(calendar11);
        net.ajaskey.common.DateTime dateTime13 = new net.ajaskey.common.DateTime(calendar11);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime(calendar11);
        java.text.SimpleDateFormat simpleDateFormat16 = null;
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat16);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double20 = dateTime17.getDeltaYears(dateTime19);
        boolean boolean21 = dateTime19.isNull();
        boolean boolean22 = net.ajaskey.common.Utils.sameDate(dateTime14, dateTime19);
        boolean boolean23 = dateTime14.isWeekday();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1488");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((-1960), 86, 0);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1489");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        double double9 = dateTime6.getDeltaYears(dateTime8);
        java.text.SimpleDateFormat simpleDateFormat10 = dateTime6.getSdf();
        boolean boolean11 = dateTime1.isLessThanOrEqual(dateTime6);
        java.text.SimpleDateFormat simpleDateFormat13 = null;
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat13);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        boolean boolean18 = dateTime14.isWeekday();
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long23 = dateTime14.getDeltaDays(dateTime22);
        long long24 = dateTime1.getDeltaDays(dateTime22);
        java.lang.String str25 = dateTime22.toFullString();
        java.util.Calendar calendar26 = dateTime22.getCal();
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime(calendar26);
        net.ajaskey.common.DateTime dateTime31 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime33 = new net.ajaskey.common.DateTime(100L);
        long long34 = dateTime31.getDeltaDays(dateTime33);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime(100L);
        double double41 = dateTime38.getDeltaYears(dateTime40);
        java.util.Date date42 = dateTime38.getTime();
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime(date42);
        net.ajaskey.common.DateTime dateTime46 = dateTime43.parse("31-Dec-1969", "January");
        net.ajaskey.common.DateTime dateTime48 = new net.ajaskey.common.DateTime(100L);
        int int49 = dateTime48.getMs();
        java.lang.String str50 = dateTime48.toString();
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime(100L);
        double double57 = dateTime54.getDeltaYears(dateTime56);
        int int58 = dateTime54.getHour();
        int int59 = dateTime54.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime(100L);
        double double66 = dateTime63.getDeltaYears(dateTime65);
        boolean boolean67 = dateTime65.isWeekday();
        boolean boolean68 = net.ajaskey.common.Utils.sameDate(dateTime54, dateTime65);
        boolean boolean69 = net.ajaskey.common.Utils.sameDate(dateTime48, dateTime54);
        dateTime43.set(dateTime54);
        java.util.Calendar calendar71 = dateTime54.getCal();
        boolean boolean72 = dateTime31.isLessThan(dateTime54);
        boolean boolean73 = dateTime54.isWeekday();
        boolean boolean74 = dateTime27.isLessThanOrEqual(dateTime54);
        net.ajaskey.common.DateTime dateTime75 = new net.ajaskey.common.DateTime(dateTime27);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1972.041095890411d) + "'", double9 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 719795L + "'", long24 == 719795L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Thu 10-Apr-0002 10:44:19" + "'", str25, "Thu 10-Apr-0002 10:44:19");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-62190310540267,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=19,MILLISECOND=733,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-719795L) + "'", long34 == (-719795L));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1972.041095890411d) + "'", double41 == (-1972.041095890411d));
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Thu Apr 10 10:44:19 MST 2");
        org.junit.Assert.assertNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "31-Dec-1969" + "'", str50, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1972.041095890411d) + "'", double57 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1972.041095890411d) + "'", double66 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-62190310540266,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=19,MILLISECOND=734,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1490");
        java.lang.String str2 = net.ajaskey.common.Utils.lfmt(701439L, 177);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                                                                                                          701,439" + "'", str2, "                                                                                                                                                                          701,439");
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1491");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime((long) (short) 0);
        int int2 = dateTime1.getHour();
        net.ajaskey.common.DateTime dateTime5 = dateTime1.parse("                0", "January                                 42                                 42                                                                                               52.00                                 42hi!                                 42");
        java.lang.String str6 = dateTime1.toString();
        net.ajaskey.common.DateTime dateTime8 = new net.ajaskey.common.DateTime(100L);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime(100L);
        double double15 = dateTime12.getDeltaYears(dateTime14);
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime(100L);
        double double22 = dateTime19.getDeltaYears(dateTime21);
        int int23 = dateTime19.getHour();
        int int24 = dateTime19.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime(100L);
        double double31 = dateTime28.getDeltaYears(dateTime30);
        boolean boolean32 = dateTime30.isWeekday();
        boolean boolean33 = net.ajaskey.common.Utils.sameDate(dateTime19, dateTime30);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime(100L);
        dateTime35.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime43 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime45 = new net.ajaskey.common.DateTime(100L);
        double double46 = dateTime43.getDeltaYears(dateTime45);
        boolean boolean47 = dateTime45.isWeekday();
        java.util.Date date48 = dateTime45.getTime();
        dateTime35.set(dateTime45);
        int int50 = dateTime35.getYear();
        boolean boolean51 = dateTime30.isGreaterThanOrEqual(dateTime35);
        boolean boolean52 = dateTime12.sameDate(dateTime30);
        net.ajaskey.common.DateTime dateTime53 = dateTime8.copy(dateTime12);
        java.util.Date date54 = null;
        net.ajaskey.common.DateTime dateTime55 = new net.ajaskey.common.DateTime(date54);
        net.ajaskey.common.DateTime dateTime57 = dateTime55.parse("Thu 10-Apr-0002 10:42:58");
        boolean boolean58 = dateTime12.isGreaterThan(dateTime55);
        boolean boolean59 = dateTime1.sameDate(dateTime12);
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime65 = new net.ajaskey.common.DateTime(100L);
        double double66 = dateTime63.getDeltaYears(dateTime65);
        java.util.Date date67 = dateTime63.getTime();
        net.ajaskey.common.DateTime dateTime68 = new net.ajaskey.common.DateTime(date67);
        net.ajaskey.common.DateTime dateTime71 = dateTime68.parse("31-Dec-1969", "January");
        net.ajaskey.common.DateTime dateTime73 = new net.ajaskey.common.DateTime(100L);
        int int74 = dateTime73.getMs();
        java.lang.String str75 = dateTime73.toString();
        net.ajaskey.common.DateTime dateTime79 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime81 = new net.ajaskey.common.DateTime(100L);
        double double82 = dateTime79.getDeltaYears(dateTime81);
        int int83 = dateTime79.getHour();
        int int84 = dateTime79.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime88 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime90 = new net.ajaskey.common.DateTime(100L);
        double double91 = dateTime88.getDeltaYears(dateTime90);
        boolean boolean92 = dateTime90.isWeekday();
        boolean boolean93 = net.ajaskey.common.Utils.sameDate(dateTime79, dateTime90);
        boolean boolean94 = net.ajaskey.common.Utils.sameDate(dateTime73, dateTime79);
        dateTime68.set(dateTime79);
        java.util.Calendar calendar96 = dateTime79.getCal();
        net.ajaskey.common.DateTime dateTime97 = new net.ajaskey.common.DateTime(calendar96);
        dateTime1.set(calendar96);
        boolean boolean99 = dateTime1.isNull();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
        org.junit.Assert.assertNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "31-Dec-1969" + "'", str6, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1972.041095890411d) + "'", double15 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1972.041095890411d) + "'", double22 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1972.041095890411d) + "'", double31 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1972.041095890411d) + "'", double46 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1969 + "'", int50 == 1969);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1972.041095890411d) + "'", double66 == (-1972.041095890411d));
        org.junit.Assert.assertNotNull(date67);
// flaky:         org.junit.Assert.assertEquals(date67.toString(), "Thu Apr 10 10:44:19 MST 2");
        org.junit.Assert.assertNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "31-Dec-1969" + "'", str75, "31-Dec-1969");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-1972.041095890411d) + "'", double82 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-1972.041095890411d) + "'", double91 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(calendar96);
// flaky:         org.junit.Assert.assertEquals(calendar96.toString(), "java.util.GregorianCalendar[time=-62190310540204,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=44,SECOND=19,MILLISECOND=796,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1492");
        java.text.SimpleDateFormat simpleDateFormat3 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat4 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime("", simpleDateFormat3, simpleDateFormat4);
        java.text.SimpleDateFormat simpleDateFormat7 = null;
        java.text.SimpleDateFormat simpleDateFormat8 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime("January", simpleDateFormat7, simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat3, simpleDateFormat8);
        java.text.SimpleDateFormat simpleDateFormat13 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat14 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime15 = new net.ajaskey.common.DateTime("", simpleDateFormat13, simpleDateFormat14);
        net.ajaskey.common.DateTime dateTime17 = new net.ajaskey.common.DateTime(100L);
        int int18 = dateTime17.getMs();
        java.text.SimpleDateFormat simpleDateFormat19 = net.ajaskey.common.Utils.sdf;
        dateTime17.setSdf(simpleDateFormat19);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat14, simpleDateFormat19);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime("                             100", simpleDateFormat8, simpleDateFormat14);
        java.text.SimpleDateFormat simpleDateFormat23 = dateTime22.getSdf();
        net.ajaskey.common.DateTime dateTime27 = new net.ajaskey.common.DateTime(12, 345, 252);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime(100L);
        int int31 = dateTime30.getMs();
        java.text.SimpleDateFormat simpleDateFormat32 = net.ajaskey.common.Utils.sdf;
        dateTime30.setSdf(simpleDateFormat32);
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat32);
        java.text.SimpleDateFormat simpleDateFormat36 = null;
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat36);
        net.ajaskey.common.DateTime dateTime39 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double40 = dateTime37.getDeltaYears(dateTime39);
        boolean boolean41 = dateTime39.isNull();
        java.text.SimpleDateFormat simpleDateFormat43 = null;
        net.ajaskey.common.DateTime dateTime44 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat43);
        dateTime44.set((int) ' ', 0, 11);
        boolean boolean49 = dateTime39.isGreaterThanOrEqual(dateTime44);
        double double50 = dateTime34.getDeltaYears(dateTime39);
        net.ajaskey.common.DateTime dateTime54 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime(100L);
        double double57 = dateTime54.getDeltaYears(dateTime56);
        int int58 = dateTime54.getHour();
        java.text.SimpleDateFormat simpleDateFormat60 = null;
        net.ajaskey.common.DateTime dateTime61 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat60);
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double64 = dateTime61.getDeltaYears(dateTime63);
        net.ajaskey.common.DateTime dateTime68 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean69 = dateTime63.isEqual(dateTime68);
        java.util.Calendar calendar70 = dateTime63.getCal();
        java.lang.String str71 = dateTime63.format();
        net.ajaskey.common.DateTime dateTime72 = null;
        long long73 = dateTime63.getDeltaDays(dateTime72);
        int int74 = dateTime63.getSecond();
        net.ajaskey.common.DateTime dateTime78 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime80 = new net.ajaskey.common.DateTime(100L);
        double double81 = dateTime78.getDeltaYears(dateTime80);
        java.text.SimpleDateFormat simpleDateFormat83 = null;
        net.ajaskey.common.DateTime dateTime84 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat83);
        net.ajaskey.common.DateTime dateTime86 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double87 = dateTime84.getDeltaYears(dateTime86);
        boolean boolean88 = dateTime84.isWeekday();
        boolean boolean89 = dateTime78.sameDate(dateTime84);
        int int90 = dateTime84.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime91 = dateTime63.copy(dateTime84);
        dateTime54.set(dateTime84);
        boolean boolean93 = dateTime39.sameDate(dateTime84);
        java.util.Date date94 = null;
        net.ajaskey.common.DateTime dateTime95 = new net.ajaskey.common.DateTime(date94);
        boolean boolean96 = dateTime84.isGreaterThan(dateTime95);
        dateTime27.set(dateTime84);
        dateTime22.set(dateTime27);
        int int99 = dateTime22.getMs();
        org.junit.Assert.assertNotNull(simpleDateFormat3);
        org.junit.Assert.assertNotNull(simpleDateFormat4);
        org.junit.Assert.assertNotNull(simpleDateFormat8);
        org.junit.Assert.assertNotNull(simpleDateFormat13);
        org.junit.Assert.assertNotNull(simpleDateFormat14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat19);
        org.junit.Assert.assertNull(simpleDateFormat23);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat32);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1972.041095890411d) + "'", double57 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "BAD-DATE-FORMAT" + "'", str71, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-1972.041095890411d) + "'", double81 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int99 + "' != '" + 841 + "'", int99 == 841);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1493");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        dateTime2.set((int) ' ', 0, 11);
        boolean boolean7 = dateTime2.isWeekday();
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime(100L);
        int int10 = dateTime9.getMs();
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime(100L);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        java.text.SimpleDateFormat simpleDateFormat18 = dateTime14.getSdf();
        boolean boolean19 = dateTime9.isLessThanOrEqual(dateTime14);
        java.util.Date date20 = dateTime14.getTime();
        dateTime2.set(date20);
        net.ajaskey.common.DateTime dateTime22 = new net.ajaskey.common.DateTime(date20);
        java.util.Date date23 = dateTime22.getTime();
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(date23);
        java.text.SimpleDateFormat simpleDateFormat28 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat29 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime("", simpleDateFormat28, simpleDateFormat29);
        java.text.SimpleDateFormat simpleDateFormat32 = null;
        java.text.SimpleDateFormat simpleDateFormat33 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime34 = new net.ajaskey.common.DateTime("January", simpleDateFormat32, simpleDateFormat33);
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime("Wednesday", simpleDateFormat28, simpleDateFormat33);
        java.text.SimpleDateFormat simpleDateFormat38 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat39 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime("", simpleDateFormat38, simpleDateFormat39);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime(100L);
        int int43 = dateTime42.getMs();
        java.text.SimpleDateFormat simpleDateFormat44 = net.ajaskey.common.Utils.sdf;
        dateTime42.setSdf(simpleDateFormat44);
        net.ajaskey.common.DateTime dateTime46 = new net.ajaskey.common.DateTime("31-Dec-1969", simpleDateFormat39, simpleDateFormat44);
        net.ajaskey.common.DateTime dateTime47 = new net.ajaskey.common.DateTime("                             100", simpleDateFormat33, simpleDateFormat39);
        java.text.SimpleDateFormat simpleDateFormat48 = dateTime47.getSdf();
        boolean boolean49 = dateTime24.isEqual(dateTime47);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime(100L);
        int int52 = dateTime51.getMs();
        net.ajaskey.common.DateTime dateTime56 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime58 = new net.ajaskey.common.DateTime(100L);
        double double59 = dateTime56.getDeltaYears(dateTime58);
        java.text.SimpleDateFormat simpleDateFormat60 = dateTime56.getSdf();
        boolean boolean61 = dateTime51.isLessThanOrEqual(dateTime56);
        boolean boolean62 = dateTime56.isWeekday();
        boolean boolean63 = dateTime47.isGreaterThanOrEqual(dateTime56);
        int int64 = dateTime47.getYear();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1972.041095890411d) + "'", double17 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Thu Apr 10 10:44:19 MST 2");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Thu Apr 10 10:44:19 MST 2");
        org.junit.Assert.assertNotNull(simpleDateFormat28);
        org.junit.Assert.assertNotNull(simpleDateFormat29);
        org.junit.Assert.assertNotNull(simpleDateFormat33);
        org.junit.Assert.assertNotNull(simpleDateFormat38);
        org.junit.Assert.assertNotNull(simpleDateFormat39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(simpleDateFormat44);
        org.junit.Assert.assertNull(simpleDateFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1972.041095890411d) + "'", double59 == (-1972.041095890411d));
        org.junit.Assert.assertNull(simpleDateFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1494");
        java.text.SimpleDateFormat simpleDateFormat1 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat3 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat4 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime5 = new net.ajaskey.common.DateTime("", simpleDateFormat3, simpleDateFormat4);
        net.ajaskey.common.DateTime dateTime6 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat1, simpleDateFormat4);
        int int7 = dateTime6.getHour();
        int int8 = dateTime6.getDayOfYear();
        dateTime6.add(15, 4);
        int int12 = dateTime6.getDayOfYear();
        org.junit.Assert.assertNotNull(simpleDateFormat1);
        org.junit.Assert.assertNotNull(simpleDateFormat3);
        org.junit.Assert.assertNotNull(simpleDateFormat4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1495");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        boolean boolean6 = dateTime2.isWeekday();
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        long long11 = dateTime2.getDeltaDays(dateTime10);
        dateTime10.set((int) (short) -1, (int) (byte) 0, (int) ' ');
        net.ajaskey.common.DateTime dateTime19 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime(100L);
        double double22 = dateTime19.getDeltaYears(dateTime21);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime(100L);
        double double29 = dateTime26.getDeltaYears(dateTime28);
        int int30 = dateTime26.getHour();
        int int31 = dateTime26.getDayOfMonth();
        net.ajaskey.common.DateTime dateTime35 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime37 = new net.ajaskey.common.DateTime(100L);
        double double38 = dateTime35.getDeltaYears(dateTime37);
        boolean boolean39 = dateTime37.isWeekday();
        boolean boolean40 = net.ajaskey.common.Utils.sameDate(dateTime26, dateTime37);
        net.ajaskey.common.DateTime dateTime42 = new net.ajaskey.common.DateTime(100L);
        dateTime42.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime52 = new net.ajaskey.common.DateTime(100L);
        double double53 = dateTime50.getDeltaYears(dateTime52);
        boolean boolean54 = dateTime52.isWeekday();
        java.util.Date date55 = dateTime52.getTime();
        dateTime42.set(dateTime52);
        int int57 = dateTime42.getYear();
        boolean boolean58 = dateTime37.isGreaterThanOrEqual(dateTime42);
        boolean boolean59 = dateTime19.sameDate(dateTime37);
        boolean boolean60 = dateTime10.isLessThanOrEqual(dateTime19);
        java.util.Date date61 = dateTime10.getTime();
        net.ajaskey.common.DateTime dateTime63 = new net.ajaskey.common.DateTime(100L);
        int int64 = dateTime63.getMs();
        int int65 = dateTime63.getHour();
        net.ajaskey.common.DateTime dateTime69 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        java.text.SimpleDateFormat simpleDateFormat71 = null;
        net.ajaskey.common.DateTime dateTime72 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat71);
        net.ajaskey.common.DateTime dateTime74 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double75 = dateTime72.getDeltaYears(dateTime74);
        boolean boolean76 = dateTime69.isLessThan(dateTime74);
        java.lang.String str77 = dateTime74.toFullString();
        dateTime74.add(10, (int) (byte) -1);
        java.text.SimpleDateFormat simpleDateFormat82 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat84 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat85 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime86 = new net.ajaskey.common.DateTime("", simpleDateFormat84, simpleDateFormat85);
        net.ajaskey.common.DateTime dateTime87 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat82, simpleDateFormat85);
        boolean boolean88 = dateTime74.isGreaterThan(dateTime87);
        boolean boolean89 = dateTime63.isEqual(dateTime74);
        int int90 = dateTime63.getDayOfYear();
        dateTime10.set(dateTime63);
        net.ajaskey.common.DateTime dateTime93 = dateTime10.parse("               313");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1972.041095890411d) + "'", double22 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1972.041095890411d) + "'", double29 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1972.041095890411d) + "'", double38 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1972.041095890411d) + "'", double53 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1969 + "'", int57 == 1969);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Wed Feb 01 10:44:20 MST 2");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str77, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertNotNull(simpleDateFormat82);
        org.junit.Assert.assertNotNull(simpleDateFormat84);
        org.junit.Assert.assertNotNull(simpleDateFormat85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 365 + "'", int90 == 365);
        org.junit.Assert.assertNull(dateTime93);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1496");
        net.ajaskey.common.Utils.makeDir("      32");
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1497");
        net.ajaskey.common.DateTime dateTime1 = new net.ajaskey.common.DateTime(100L);
        int int2 = dateTime1.getMs();
        boolean boolean3 = dateTime1.isWeekday();
        int int4 = dateTime1.getHour();
        java.text.SimpleDateFormat simpleDateFormat6 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime7 = new net.ajaskey.common.DateTime("January", simpleDateFormat6);
        dateTime1.setSdf(simpleDateFormat6);
        java.lang.String str9 = dateTime1.toFullString();
        java.lang.String str10 = dateTime1.toFullString();
        int int11 = dateTime1.getSecond();
        java.text.SimpleDateFormat simpleDateFormat13 = null;
        net.ajaskey.common.DateTime dateTime14 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat13);
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double17 = dateTime14.getDeltaYears(dateTime16);
        net.ajaskey.common.DateTime dateTime21 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean22 = dateTime16.isEqual(dateTime21);
        net.ajaskey.common.DateTime dateTime24 = new net.ajaskey.common.DateTime(100L);
        int int25 = dateTime24.getMs();
        boolean boolean26 = dateTime21.isGreaterThanOrEqual(dateTime24);
        net.ajaskey.common.DateTime dateTime28 = new net.ajaskey.common.DateTime(100L);
        dateTime28.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime36 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime(100L);
        double double39 = dateTime36.getDeltaYears(dateTime38);
        boolean boolean40 = dateTime38.isWeekday();
        java.util.Date date41 = dateTime38.getTime();
        dateTime28.set(dateTime38);
        boolean boolean43 = net.ajaskey.common.Utils.sameDate(dateTime21, dateTime28);
        boolean boolean44 = dateTime21.isNull();
        java.text.SimpleDateFormat simpleDateFormat46 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat48 = net.ajaskey.common.Utils.sdf;
        java.text.SimpleDateFormat simpleDateFormat49 = net.ajaskey.common.Utils.sdf;
        net.ajaskey.common.DateTime dateTime50 = new net.ajaskey.common.DateTime("", simpleDateFormat48, simpleDateFormat49);
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime("                                                                                               52.00", simpleDateFormat46, simpleDateFormat49);
        dateTime21.setSdf(simpleDateFormat49);
        boolean boolean53 = dateTime1.isLessThanOrEqual(dateTime21);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertNotNull(simpleDateFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str9, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Wed 31-Dec-1969 17:00:00" + "'", str10, "Wed 31-Dec-1969 17:00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1972.041095890411d) + "'", double39 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(simpleDateFormat46);
        org.junit.Assert.assertNotNull(simpleDateFormat48);
        org.junit.Assert.assertNotNull(simpleDateFormat49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1498");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        net.ajaskey.common.DateTime dateTime9 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean10 = dateTime4.isEqual(dateTime9);
        java.util.Calendar calendar11 = dateTime4.getCal();
        java.lang.String str12 = dateTime4.format();
        net.ajaskey.common.DateTime dateTime13 = null;
        long long14 = dateTime4.getDeltaDays(dateTime13);
        int int15 = dateTime4.getSecond();
        int int16 = dateTime4.getHour();
        dateTime4.set((int) (short) 1, 6, (int) (byte) 1);
        java.text.SimpleDateFormat simpleDateFormat22 = null;
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat22);
        java.util.Calendar calendar24 = dateTime23.getCal();
        int int25 = dateTime23.getMinute();
        dateTime4.set(dateTime23);
        boolean boolean27 = dateTime23.isWeekday();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=6,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "BAD-DATE-FORMAT" + "'", str12, "BAD-DATE-FORMAT");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNull(calendar24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1499");
        net.ajaskey.common.DateTime dateTime3 = new net.ajaskey.common.DateTime((int) (byte) -1, 378, 191);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "CommonTests2.test1500");
        java.text.SimpleDateFormat simpleDateFormat1 = null;
        net.ajaskey.common.DateTime dateTime2 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat1);
        net.ajaskey.common.DateTime dateTime4 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double5 = dateTime2.getDeltaYears(dateTime4);
        java.text.SimpleDateFormat simpleDateFormat8 = null;
        java.text.SimpleDateFormat simpleDateFormat9 = net.ajaskey.common.Utils.sdfFull;
        net.ajaskey.common.DateTime dateTime10 = new net.ajaskey.common.DateTime("January", simpleDateFormat8, simpleDateFormat9);
        net.ajaskey.common.DateTime dateTime11 = new net.ajaskey.common.DateTime("Thursday", simpleDateFormat8);
        net.ajaskey.common.DateTime dateTime12 = new net.ajaskey.common.DateTime(dateTime11);
        boolean boolean13 = dateTime2.isEqual(dateTime11);
        java.text.SimpleDateFormat simpleDateFormat15 = null;
        net.ajaskey.common.DateTime dateTime16 = new net.ajaskey.common.DateTime("hi!", simpleDateFormat15);
        net.ajaskey.common.DateTime dateTime18 = new net.ajaskey.common.DateTime((long) (short) 0);
        double double19 = dateTime16.getDeltaYears(dateTime18);
        net.ajaskey.common.DateTime dateTime23 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        boolean boolean24 = dateTime18.isEqual(dateTime23);
        net.ajaskey.common.DateTime dateTime26 = new net.ajaskey.common.DateTime(100L);
        int int27 = dateTime26.getMs();
        boolean boolean28 = dateTime23.isGreaterThanOrEqual(dateTime26);
        net.ajaskey.common.DateTime dateTime30 = new net.ajaskey.common.DateTime(100L);
        dateTime30.set((int) (byte) 100, (-1), (int) '#');
        net.ajaskey.common.DateTime dateTime38 = new net.ajaskey.common.DateTime((int) (short) -1, (int) (byte) 0, (int) (byte) 100);
        net.ajaskey.common.DateTime dateTime40 = new net.ajaskey.common.DateTime(100L);
        double double41 = dateTime38.getDeltaYears(dateTime40);
        boolean boolean42 = dateTime40.isWeekday();
        java.util.Date date43 = dateTime40.getTime();
        dateTime30.set(dateTime40);
        boolean boolean45 = net.ajaskey.common.Utils.sameDate(dateTime23, dateTime30);
        dateTime23.add((int) '#', 6);
        int int49 = dateTime2.getYears(dateTime23);
        java.lang.String str50 = dateTime2.getDay();
        net.ajaskey.common.DateTime dateTime51 = new net.ajaskey.common.DateTime(dateTime2);
        net.ajaskey.common.DateTime dateTime54 = dateTime2.parse("                                                  32", "                                             2,020.00");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean55 = dateTime54.isWeekday();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(simpleDateFormat9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1972.041095890411d) + "'", double41 == (-1972.041095890411d));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 17:00:00 MST 1969");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UNKNOWN" + "'", str50, "UNKNOWN");
        org.junit.Assert.assertNull(dateTime54);
    }
}
