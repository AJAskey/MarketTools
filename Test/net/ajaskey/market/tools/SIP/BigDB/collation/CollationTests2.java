package net.ajaskey.market.tools.SIP.BigDB.collation;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class CollationTests2 {

  public static boolean debug = false;

  @Test
  public void test01001() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01001");
    double[] doubleArray0 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble1 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray0);
    double[] doubleArray5 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble6 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray5);
    double double7 = quarterlyDouble6.getTtm();
    double double8 = quarterlyDouble6.getQseqQ();
    double[] doubleArray9 = quarterlyDouble6.dArr;
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    quarterlyDouble6.dArr = doubleArray13;
    double[] doubleArray16 = quarterlyDouble6.dArr;
    quarterlyDouble1.dArr = doubleArray16;
    double[] doubleArray18 = quarterlyDouble1.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble1.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01002() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01002");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) ' ', (-1));
  }

  @Test
  public void test01003() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01003");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getTtmAvg();
    double[] doubleArray18 = quarterlyDouble5.dArr;
    double double19 = quarterlyDouble5.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str21 = quarterlyDouble5.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
  }

  @Test
  public void test01004() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01004");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str14 = quarterlyDouble4.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01005() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01005");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double15 = quarterlyDouble13.get((int) (byte) 1);
    double double16 = quarterlyDouble13.getQseqQ();
    double double17 = quarterlyDouble13.getQseqQ();
    double double18 = quarterlyDouble13.getTtmAvg();
    double double19 = quarterlyDouble13.getTtm();
    double[] doubleArray20 = quarterlyDouble13.dArr;
    quarterlyDouble8.dArr = doubleArray20;
    // The following exception was thrown during execution in test generation
    try {
      double double22 = quarterlyDouble8.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01006() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01006");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double11 = quarterlyDouble10.getTtm();
    double double13 = quarterlyDouble10.get((int) '4');
    double double16 = quarterlyDouble10.deltaQ((int) (short) 1, 0);
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtm();
    double double23 = quarterlyDouble21.getQseqQ();
    double[] doubleArray24 = quarterlyDouble21.dArr;
    quarterlyDouble10.dArr = doubleArray24;
    quarterlyDouble5.dArr = doubleArray24;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble27 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double double28 = quarterlyDouble27.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str30 = quarterlyDouble27.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
  }

  @Test
  public void test01007() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01007");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getTtm();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double17 = quarterlyDouble14.get((int) '4');
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double double24 = quarterlyDouble22.getQseqQ();
    double[] doubleArray25 = new double[] {};
    quarterlyDouble22.dArr = doubleArray25;
    quarterlyDouble14.dArr = doubleArray25;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble28.dArr = doubleArray44;
    quarterlyDouble8.dArr = doubleArray44;
    double[] doubleArray53 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble54 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray53);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble55 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray53);
    double[] doubleArray56 = quarterlyDouble55.dArr;
    double[] doubleArray60 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble61 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray60);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble62 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray60);
    double double64 = quarterlyDouble62.get(100);
    double[] doubleArray65 = quarterlyDouble62.dArr;
    quarterlyDouble55.dArr = doubleArray65;
    double double67 = quarterlyDouble55.getTtmAvg();
    double double68 = quarterlyDouble55.getQseqQ();
    double[] doubleArray69 = quarterlyDouble55.dArr;
    quarterlyDouble8.dArr = doubleArray69;
    double double71 = quarterlyDouble8.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str73 = quarterlyDouble8.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertNotNull(doubleArray53);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray60);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-9999.9999d) + "'", double64 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray65);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5100.0d + "'", double68 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray69);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double71 + "' != '" + 5100.0d + "'", double71 == 5100.0d);
  }

  @Test
  public void test01008() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01008");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str6 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01009() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01009");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) ' ', (int) (byte) 10);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01010() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01010");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double18 = quarterlyDouble16.get((int) (byte) 10);
    double double21 = quarterlyDouble16.deltaQ((int) (short) -1, (int) (short) 1);
    // The following exception was thrown during execution in test generation
    try {
      double double22 = quarterlyDouble16.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-9999.9999d) + "'", double18 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
  }

  @Test
  public void test01011() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01011");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double double12 = quarterlyDouble4.deltaQ(10, (int) ' ');
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str14 = quarterlyDouble4.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
  }

  @Test
  public void test01012() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01012");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) '#', 100);
  }

  @Test
  public void test01013() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01013");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double double8 = quarterlyDouble5.getMostRecent();
    double double10 = quarterlyDouble5.get((int) (byte) -1);
    double double11 = quarterlyDouble5.getTtm();
    double double12 = quarterlyDouble5.getTtmAvg();
    double double13 = quarterlyDouble5.getQseqQ();
    double double14 = quarterlyDouble5.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str16 = quarterlyDouble5.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
  }

  @Test
  public void test01014() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01014");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    // The following exception was thrown during execution in test generation
    try {
      double double13 = quarterlyDouble12.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01015() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01015");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double double11 = quarterlyDouble4.get((int) '4');
    double double14 = quarterlyDouble4.deltaQ((int) (byte) 100, (int) (short) 10);
    double double15 = quarterlyDouble4.getQseqQ();
    double[] doubleArray16 = quarterlyDouble4.dArr;
    java.lang.Class<?> wildcardClass17 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9999.9999d) + "'", double11 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test01016() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01016");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(100, (int) (byte) 10);
  }

  @Test
  public void test01017() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01017");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.lang.Class<?> wildcardClass9 = strList3.getClass();
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(manyCompanyDataList8);
    org.junit.Assert.assertNotNull(wildcardClass9);
  }

  @Test
  public void test01018() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01018");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    double double8 = quarterlyDouble5.getMostRecent();
    double double9 = quarterlyDouble5.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str11 = quarterlyDouble5.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
  }

  @Test
  public void test01019() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01019");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (short) 100, (int) (byte) 0);
  }

  @Test
  public void test01020() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01020");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.String str8 = companyData1.getTicker();
    java.lang.String str9 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList10 = companyData1.getFdList();
    java.lang.String str11 = companyData1.getTicker();
    java.lang.String str12 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList13 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData16 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList13, (int) (short) 1, (int) '#');
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    org.junit.Assert.assertNotNull(fieldDataList10);
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    org.junit.Assert.assertNotNull(fieldDataList13);
    org.junit.Assert.assertNull(fieldData16);
  }

  @Test
  public void test01021() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01021");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("hi!");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData6 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList3, 10, 10);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData9 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList3, (int) (short) 10, 0);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNull(fieldData6);
    org.junit.Assert.assertNull(fieldData9);
  }

  @Test
  public void test01022() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01022");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double18 = quarterlyDouble16.get((int) (byte) 10);
    double double21 = quarterlyDouble16.deltaQ((int) (short) -1, (int) (short) 1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str23 = quarterlyDouble16.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-9999.9999d) + "'", double18 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
  }

  @Test
  public void test01023() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01023");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 0, (int) '4');
  }

  @Test
  public void test01024() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01024");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.lang.Class<?> wildcardClass12 = manyCompanyDataList11.getClass();
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(manyCompanyDataList11);
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test01025() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01025");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    double[] doubleArray8 = quarterlyDouble5.dArr;
    double double11 = quarterlyDouble5.deltaQ((int) (short) 1, (-1));
    double double14 = quarterlyDouble5.deltaQ((int) 'a', 1);
    double double15 = quarterlyDouble5.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double16 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
  }

  @Test
  public void test01026() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01026");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double[] doubleArray21 = quarterlyDouble20.dArr;
    double[] doubleArray22 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray22;
    double double24 = quarterlyDouble4.getQseqQ();
    double double25 = quarterlyDouble4.getTtm();
    double double26 = quarterlyDouble4.getQseqQ();
    java.lang.Class<?> wildcardClass27 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5100.0d + "'", double26 == 5100.0d);
    org.junit.Assert.assertNotNull(wildcardClass27);
  }

  @Test
  public void test01027() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01027");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    // The following exception was thrown during execution in test generation
    try {
      double double19 = quarterlyDouble18.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01028() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01028");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", 0, (int) (byte) 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01029() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01029");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double[] doubleArray27 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    double double31 = quarterlyDouble29.get(100);
    double[] doubleArray32 = quarterlyDouble29.dArr;
    quarterlyDouble22.dArr = doubleArray32;
    quarterlyDouble4.dArr = doubleArray32;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble36 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    java.lang.Class<?> wildcardClass37 = doubleArray32.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9999.9999d) + "'", double31 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass37);
  }

  @Test
  public void test01030() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01030");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("", 10,
        (int) (short) -1);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01031() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01031");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData> oneCompanyDataList1 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
    org.junit.Assert.assertNotNull(oneCompanyDataList1);
  }

  @Test
  public void test01032() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01032");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (-1), 100);
  }

  @Test
  public void test01033() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01033");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(10, (int) (short) -1);
  }

  @Test
  public void test01034() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01034");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getQseqQ();
    double double10 = quarterlyDouble4.getQseqQ();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get((int) (short) 0);
    double double14 = quarterlyDouble4.getQseqQ();
    double[] doubleArray18 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double double20 = quarterlyDouble19.getTtm();
    double double21 = quarterlyDouble19.getQseqQ();
    double[] doubleArray22 = quarterlyDouble19.dArr;
    double[] doubleArray26 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble27 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray26);
    quarterlyDouble19.dArr = doubleArray26;
    double double29 = quarterlyDouble19.getTtm();
    double[] doubleArray30 = quarterlyDouble19.dArr;
    double[] doubleArray34 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    double double36 = quarterlyDouble35.getTtm();
    double double38 = quarterlyDouble35.get((int) '4');
    double[] doubleArray42 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble43 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray42);
    double[] doubleArray44 = quarterlyDouble43.dArr;
    double double45 = quarterlyDouble43.getQseqQ();
    double[] doubleArray46 = new double[] {};
    quarterlyDouble43.dArr = doubleArray46;
    quarterlyDouble35.dArr = doubleArray46;
    double[] doubleArray49 = quarterlyDouble35.dArr;
    quarterlyDouble19.dArr = doubleArray49;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble51 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray49);
    quarterlyDouble4.dArr = doubleArray49;
    // The following exception was thrown during execution in test generation
    try {
      double double53 = quarterlyDouble4.getQseqQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5100.0d + "'", double10 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5100.0d + "'", double21 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray26);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-9999.9999d) + "'", double38 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 5100.0d + "'", double45 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray46);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
    org.junit.Assert.assertNotNull(doubleArray49);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
  }

  @Test
  public void test01035() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01035");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) '#', 100);
  }

  @Test
  public void test01036() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01036");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) 'a', 10);
  }

  @Test
  public void test01037() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01037");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 10, (-1));
  }

  @Test
  public void test01038() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01038");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double[] doubleArray15 = quarterlyDouble14.dArr;
    double[] doubleArray16 = quarterlyDouble14.dArr;
    quarterlyDouble8.dArr = doubleArray16;
    double double20 = quarterlyDouble8.deltaQ(10, (int) (byte) -1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str22 = quarterlyDouble8.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
  }

  @Test
  public void test01039() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01039");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getTtm();
    double double9 = quarterlyDouble4.deltaQ((int) '#', 100);
    double double10 = quarterlyDouble4.getMostRecent();
    double double11 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      double double12 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5100.0d + "'", double11 == 5100.0d);
  }

  @Test
  public void test01040() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01040");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getTtmAvg();
    double double7 = quarterlyDouble5.getMostRecent();
    double double10 = quarterlyDouble5.deltaQ((int) '#', (int) (short) 1);
    double double12 = quarterlyDouble5.get((int) (short) 0);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
  }

  @Test
  public void test01041() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01041");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, 1);
    double double17 = quarterlyDouble4.getQseqQ();
    double double18 = quarterlyDouble4.getTtmAvg();
    double double19 = quarterlyDouble4.getMostRecent();
    java.lang.Class<?> wildcardClass20 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test01042() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01042");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(0, (int) (byte) 1);
  }

  @Test
  public void test01043() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01043");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getMostRecent();
    double double10 = quarterlyDouble4.deltaQ((int) ' ', (int) 'a');
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str12 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
  }

  @Test
  public void test01044() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01044");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double[] doubleArray15 = quarterlyDouble14.dArr;
    double[] doubleArray16 = quarterlyDouble14.dArr;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtm();
    double double23 = quarterlyDouble21.getQseqQ();
    double[] doubleArray24 = quarterlyDouble21.dArr;
    double double25 = quarterlyDouble21.getQseqQ();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble21.dArr = doubleArray29;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble14.dArr = doubleArray29;
    quarterlyDouble4.dArr = doubleArray29;
    double double36 = quarterlyDouble4.getQseqQ();
    double double37 = quarterlyDouble4.getMostRecent();
    java.lang.Class<?> wildcardClass38 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5100.0d + "'", double36 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
    org.junit.Assert.assertNotNull(wildcardClass38);
  }

  @Test
  public void test01045() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01045");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!", 100,
        (int) (short) 1);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01046() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01046");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double double8 = quarterlyDouble5.getMostRecent();
    double double10 = quarterlyDouble5.get((int) (byte) -1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str12 = quarterlyDouble5.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
  }

  @Test
  public void test01047() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01047");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str7 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01048() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01048");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray17 = quarterlyDouble4.dArr;
    double[] doubleArray18 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble4.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01049() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01049");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double double12 = quarterlyDouble4.deltaQ((int) '4', (int) (short) 1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str14 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
  }

  @Test
  public void test01050() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01050");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(1, (int) (short) 10);
  }

  @Test
  public void test01051() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01051");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getTtmAvg();
    double double7 = quarterlyDouble5.getTtmAvg();
    double double8 = quarterlyDouble5.getTtmAvg();
    double double10 = quarterlyDouble5.get((int) 'a');
    // The following exception was thrown during execution in test generation
    try {
      double double11 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
  }

  @Test
  public void test01052() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01052");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(100, 0);
  }

  @Test
  public void test01053() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01053");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getMostRecent();
    double double7 = quarterlyDouble5.getTtmAvg();
    double double8 = quarterlyDouble5.getMostRecent();
    double double9 = quarterlyDouble5.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str11 = quarterlyDouble5.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
  }

  @Test
  public void test01054() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01054");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    double[] doubleArray18 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double double26 = quarterlyDouble25.getTtm();
    double double27 = quarterlyDouble25.getQseqQ();
    double[] doubleArray31 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble32 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    quarterlyDouble25.dArr = doubleArray31;
    double double34 = quarterlyDouble25.getQseqQ();
    double double37 = quarterlyDouble25.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray41 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble42 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    double double43 = quarterlyDouble42.getTtmAvg();
    double double44 = quarterlyDouble42.getMostRecent();
    double double46 = quarterlyDouble42.get((int) 'a');
    double double48 = quarterlyDouble42.get((int) (byte) -1);
    double[] doubleArray52 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    double double54 = quarterlyDouble53.getTtm();
    double double55 = quarterlyDouble53.getQseqQ();
    double[] doubleArray56 = quarterlyDouble53.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble57 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    quarterlyDouble42.dArr = doubleArray56;
    quarterlyDouble25.dArr = doubleArray56;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble60 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    quarterlyDouble20.dArr = doubleArray56;
    double[] doubleArray62 = quarterlyDouble20.dArr;
    double double65 = quarterlyDouble20.deltaQ((int) (short) 1, 0);
    double double67 = quarterlyDouble20.get((-1));
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str69 = quarterlyDouble20.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5100.0d + "'", double27 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5100.0d + "'", double34 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-9999.9999d) + "'", double46 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-9999.9999d) + "'", double48 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5100.0d + "'", double55 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray62);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-9999.9999d) + "'", double67 == (-9999.9999d));
  }

  @Test
  public void test01055() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01055");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double16 = quarterlyDouble14.getQseqQ();
    double[] doubleArray17 = quarterlyDouble14.dArr;
    double double18 = quarterlyDouble14.getQseqQ();
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    quarterlyDouble14.dArr = doubleArray22;
    double[] doubleArray26 = quarterlyDouble14.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble27 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray26);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray26);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    double[] doubleArray47 = quarterlyDouble33.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble48 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray47);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble49 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray47);
    quarterlyDouble28.dArr = doubleArray47;
    quarterlyDouble4.dArr = doubleArray47;
    java.lang.Class<?> wildcardClass52 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray26);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
    org.junit.Assert.assertNotNull(wildcardClass52);
  }

  @Test
  public void test01056() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01056");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) 0, (int) ' ');
  }

  @Test
  public void test01057() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01057");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double[] doubleArray21 = quarterlyDouble20.dArr;
    double[] doubleArray22 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray22;
    double double24 = quarterlyDouble4.getQseqQ();
    double double25 = quarterlyDouble4.getTtm();
    double[] doubleArray26 = quarterlyDouble4.dArr;
    java.lang.Class<?> wildcardClass27 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray26);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass27);
  }

  @Test
  public void test01058() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01058");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double15 = quarterlyDouble4.get(1);
    double double16 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      double double17 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
  }

  @Test
  public void test01059() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01059");
    double[] doubleArray0 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble1 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray0);
    double[] doubleArray5 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble6 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray5);
    double double7 = quarterlyDouble6.getTtm();
    double double8 = quarterlyDouble6.getQseqQ();
    double[] doubleArray9 = quarterlyDouble6.dArr;
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    quarterlyDouble6.dArr = doubleArray13;
    double[] doubleArray16 = quarterlyDouble6.dArr;
    quarterlyDouble1.dArr = doubleArray16;
    double[] doubleArray18 = quarterlyDouble1.dArr;
    double double19 = quarterlyDouble1.getMostRecent();
    double double20 = quarterlyDouble1.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      double double21 = quarterlyDouble1.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
  }

  @Test
  public void test01060() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01060");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double[] doubleArray14 = quarterlyDouble4.dArr;
    double[] doubleArray18 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double double20 = quarterlyDouble19.getTtmAvg();
    double double21 = quarterlyDouble19.getTtm();
    double double22 = quarterlyDouble19.getMostRecent();
    double double23 = quarterlyDouble19.getTtmAvg();
    double double24 = quarterlyDouble19.getMostRecent();
    double[] doubleArray28 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    double[] doubleArray30 = quarterlyDouble29.dArr;
    double[] doubleArray31 = quarterlyDouble29.dArr;
    double[] doubleArray35 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble36 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray35);
    double double37 = quarterlyDouble36.getTtm();
    double double38 = quarterlyDouble36.getQseqQ();
    double[] doubleArray39 = quarterlyDouble36.dArr;
    double double40 = quarterlyDouble36.getQseqQ();
    double[] doubleArray44 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble45 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble46 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble36.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble48 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble29.dArr = doubleArray44;
    quarterlyDouble19.dArr = doubleArray44;
    quarterlyDouble4.dArr = doubleArray44;
    double double52 = quarterlyDouble4.getMostRecent();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray35);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5100.0d + "'", double38 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + 52.0d + "'", double52 == 52.0d);
  }

  @Test
  public void test01061() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01061");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double double10 = quarterlyDouble8.getTtm();
    double[] doubleArray11 = quarterlyDouble8.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str14 = quarterlyDouble12.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01062() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01062");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtm();
    double double23 = quarterlyDouble20.get((int) '4');
    double[] doubleArray27 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    double[] doubleArray29 = quarterlyDouble28.dArr;
    double double30 = quarterlyDouble28.getQseqQ();
    double[] doubleArray31 = new double[] {};
    quarterlyDouble28.dArr = doubleArray31;
    quarterlyDouble20.dArr = doubleArray31;
    double[] doubleArray34 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray34;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble36 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble37 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str39 = quarterlyDouble37.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-9999.9999d) + "'", double23 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5100.0d + "'", double30 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
  }

  @Test
  public void test01063() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01063");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (byte) -1, (int) (short) 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01064() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01064");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (short) 0, (int) (byte) 0);
  }

  @Test
  public void test01065() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01065");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 100, (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.lang.Class<?> wildcardClass14 = manyCompanyDataList13.getClass();
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(manyCompanyDataList7);
    org.junit.Assert.assertNotNull(manyCompanyDataList8);
    org.junit.Assert.assertNotNull(companyDataList11);
    org.junit.Assert.assertNotNull(manyCompanyDataList12);
    org.junit.Assert.assertNotNull(manyCompanyDataList13);
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test01066() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01066");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    double[] doubleArray18 = quarterlyDouble4.dArr;
    double double21 = quarterlyDouble4.deltaQ((int) (byte) 0, 0);
    // The following exception was thrown during execution in test generation
    try {
      double double22 = quarterlyDouble4.getMostRecent();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
  }

  @Test
  public void test01067() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01067");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double26 = quarterlyDouble23.get((int) '4');
    double[] doubleArray30 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    double[] doubleArray32 = quarterlyDouble31.dArr;
    double double33 = quarterlyDouble31.getQseqQ();
    double[] doubleArray34 = new double[] {};
    quarterlyDouble31.dArr = doubleArray34;
    quarterlyDouble23.dArr = doubleArray34;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble37 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    quarterlyDouble18.dArr = doubleArray34;
    double double40 = quarterlyDouble18.get(0);
    double double41 = quarterlyDouble18.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str43 = quarterlyDouble18.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9999.9999d) + "'", double26 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5100.0d + "'", double33 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-9999.9999d) + "'", double40 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
  }

  @Test
  public void test01068() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01068");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray18 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double double20 = quarterlyDouble19.getTtm();
    double double21 = quarterlyDouble19.getQseqQ();
    double[] doubleArray25 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    quarterlyDouble19.dArr = doubleArray25;
    double double28 = quarterlyDouble19.getQseqQ();
    double double29 = quarterlyDouble19.getTtmAvg();
    double double30 = quarterlyDouble19.getTtm();
    double[] doubleArray34 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    double double36 = quarterlyDouble35.getTtm();
    double double37 = quarterlyDouble35.getQseqQ();
    double[] doubleArray38 = quarterlyDouble35.dArr;
    quarterlyDouble19.dArr = doubleArray38;
    quarterlyDouble4.dArr = doubleArray38;
    double double41 = quarterlyDouble4.getQseqQ();
    java.lang.Class<?> wildcardClass42 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5100.0d + "'", double21 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 5100.0d + "'", double28 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5100.0d + "'", double37 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray38);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 5100.0d + "'", double41 == 5100.0d);
    org.junit.Assert.assertNotNull(wildcardClass42);
  }

  @Test
  public void test01069() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01069");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double double10 = quarterlyDouble4.deltaQ((int) (short) 1, 0);
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double16 = quarterlyDouble15.getTtm();
    double double17 = quarterlyDouble15.getQseqQ();
    double[] doubleArray18 = quarterlyDouble15.dArr;
    quarterlyDouble4.dArr = doubleArray18;
    double double20 = quarterlyDouble4.getTtm();
    double double22 = quarterlyDouble4.get((int) (byte) 1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str24 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
  }

  @Test
  public void test01070() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01070");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtm();
    double double22 = quarterlyDouble20.getQseqQ();
    double[] doubleArray23 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray23;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray23);
    double double26 = quarterlyDouble25.getTtmAvg();
    double double27 = quarterlyDouble25.getTtmAvg();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5100.0d + "'", double22 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
  }

  @Test
  public void test01071() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01071");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) '#', (int) ' ');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01072() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01072");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double11 = quarterlyDouble4.get((int) ' ');
    double[] doubleArray15 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double17 = quarterlyDouble16.getTtmAvg();
    double double18 = quarterlyDouble16.getMostRecent();
    double double20 = quarterlyDouble16.get((int) 'a');
    double double22 = quarterlyDouble16.get((int) (byte) -1);
    double[] doubleArray26 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble27 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray26);
    double double28 = quarterlyDouble27.getTtm();
    double double29 = quarterlyDouble27.getQseqQ();
    double[] doubleArray30 = quarterlyDouble27.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    quarterlyDouble16.dArr = doubleArray30;
    quarterlyDouble4.dArr = doubleArray30;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str36 = quarterlyDouble34.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9999.9999d) + "'", double11 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-9999.9999d) + "'", double20 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-9999.9999d) + "'", double22 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray26);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5100.0d + "'", double29 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01073() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01073");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double double10 = quarterlyDouble4.deltaQ((int) (short) 1, 0);
    double double11 = quarterlyDouble4.getMostRecent();
    double double12 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      double double15 = quarterlyDouble4.deltaQ((-1), (int) '#');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 52.0d + "'", double11 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5100.0d + "'", double12 == 5100.0d);
  }

  @Test
  public void test01074() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01074");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList4 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (int) (byte) 0, (int) (short) 10);
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(manyCompanyDataList3);
    org.junit.Assert.assertNotNull(companyDataList4);
    org.junit.Assert.assertNotNull(companyDataList5);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(manyCompanyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
  }

  @Test
  public void test01075() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01075");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) 100, 0);
  }

  @Test
  public void test01076() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01076");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, 1);
    double double17 = quarterlyDouble4.getQseqQ();
    double double18 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double19 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
  }

  @Test
  public void test01077() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01077");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 100, (int) ' ');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (-1), (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList15 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) -1, (int) (short) 1);
    java.lang.Class<?> wildcardClass16 = strList2.getClass();
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(companyDataList12);
    org.junit.Assert.assertNotNull(companyDataList15);
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test01078() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01078");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData9 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList6, (int) '#', (int) (short) -1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData12 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList6, (int) (short) -1, 0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData15 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList6, (int) '4', (int) (byte) 100);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNull(fieldData9);
    org.junit.Assert.assertNull(fieldData12);
    org.junit.Assert.assertNull(fieldData15);
  }

  @Test
  public void test01079() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01079");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double18 = quarterlyDouble16.get(10);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble16.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-9999.9999d) + "'", double18 == (-9999.9999d));
  }

  @Test
  public void test01080() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01080");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (byte) 0, (int) (byte) 1);
  }

  @Test
  public void test01081() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01081");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double25 = quarterlyDouble23.getQseqQ();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble23.dArr = doubleArray29;
    double double32 = quarterlyDouble23.getQseqQ();
    double double33 = quarterlyDouble23.getTtmAvg();
    double double34 = quarterlyDouble23.getTtm();
    double double35 = quarterlyDouble23.getMostRecent();
    double[] doubleArray39 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray39);
    double double41 = quarterlyDouble40.getTtm();
    double double42 = quarterlyDouble40.getQseqQ();
    double[] doubleArray43 = quarterlyDouble40.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray43);
    double double45 = quarterlyDouble44.getQseqQ();
    double[] doubleArray49 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray49);
    double[] doubleArray51 = quarterlyDouble50.dArr;
    double[] doubleArray52 = quarterlyDouble50.dArr;
    quarterlyDouble44.dArr = doubleArray52;
    quarterlyDouble23.dArr = doubleArray52;
    quarterlyDouble18.dArr = doubleArray52;
    double double56 = quarterlyDouble18.getMostRecent();
    double double57 = quarterlyDouble18.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      double double58 = quarterlyDouble18.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5100.0d + "'", double32 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    org.junit.Assert.assertTrue("'" + double42 + "' != '" + 5100.0d + "'", double42 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 5100.0d + "'", double45 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray49);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double56 + "' != '" + 52.0d + "'", double56 == 52.0d);
    org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5100.0d + "'", double57 == 5100.0d);
  }

  @Test
  public void test01082() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01082");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getTtmAvg();
    double double18 = quarterlyDouble5.getQseqQ();
    double double21 = quarterlyDouble5.deltaQ((int) (byte) 10, (int) (byte) 100);
    double[] doubleArray25 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double double27 = quarterlyDouble26.getTtm();
    double double28 = quarterlyDouble26.getQseqQ();
    double[] doubleArray29 = quarterlyDouble26.dArr;
    double[] doubleArray33 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray33);
    quarterlyDouble26.dArr = doubleArray33;
    double double36 = quarterlyDouble26.getTtm();
    double[] doubleArray37 = quarterlyDouble26.dArr;
    quarterlyDouble5.dArr = doubleArray37;
    java.lang.Class<?> wildcardClass39 = doubleArray37.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 5100.0d + "'", double28 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray33);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass39);
  }

  @Test
  public void test01083() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01083");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double double11 = quarterlyDouble8.get(10);
    java.lang.Class<?> wildcardClass12 = quarterlyDouble8.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9999.9999d) + "'", double11 == (-9999.9999d));
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test01084() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01084");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getTtm();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double17 = quarterlyDouble14.get((int) '4');
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double double24 = quarterlyDouble22.getQseqQ();
    double[] doubleArray25 = new double[] {};
    quarterlyDouble22.dArr = doubleArray25;
    quarterlyDouble14.dArr = doubleArray25;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble28.dArr = doubleArray44;
    quarterlyDouble8.dArr = doubleArray44;
    double[] doubleArray50 = quarterlyDouble8.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double51 = quarterlyDouble8.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
  }

  @Test
  public void test01085() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01085");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    java.lang.Class<?> wildcardClass20 = doubleArray15.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test01086() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01086");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] fieldDataArray0 = new net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] {};
    java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList1 = new java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>();
    boolean boolean2 = java.util.Collections.addAll((java.util.Collection<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1,
        fieldDataArray0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData5 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, 0, (int) 'a');
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData8 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, 0, (int) (short) 0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData11 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (byte) 1, 1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData14 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, 0, (-1));
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData17 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, 0, (int) (short) 1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData20 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (byte) 1, 100);
    org.junit.Assert.assertNotNull(fieldDataArray0);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNull(fieldData5);
    org.junit.Assert.assertNull(fieldData8);
    org.junit.Assert.assertNull(fieldData11);
    org.junit.Assert.assertNull(fieldData14);
    org.junit.Assert.assertNull(fieldData17);
    org.junit.Assert.assertNull(fieldData20);
  }

  @Test
  public void test01087() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01087");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) (short) 10, 1);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01088() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01088");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str7 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01089() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01089");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (short) 10, (int) (short) -1);
  }

  @Test
  public void test01090() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01090");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) 1, (int) (byte) 1);
  }

  @Test
  public void test01091() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01091");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) 'a', (int) (byte) 10);
  }

  @Test
  public void test01092() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01092");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) 'a', 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01093() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01093");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) (short) 10, 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01094() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01094");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double8 = quarterlyDouble4.getMostRecent();
    double double9 = quarterlyDouble4.getMostRecent();
    double double10 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double11 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
  }

  @Test
  public void test01095() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01095");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double double10 = quarterlyDouble4.deltaQ((int) (short) 1, 0);
    double double11 = quarterlyDouble4.getMostRecent();
    double double12 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.get((int) (short) 10);
    // The following exception was thrown during execution in test generation
    try {
      double double15 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 52.0d + "'", double11 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5100.0d + "'", double12 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
  }

  @Test
  public void test01096() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01096");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str16 = quarterlyDouble14.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01097() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01097");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double26 = quarterlyDouble23.get((int) '4');
    double[] doubleArray30 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    double[] doubleArray32 = quarterlyDouble31.dArr;
    double double33 = quarterlyDouble31.getQseqQ();
    double[] doubleArray34 = new double[] {};
    quarterlyDouble31.dArr = doubleArray34;
    quarterlyDouble23.dArr = doubleArray34;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble37 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    quarterlyDouble18.dArr = doubleArray34;
    double[] doubleArray39 = quarterlyDouble18.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray39);
    // The following exception was thrown during execution in test generation
    try {
      double double41 = quarterlyDouble40.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9999.9999d) + "'", double26 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5100.0d + "'", double33 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
  }

  @Test
  public void test01098() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01098");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getQseqQ();
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double14 = quarterlyDouble13.getTtm();
    double double15 = quarterlyDouble13.getQseqQ();
    double[] doubleArray16 = quarterlyDouble13.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    quarterlyDouble4.dArr = doubleArray16;
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01099() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01099");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    double double17 = quarterlyDouble4.getTtmAvg();
    double double18 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
  }

  @Test
  public void test01100() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01100");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) -1, 0);
  }

  @Test
  public void test01101() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01101");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getTtm();
    double double9 = quarterlyDouble4.deltaQ((int) '#', 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double11 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01102() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01102");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double[] doubleArray17 = quarterlyDouble16.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str19 = quarterlyDouble16.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01103() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01103");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (short) 100, (int) (short) 100);
  }

  @Test
  public void test01104() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01104");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (short) -1, 10);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01105() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01105");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double19 = quarterlyDouble17.get((int) (byte) 10);
    double double20 = quarterlyDouble17.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double21 = quarterlyDouble17.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9999.9999d) + "'", double19 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
  }

  @Test
  public void test01106() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01106");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (short) -1, (int) ' ');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01107() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01107");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, 0, (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 100, (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, 1, (int) (byte) 10);
    java.lang.Class<?> wildcardClass18 = companyDataList17.getClass();
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(manyCompanyDataList7);
    org.junit.Assert.assertNotNull(manyCompanyDataList8);
    org.junit.Assert.assertNotNull(companyDataList11);
    org.junit.Assert.assertNotNull(companyDataList14);
    org.junit.Assert.assertNotNull(companyDataList17);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test01108() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01108");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double17 = quarterlyDouble14.get((int) '4');
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double double24 = quarterlyDouble22.getQseqQ();
    double[] doubleArray25 = new double[] {};
    quarterlyDouble22.dArr = doubleArray25;
    quarterlyDouble14.dArr = doubleArray25;
    quarterlyDouble4.dArr = doubleArray25;
    double double30 = quarterlyDouble4.get((int) 'a');
    double double31 = quarterlyDouble4.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double32 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-9999.9999d) + "'", double30 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
  }

  @Test
  public void test01109() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01109");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double double16 = quarterlyDouble4.getQseqQ();
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double23 = quarterlyDouble21.get((int) (byte) 1);
    double double24 = quarterlyDouble21.getQseqQ();
    double[] doubleArray25 = quarterlyDouble21.dArr;
    quarterlyDouble4.dArr = doubleArray25;
    double double28 = quarterlyDouble4.get((int) '#');
    double double29 = quarterlyDouble4.getTtm();
    double double31 = quarterlyDouble4.get((int) (byte) 10);
    java.lang.Class<?> wildcardClass32 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-9999.9999d) + "'", double28 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9999.9999d) + "'", double31 == (-9999.9999d));
    org.junit.Assert.assertNotNull(wildcardClass32);
  }

  @Test
  public void test01110() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01110");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str16 = quarterlyDouble14.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01111() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01111");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(0, (int) (short) 1);
  }

  @Test
  public void test01112() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01112");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (byte) 0, (int) (short) 0);
  }

  @Test
  public void test01113() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01113");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    double double10 = quarterlyDouble4.get((int) (byte) -1);
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double16 = quarterlyDouble15.getTtm();
    double double17 = quarterlyDouble15.getQseqQ();
    double[] doubleArray18 = quarterlyDouble15.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    quarterlyDouble4.dArr = doubleArray18;
    double double23 = quarterlyDouble4.deltaQ((int) (byte) 100, 0);
    // The following exception was thrown during execution in test generation
    try {
      double double24 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
  }

  @Test
  public void test01114() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01114");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    // The following exception was thrown during execution in test generation
    try {
      double double9 = quarterlyDouble8.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01115() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01115");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) '#', (int) (byte) -1);
  }

  @Test
  public void test01116() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01116");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList4 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (int) (short) 0, 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(companyDataList3);
    org.junit.Assert.assertNotNull(companyDataList4);
    org.junit.Assert.assertNotNull(manyCompanyDataList5);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(manyCompanyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(manyCompanyDataList11);
  }

  @Test
  public void test01117() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01117");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(0, 10);
  }

  @Test
  public void test01118() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01118");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (short) 10, (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (-1), 1);
    java.lang.Class<?> wildcardClass18 = companyDataList17.getClass();
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(companyDataList13);
    org.junit.Assert.assertNotNull(manyCompanyDataList14);
    org.junit.Assert.assertNotNull(companyDataList17);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test01119() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01119");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double double16 = quarterlyDouble4.getQseqQ();
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double24 = quarterlyDouble22.get(100);
    double[] doubleArray25 = quarterlyDouble22.dArr;
    double double28 = quarterlyDouble22.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    double[] doubleArray47 = quarterlyDouble33.dArr;
    quarterlyDouble22.dArr = doubleArray47;
    quarterlyDouble4.dArr = doubleArray47;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray47);
    double double52 = quarterlyDouble50.get((int) (byte) 10);
    // The following exception was thrown during execution in test generation
    try {
      double double53 = quarterlyDouble50.getQseqQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9999.9999d) + "'", double24 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-9999.9999d) + "'", double52 == (-9999.9999d));
  }

  @Test
  public void test01120() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01120");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double double19 = quarterlyDouble4.deltaQ((int) (byte) 100, 0);
    double[] doubleArray20 = quarterlyDouble4.dArr;
    double[] doubleArray21 = quarterlyDouble4.dArr;
    double double22 = quarterlyDouble4.getMostRecent();
    java.lang.Class<?> wildcardClass23 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test01121() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01121");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getTtmAvg();
    double double18 = quarterlyDouble5.getQseqQ();
    double[] doubleArray19 = quarterlyDouble5.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double22 = quarterlyDouble5.deltaQ(1, (int) (byte) 10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01122() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01122");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (short) 10, (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList20 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (byte) 100, (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList21 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList22 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.lang.Class<?> wildcardClass23 = manyCompanyDataList22.getClass();
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(companyDataList13);
    org.junit.Assert.assertNotNull(manyCompanyDataList14);
    org.junit.Assert.assertNotNull(companyDataList17);
    org.junit.Assert.assertNotNull(companyDataList20);
    org.junit.Assert.assertNotNull(manyCompanyDataList21);
    org.junit.Assert.assertNotNull(manyCompanyDataList22);
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test01123() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01123");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double double16 = quarterlyDouble4.getTtm();
    double double18 = quarterlyDouble4.get(1);
    double double19 = quarterlyDouble4.getQseqQ();
    double double20 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str22 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5100.0d + "'", double19 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
  }

  @Test
  public void test01124() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01124");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (short) -1, (int) (short) 10);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01125() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01125");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    double double17 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double20 = quarterlyDouble4.deltaQ((int) (byte) 0, (int) 'a');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
  }

  @Test
  public void test01126() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01126");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getTtmAvg();
    double double7 = quarterlyDouble5.getTtm();
    double double8 = quarterlyDouble5.getTtmAvg();
    double double9 = quarterlyDouble5.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double10 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
  }

  @Test
  public void test01127() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01127");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getMostRecent();
    double double18 = quarterlyDouble5.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble5.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
  }

  @Test
  public void test01128() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01128");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", 0, 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01129() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01129");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (byte) 1, 10);
  }

  @Test
  public void test01130() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01130");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    double[] doubleArray18 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double double26 = quarterlyDouble25.getTtm();
    double double27 = quarterlyDouble25.getQseqQ();
    double[] doubleArray31 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble32 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    quarterlyDouble25.dArr = doubleArray31;
    double double34 = quarterlyDouble25.getQseqQ();
    double double37 = quarterlyDouble25.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray41 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble42 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    double double43 = quarterlyDouble42.getTtmAvg();
    double double44 = quarterlyDouble42.getMostRecent();
    double double46 = quarterlyDouble42.get((int) 'a');
    double double48 = quarterlyDouble42.get((int) (byte) -1);
    double[] doubleArray52 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    double double54 = quarterlyDouble53.getTtm();
    double double55 = quarterlyDouble53.getQseqQ();
    double[] doubleArray56 = quarterlyDouble53.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble57 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    quarterlyDouble42.dArr = doubleArray56;
    quarterlyDouble25.dArr = doubleArray56;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble60 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    quarterlyDouble20.dArr = doubleArray56;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble62 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    double double63 = quarterlyDouble62.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      double double64 = quarterlyDouble62.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5100.0d + "'", double27 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5100.0d + "'", double34 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-9999.9999d) + "'", double46 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-9999.9999d) + "'", double48 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5100.0d + "'", double55 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double63 + "' != '" + 52.0d + "'", double63 == 52.0d);
  }

  @Test
  public void test01131() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01131");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, 1, (int) (byte) 10);
  }

  @Test
  public void test01132() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01132");
    double[] doubleArray0 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble1 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray0);
    double[] doubleArray5 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble6 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray5);
    double double7 = quarterlyDouble6.getTtm();
    double double8 = quarterlyDouble6.getQseqQ();
    double[] doubleArray9 = quarterlyDouble6.dArr;
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    quarterlyDouble6.dArr = doubleArray13;
    double[] doubleArray16 = quarterlyDouble6.dArr;
    quarterlyDouble1.dArr = doubleArray16;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str19 = quarterlyDouble1.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01133() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01133");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double double18 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) 1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
  }

  @Test
  public void test01134() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01134");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double double16 = quarterlyDouble4.getQseqQ();
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double23 = quarterlyDouble21.get((int) (byte) 1);
    double double24 = quarterlyDouble21.getQseqQ();
    double[] doubleArray25 = quarterlyDouble21.dArr;
    quarterlyDouble4.dArr = doubleArray25;
    double double28 = quarterlyDouble4.get((int) '#');
    double double29 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double30 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-9999.9999d) + "'", double28 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
  }

  @Test
  public void test01135() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01135");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtm();
    double double22 = quarterlyDouble20.getQseqQ();
    double[] doubleArray23 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray23;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray23);
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double double31 = quarterlyDouble30.getTtm();
    double double32 = quarterlyDouble30.getQseqQ();
    double[] doubleArray36 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble37 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray36);
    quarterlyDouble30.dArr = doubleArray36;
    double double39 = quarterlyDouble30.getQseqQ();
    double double42 = quarterlyDouble30.deltaQ((int) (short) 100, (int) (byte) -1);
    double double45 = quarterlyDouble30.deltaQ((int) (byte) 100, 0);
    double double46 = quarterlyDouble30.getTtm();
    double[] doubleArray47 = quarterlyDouble30.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble48 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray47);
    quarterlyDouble25.dArr = doubleArray47;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str51 = quarterlyDouble25.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5100.0d + "'", double22 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5100.0d + "'", double32 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray36);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double39 + "' != '" + 5100.0d + "'", double39 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01136() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01136");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtm();
    double double17 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double18 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
  }

  @Test
  public void test01137() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01137");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getQseqQ();
    double double17 = quarterlyDouble4.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str19 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
  }

  @Test
  public void test01138() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01138");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (short) 1, (int) (byte) 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01139() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01139");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList0 = null;
    // The following exception was thrown during execution in test generation
    try {
      net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
          .getFieldData(fieldDataList0, 0, (-1));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
  }

  @Test
  public void test01140() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01140");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, 100, (int) (short) 10);
  }

  @Test
  public void test01141() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01141");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    double[] doubleArray8 = quarterlyDouble5.dArr;
    double double11 = quarterlyDouble5.deltaQ((int) (short) 1, (-1));
    double double14 = quarterlyDouble5.deltaQ((int) 'a', 1);
    double double15 = quarterlyDouble5.getQseqQ();
    double double16 = quarterlyDouble5.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str18 = quarterlyDouble5.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
  }

  @Test
  public void test01142() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01142");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double19 = quarterlyDouble17.get((int) (byte) 10);
    double double20 = quarterlyDouble17.getTtmAvg();
    double[] doubleArray21 = quarterlyDouble17.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double22 = quarterlyDouble17.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9999.9999d) + "'", double19 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01143() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01143");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double double16 = quarterlyDouble4.getTtm();
    double double18 = quarterlyDouble4.get(1);
    double double21 = quarterlyDouble4.deltaQ(1, (int) (short) -1);
    double double22 = quarterlyDouble4.getMostRecent();
    double double25 = quarterlyDouble4.deltaQ((int) (byte) -1, (int) (byte) 1);
    // The following exception was thrown during execution in test generation
    try {
      double double26 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
  }

  @Test
  public void test01144() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01144");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 1, 10);
  }

  @Test
  public void test01145() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01145");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (short) 100, (int) (short) -1);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01146() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01146");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList4 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (int) 'a', (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (int) (byte) 100, 0);
    java.lang.Class<?> wildcardClass13 = strList2.getClass();
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(manyCompanyDataList3);
    org.junit.Assert.assertNotNull(companyDataList4);
    org.junit.Assert.assertNotNull(companyDataList5);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(companyDataList12);
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test01147() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01147");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("", 100,
        (int) (short) 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01148() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01148");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double[] doubleArray21 = quarterlyDouble20.dArr;
    double[] doubleArray22 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray22;
    double double24 = quarterlyDouble4.getQseqQ();
    double double25 = quarterlyDouble4.getTtm();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double[] doubleArray34 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    double double36 = quarterlyDouble35.getTtm();
    double double37 = quarterlyDouble35.getQseqQ();
    double[] doubleArray38 = quarterlyDouble35.dArr;
    double double39 = quarterlyDouble35.getQseqQ();
    double[] doubleArray43 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray43);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble45 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray43);
    quarterlyDouble35.dArr = doubleArray43;
    double[] doubleArray47 = quarterlyDouble35.dArr;
    double[] doubleArray51 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble52 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray51);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray51);
    double[] doubleArray54 = quarterlyDouble53.dArr;
    double[] doubleArray58 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble59 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray58);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble60 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray58);
    double double62 = quarterlyDouble60.get(100);
    double[] doubleArray63 = quarterlyDouble60.dArr;
    quarterlyDouble53.dArr = doubleArray63;
    quarterlyDouble35.dArr = doubleArray63;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble66 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray63);
    quarterlyDouble30.dArr = doubleArray63;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble68 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray63);
    quarterlyDouble4.dArr = doubleArray63;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str71 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5100.0d + "'", double37 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray38);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double39 + "' != '" + 5100.0d + "'", double39 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray54);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray58);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-9999.9999d) + "'", double62 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray63);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01149() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01149");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (byte) 0, 10);
  }

  @Test
  public void test01150() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01150");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double19 = quarterlyDouble17.get((int) (byte) 10);
    double double20 = quarterlyDouble17.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      double double21 = quarterlyDouble17.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9999.9999d) + "'", double19 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5100.0d + "'", double20 == 5100.0d);
  }

  @Test
  public void test01151() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01151");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (short) 10);
    double double12 = quarterlyDouble4.deltaQ((-1), (-1));
    double double13 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str15 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
  }

  @Test
  public void test01152() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01152");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double26 = quarterlyDouble23.get((int) '4');
    double[] doubleArray30 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    double[] doubleArray32 = quarterlyDouble31.dArr;
    double double33 = quarterlyDouble31.getQseqQ();
    double[] doubleArray34 = new double[] {};
    quarterlyDouble31.dArr = doubleArray34;
    quarterlyDouble23.dArr = doubleArray34;
    double[] doubleArray37 = quarterlyDouble23.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble39 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    quarterlyDouble18.dArr = doubleArray37;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str42 = quarterlyDouble18.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9999.9999d) + "'", double26 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5100.0d + "'", double33 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
  }

  @Test
  public void test01153() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01153");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, 0, (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 10, 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 10, (int) ' ');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList18 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.lang.Class<?> wildcardClass19 = strList2.getClass();
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(manyCompanyDataList7);
    org.junit.Assert.assertNotNull(manyCompanyDataList8);
    org.junit.Assert.assertNotNull(companyDataList11);
    org.junit.Assert.assertNotNull(companyDataList14);
    org.junit.Assert.assertNotNull(companyDataList17);
    org.junit.Assert.assertNotNull(manyCompanyDataList18);
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test01154() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01154");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (short) 10, (-1));
  }

  @Test
  public void test01155() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01155");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double8 = quarterlyDouble5.deltaQ((int) (byte) 0, 1);
    double double9 = quarterlyDouble5.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double10 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
  }

  @Test
  public void test01156() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01156");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double double11 = quarterlyDouble4.get((int) '4');
    double double14 = quarterlyDouble4.deltaQ((int) (byte) 100, (int) (short) 10);
    double double15 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.getQseqQ();
    double double19 = quarterlyDouble4.deltaQ((int) (byte) 10, (-1));
    java.lang.Class<?> wildcardClass20 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9999.9999d) + "'", double11 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test01157() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01157");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData5 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList2, (int) (short) 100, (int) (short) -1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData8 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList2, (int) (byte) 0, (int) (byte) -1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData11 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList2, 0, 0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData14 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList2, (int) (byte) 100, (int) (byte) 0);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNull(fieldData5);
    org.junit.Assert.assertNull(fieldData8);
    org.junit.Assert.assertNull(fieldData11);
    org.junit.Assert.assertNull(fieldData14);
  }

  @Test
  public void test01158() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01158");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtm();
    double double22 = quarterlyDouble20.getQseqQ();
    double[] doubleArray23 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray23;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray23);
    double double26 = quarterlyDouble25.getTtmAvg();
    java.lang.Class<?> wildcardClass27 = quarterlyDouble25.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5100.0d + "'", double22 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass27);
  }

  @Test
  public void test01159() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01159");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double12 = quarterlyDouble11.getTtmAvg();
    double double13 = quarterlyDouble11.getQseqQ();
    double[] doubleArray17 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    double double21 = quarterlyDouble19.get(100);
    double[] doubleArray22 = quarterlyDouble19.dArr;
    double double25 = quarterlyDouble19.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double double31 = quarterlyDouble30.getTtm();
    double double33 = quarterlyDouble30.get((int) '4');
    double[] doubleArray37 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    double[] doubleArray39 = quarterlyDouble38.dArr;
    double double40 = quarterlyDouble38.getQseqQ();
    double[] doubleArray41 = new double[] {};
    quarterlyDouble38.dArr = doubleArray41;
    quarterlyDouble30.dArr = doubleArray41;
    double[] doubleArray44 = quarterlyDouble30.dArr;
    quarterlyDouble19.dArr = doubleArray44;
    quarterlyDouble11.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    double double48 = quarterlyDouble47.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double49 = quarterlyDouble47.getQseqQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-9999.9999d) + "'", double21 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-9999.9999d) + "'", double33 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
  }

  @Test
  public void test01160() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01160");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) 100, (int) (short) 0);
  }

  @Test
  public void test01161() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01161");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtm();
    double double23 = quarterlyDouble21.getQseqQ();
    double[] doubleArray24 = quarterlyDouble21.dArr;
    double double25 = quarterlyDouble21.getQseqQ();
    double double26 = quarterlyDouble21.getQseqQ();
    double double27 = quarterlyDouble21.getQseqQ();
    double[] doubleArray28 = quarterlyDouble21.dArr;
    quarterlyDouble5.dArr = doubleArray28;
    double double31 = quarterlyDouble5.get((int) (byte) -1);
    double[] doubleArray35 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble36 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray35);
    double double37 = quarterlyDouble36.getTtm();
    double double39 = quarterlyDouble36.get((int) '4');
    double[] doubleArray43 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray43);
    double[] doubleArray45 = quarterlyDouble44.dArr;
    double double46 = quarterlyDouble44.getQseqQ();
    double[] doubleArray47 = new double[] {};
    quarterlyDouble44.dArr = doubleArray47;
    quarterlyDouble36.dArr = doubleArray47;
    double[] doubleArray50 = quarterlyDouble36.dArr;
    quarterlyDouble5.dArr = doubleArray50;
    double[] doubleArray52 = quarterlyDouble5.dArr;
    java.lang.Class<?> wildcardClass53 = doubleArray52.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5100.0d + "'", double26 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5100.0d + "'", double27 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9999.9999d) + "'", double31 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray35);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-9999.9999d) + "'", double39 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray45);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + 5100.0d + "'", double46 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
    org.junit.Assert.assertNotNull(wildcardClass53);
  }

  @Test
  public void test01162() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01162");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double18 = quarterlyDouble16.get((int) (byte) 10);
    double double19 = quarterlyDouble16.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double20 = quarterlyDouble16.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-9999.9999d) + "'", double18 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
  }

  @Test
  public void test01163() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01163");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double double8 = quarterlyDouble5.getMostRecent();
    double double10 = quarterlyDouble5.get((int) (byte) -1);
    double double11 = quarterlyDouble5.getTtm();
    double double14 = quarterlyDouble5.deltaQ((int) (byte) -1, (int) (byte) 0);
    java.lang.Class<?> wildcardClass15 = quarterlyDouble5.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test01164() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01164");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) ' ', (-1));
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01165() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01165");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getQseqQ();
    double double11 = quarterlyDouble4.getQseqQ();
    double double13 = quarterlyDouble4.get((int) (short) 100);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5100.0d + "'", double10 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5100.0d + "'", double11 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
  }

  @Test
  public void test01166() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01166");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double18 = quarterlyDouble16.get(10);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble16.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-9999.9999d) + "'", double18 == (-9999.9999d));
  }

  @Test
  public void test01167() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01167");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList4 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, 100, (-1));
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(manyCompanyDataList3);
    org.junit.Assert.assertNotNull(companyDataList4);
    org.junit.Assert.assertNotNull(companyDataList5);
    org.junit.Assert.assertNotNull(companyDataList8);
  }

  @Test
  public void test01168() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01168");
    double[] doubleArray0 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble1 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray0);
    double[] doubleArray5 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble6 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray5);
    double double7 = quarterlyDouble6.getTtm();
    double double8 = quarterlyDouble6.getQseqQ();
    double[] doubleArray9 = quarterlyDouble6.dArr;
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    quarterlyDouble6.dArr = doubleArray13;
    double[] doubleArray16 = quarterlyDouble6.dArr;
    quarterlyDouble1.dArr = doubleArray16;
    double[] doubleArray18 = quarterlyDouble1.dArr;
    double double19 = quarterlyDouble1.getMostRecent();
    java.lang.Class<?> wildcardClass20 = quarterlyDouble1.getClass();
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test01169() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01169");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(10, (int) (short) 1);
  }

  @Test
  public void test01170() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01170");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 100, (int) ' ');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (-1), (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList16 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 10, 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList19 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, 0, (int) (byte) 100);
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(companyDataList12);
    org.junit.Assert.assertNotNull(manyCompanyDataList13);
    org.junit.Assert.assertNotNull(companyDataList16);
    org.junit.Assert.assertNotNull(companyDataList19);
  }

  @Test
  public void test01171() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01171");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("", 0,
        (int) (byte) 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01172() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01172");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getTtm();
    double double9 = quarterlyDouble4.deltaQ((int) '#', 100);
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double[] doubleArray16 = quarterlyDouble15.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double double18 = quarterlyDouble17.getMostRecent();
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double25 = quarterlyDouble23.getQseqQ();
    double[] doubleArray26 = quarterlyDouble23.dArr;
    double double27 = quarterlyDouble23.getQseqQ();
    double[] doubleArray31 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble32 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    quarterlyDouble23.dArr = doubleArray31;
    double[] doubleArray35 = quarterlyDouble23.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble36 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray35);
    quarterlyDouble17.dArr = doubleArray35;
    quarterlyDouble4.dArr = doubleArray35;
    double double39 = quarterlyDouble4.getTtmAvg();
    double double40 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str42 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray26);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5100.0d + "'", double27 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray35);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
  }

  @Test
  public void test01173() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01173");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) ' ', (int) ' ');
  }

  @Test
  public void test01174() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01174");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double[] doubleArray15 = quarterlyDouble14.dArr;
    double[] doubleArray16 = quarterlyDouble14.dArr;
    quarterlyDouble8.dArr = doubleArray16;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble18.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01175() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01175");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 100, (int) (byte) -1);
  }

  @Test
  public void test01176() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01176");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (short) 100, 1);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01177() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01177");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.lang.String str2 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.lang.String str4 = companyData1.getTicker();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.lang.String str7 = companyData1.getTicker();
    java.lang.String str8 = companyData1.getTicker();
    java.lang.Class<?> wildcardClass9 = companyData1.getClass();
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    org.junit.Assert.assertNotNull(wildcardClass9);
  }

  @Test
  public void test01178() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01178");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getMostRecent();
    double double20 = quarterlyDouble5.deltaQ((int) (byte) 100, (int) (byte) 1);
    // The following exception was thrown during execution in test generation
    try {
      double double21 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
  }

  @Test
  public void test01179() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01179");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double double16 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str18 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
  }

  @Test
  public void test01180() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01180");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.String str8 = companyData1.getTicker();
    java.lang.String str9 = companyData1.getTicker();
    java.lang.String str10 = companyData1.getTicker();
    java.lang.String str11 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList12 = companyData1.getFdList();
    java.lang.Class<?> wildcardClass13 = companyData1.getClass();
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    org.junit.Assert.assertNotNull(fieldDataList12);
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test01181() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01181");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] fieldDataArray0 = new net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] {};
    java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList1 = new java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>();
    boolean boolean2 = java.util.Collections.addAll((java.util.Collection<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1,
        fieldDataArray0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData5 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, 1, (int) (short) 1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData8 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) ' ', (int) ' ');
    org.junit.Assert.assertNotNull(fieldDataArray0);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNull(fieldData5);
    org.junit.Assert.assertNull(fieldData8);
  }

  @Test
  public void test01182() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01182");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList0 = null;
    // The following exception was thrown during execution in test generation
    try {
      net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
          .getFieldData(fieldDataList0, 1, (int) '#');
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
  }

  @Test
  public void test01183() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01183");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double12 = quarterlyDouble10.get((int) (byte) 1);
    double double13 = quarterlyDouble10.getQseqQ();
    double[] doubleArray14 = quarterlyDouble10.dArr;
    quarterlyDouble5.dArr = doubleArray14;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str17 = quarterlyDouble5.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01184() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01184");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("", (-1),
        (int) '#');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01185() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01185");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double double8 = quarterlyDouble5.getMostRecent();
    double double10 = quarterlyDouble5.get((int) (byte) -1);
    double double11 = quarterlyDouble5.getTtm();
    double double12 = quarterlyDouble5.getTtmAvg();
    double double13 = quarterlyDouble5.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      double double14 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
  }

  @Test
  public void test01186() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01186");
    double[] doubleArray0 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble1 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray0);
    double[] doubleArray5 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble6 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray5);
    double double7 = quarterlyDouble6.getTtm();
    double double8 = quarterlyDouble6.getQseqQ();
    double[] doubleArray9 = quarterlyDouble6.dArr;
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    quarterlyDouble6.dArr = doubleArray13;
    double[] doubleArray16 = quarterlyDouble6.dArr;
    quarterlyDouble1.dArr = doubleArray16;
    double[] doubleArray18 = quarterlyDouble1.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double19 = quarterlyDouble1.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01187() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01187");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) ' ', 10);
  }

  @Test
  public void test01188() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01188");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 100, (int) ' ');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (-1), (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList15 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 0, (int) (byte) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList16 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList19 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 100, (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList20 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList23 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 10, 1);
    java.lang.Class<?> wildcardClass24 = strList2.getClass();
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(companyDataList12);
    org.junit.Assert.assertNotNull(companyDataList15);
    org.junit.Assert.assertNotNull(manyCompanyDataList16);
    org.junit.Assert.assertNotNull(companyDataList19);
    org.junit.Assert.assertNotNull(manyCompanyDataList20);
    org.junit.Assert.assertNotNull(companyDataList23);
    org.junit.Assert.assertNotNull(wildcardClass24);
  }

  @Test
  public void test01189() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01189");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("", 1,
        (int) '#');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01190() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01190");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    double[] doubleArray18 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double double26 = quarterlyDouble25.getTtm();
    double double27 = quarterlyDouble25.getQseqQ();
    double[] doubleArray31 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble32 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    quarterlyDouble25.dArr = doubleArray31;
    double double34 = quarterlyDouble25.getQseqQ();
    double double37 = quarterlyDouble25.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray41 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble42 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    double double43 = quarterlyDouble42.getTtmAvg();
    double double44 = quarterlyDouble42.getMostRecent();
    double double46 = quarterlyDouble42.get((int) 'a');
    double double48 = quarterlyDouble42.get((int) (byte) -1);
    double[] doubleArray52 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    double double54 = quarterlyDouble53.getTtm();
    double double55 = quarterlyDouble53.getQseqQ();
    double[] doubleArray56 = quarterlyDouble53.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble57 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    quarterlyDouble42.dArr = doubleArray56;
    quarterlyDouble25.dArr = doubleArray56;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble60 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    quarterlyDouble20.dArr = doubleArray56;
    double[] doubleArray62 = quarterlyDouble20.dArr;
    double double65 = quarterlyDouble20.deltaQ((int) (short) 1, 0);
    double double68 = quarterlyDouble20.deltaQ(0, 0);
    double double69 = quarterlyDouble20.getMostRecent();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5100.0d + "'", double27 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5100.0d + "'", double34 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-9999.9999d) + "'", double46 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-9999.9999d) + "'", double48 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5100.0d + "'", double55 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray62);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
    org.junit.Assert.assertTrue("'" + double69 + "' != '" + 52.0d + "'", double69 == 52.0d);
  }

  @Test
  public void test01191() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01191");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) (byte) 10, (int) ' ');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01192() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01192");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double double12 = quarterlyDouble4.deltaQ(100, (int) (byte) -1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str14 = quarterlyDouble4.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
  }

  @Test
  public void test01193() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01193");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double double19 = quarterlyDouble4.deltaQ((int) (byte) 100, 0);
    double double20 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str22 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5100.0d + "'", double20 == 5100.0d);
  }

  @Test
  public void test01194() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01194");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (byte) -1, (int) (byte) -1);
  }

  @Test
  public void test01195() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01195");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (short) 10, (int) (byte) 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01196() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01196");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) (byte) 0, (int) (byte) 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01197() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01197");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(0, (int) '4');
  }

  @Test
  public void test01198() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01198");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 100, (int) ' ');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (-1), (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList16 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 10, 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList19 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 0, (int) ' ');
    java.lang.Class<?> wildcardClass20 = companyDataList19.getClass();
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(companyDataList12);
    org.junit.Assert.assertNotNull(manyCompanyDataList13);
    org.junit.Assert.assertNotNull(companyDataList16);
    org.junit.Assert.assertNotNull(companyDataList19);
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test01199() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01199");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getTtm();
    double double9 = quarterlyDouble4.deltaQ((int) '#', 100);
    double double10 = quarterlyDouble4.getMostRecent();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double12 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str14 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
  }

  @Test
  public void test01201() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01201");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) '4', (int) (byte) 1);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01202() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01202");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) 10, 0);
  }

  @Test
  public void test01203() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01203");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    java.lang.Class<?> wildcardClass20 = quarterlyDouble19.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test01204() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01204");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) 'a', (int) (short) 10);
  }

  @Test
  public void test01205() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01205");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str19 = quarterlyDouble5.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
  }

  @Test
  public void test01206() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01206");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double[] doubleArray15 = quarterlyDouble14.dArr;
    double[] doubleArray16 = quarterlyDouble14.dArr;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtm();
    double double23 = quarterlyDouble21.getQseqQ();
    double[] doubleArray24 = quarterlyDouble21.dArr;
    double double25 = quarterlyDouble21.getQseqQ();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble21.dArr = doubleArray29;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble14.dArr = doubleArray29;
    quarterlyDouble4.dArr = doubleArray29;
    double[] doubleArray36 = null;
    quarterlyDouble4.dArr = doubleArray36;
    double double38 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str40 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
  }

  @Test
  public void test01207() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01207");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double10 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
  }

  @Test
  public void test01208() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01208");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (short) 10, (int) (byte) 1);
  }

  @Test
  public void test01209() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01209");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double[] doubleArray8 = quarterlyDouble5.dArr;
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double15 = quarterlyDouble13.get((int) (byte) 1);
    double double16 = quarterlyDouble13.getQseqQ();
    double[] doubleArray17 = quarterlyDouble13.dArr;
    quarterlyDouble5.dArr = doubleArray17;
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double25 = quarterlyDouble24.getMostRecent();
    double double26 = quarterlyDouble24.getMostRecent();
    double[] doubleArray27 = quarterlyDouble24.dArr;
    quarterlyDouble5.dArr = doubleArray27;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str30 = quarterlyDouble5.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01210() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01210");
    java.util.List<java.lang.String> strList0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
          .getCompanies(strList0, 10, 0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
  }

  @Test
  public void test01211() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01211");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.String str8 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList9 = companyData1.getFdList();
    java.lang.String str10 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList11 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData14 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList11, (int) (short) 10, 100);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    org.junit.Assert.assertNotNull(fieldDataList9);
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    org.junit.Assert.assertNotNull(fieldDataList11);
    org.junit.Assert.assertNull(fieldData14);
  }

  @Test
  public void test01212() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01212");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get(10);
    double double14 = quarterlyDouble4.getQseqQ();
    double double15 = quarterlyDouble4.getQseqQ();
    double double17 = quarterlyDouble4.get((int) (short) -1);
    double double18 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double19 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
  }

  @Test
  public void test01213() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01213");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray9 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double11 = quarterlyDouble10.getMostRecent();
    double[] doubleArray12 = null;
    quarterlyDouble10.dArr = doubleArray12;
    java.lang.Class<?> wildcardClass14 = quarterlyDouble10.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 52.0d + "'", double11 == 52.0d);
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test01214() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01214");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    java.lang.Class<?> wildcardClass11 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test01215() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01215");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    double double10 = quarterlyDouble4.get((int) (byte) -1);
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double16 = quarterlyDouble15.getTtm();
    double double17 = quarterlyDouble15.getQseqQ();
    double[] doubleArray18 = quarterlyDouble15.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    quarterlyDouble4.dArr = doubleArray18;
    double double21 = quarterlyDouble4.getMostRecent();
    double[] doubleArray25 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble27 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double double29 = quarterlyDouble27.get(10);
    double double30 = quarterlyDouble27.getMostRecent();
    double[] doubleArray31 = quarterlyDouble27.dArr;
    quarterlyDouble4.dArr = doubleArray31;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-9999.9999d) + "'", double29 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01216() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01216");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!", 0,
        (int) (byte) 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01217() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01217");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double double16 = quarterlyDouble4.getQseqQ();
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double24 = quarterlyDouble22.get(100);
    double[] doubleArray25 = quarterlyDouble22.dArr;
    double double28 = quarterlyDouble22.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    double[] doubleArray47 = quarterlyDouble33.dArr;
    quarterlyDouble22.dArr = doubleArray47;
    quarterlyDouble4.dArr = doubleArray47;
    double double50 = quarterlyDouble4.getTtmAvg();
    double double52 = quarterlyDouble4.get((int) (byte) -1);
    double double55 = quarterlyDouble4.deltaQ((int) (short) -1, (int) (short) 0);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str57 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9999.9999d) + "'", double24 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
    org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-9999.9999d) + "'", double52 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
  }

  @Test
  public void test01218() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01218");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (short) 1, (int) (byte) 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01219() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01219");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double double8 = quarterlyDouble5.getMostRecent();
    double[] doubleArray9 = quarterlyDouble5.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str11 = quarterlyDouble5.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01220() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01220");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) 'a', (int) (short) -1);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01221() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01221");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double double11 = quarterlyDouble4.get((int) '4');
    double double12 = quarterlyDouble4.getTtm();
    double double14 = quarterlyDouble4.get((int) ' ');
    double double15 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str17 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9999.9999d) + "'", double11 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
  }

  @Test
  public void test01222() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01222");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double26 = quarterlyDouble23.get((int) '4');
    double[] doubleArray30 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    double[] doubleArray32 = quarterlyDouble31.dArr;
    double double33 = quarterlyDouble31.getQseqQ();
    double[] doubleArray34 = new double[] {};
    quarterlyDouble31.dArr = doubleArray34;
    quarterlyDouble23.dArr = doubleArray34;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble37 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    quarterlyDouble18.dArr = doubleArray34;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble39 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    java.lang.Class<?> wildcardClass40 = quarterlyDouble39.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9999.9999d) + "'", double26 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5100.0d + "'", double33 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
    org.junit.Assert.assertNotNull(wildcardClass40);
  }

  @Test
  public void test01223() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01223");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double double19 = quarterlyDouble4.deltaQ((int) (byte) 100, 0);
    double double20 = quarterlyDouble4.getTtm();
    double double21 = quarterlyDouble4.getTtm();
    double double24 = quarterlyDouble4.deltaQ((int) '#', 1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str26 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
  }

  @Test
  public void test01224() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01224");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(100, (int) 'a');
  }

  @Test
  public void test01225() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01225");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.lang.String str7 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList8 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList9 = companyData1.getFdList();
    java.lang.String str10 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList11 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData14 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList11, 10, (int) (byte) 100);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    org.junit.Assert.assertNotNull(fieldDataList8);
    org.junit.Assert.assertNotNull(fieldDataList9);
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    org.junit.Assert.assertNotNull(fieldDataList11);
    org.junit.Assert.assertNull(fieldData14);
  }

  @Test
  public void test01226() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01226");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double double19 = quarterlyDouble4.deltaQ((int) (byte) 100, 0);
    double[] doubleArray20 = quarterlyDouble4.dArr;
    double double21 = quarterlyDouble4.getQseqQ();
    double[] doubleArray22 = quarterlyDouble4.dArr;
    java.lang.Class<?> wildcardClass23 = doubleArray22.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5100.0d + "'", double21 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test01227() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01227");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    double double9 = quarterlyDouble4.getQseqQ();
    double double10 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str12 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
  }

  @Test
  public void test01228() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01228");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.String str8 = companyData1.getTicker();
    java.lang.String str9 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList10 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData13 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList10, (int) (byte) 0, (int) (byte) -1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData16 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList10, (int) (byte) 0, (int) (short) 0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData19 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList10, (int) '4', (-1));
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    org.junit.Assert.assertNotNull(fieldDataList10);
    org.junit.Assert.assertNull(fieldData13);
    org.junit.Assert.assertNull(fieldData16);
    org.junit.Assert.assertNull(fieldData19);
  }

  @Test
  public void test01229() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01229");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) 'a', (int) (byte) 0);
  }

  @Test
  public void test01230() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01230");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) 10, (int) (byte) 0);
  }

  @Test
  public void test01231() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01231");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) ' ');
    double double10 = quarterlyDouble4.getMostRecent();
    double double12 = quarterlyDouble4.get(10);
    double double15 = quarterlyDouble4.deltaQ(10, (int) (short) -1);
    double double16 = quarterlyDouble4.getMostRecent();
    double double17 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double double23 = quarterlyDouble22.getTtmAvg();
    double double24 = quarterlyDouble22.getMostRecent();
    double double25 = quarterlyDouble22.getTtm();
    double double26 = quarterlyDouble22.getTtm();
    double[] doubleArray27 = quarterlyDouble22.dArr;
    double[] doubleArray31 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble32 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    double double33 = quarterlyDouble32.getTtm();
    double double34 = quarterlyDouble32.getQseqQ();
    double[] doubleArray38 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble39 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray38);
    quarterlyDouble32.dArr = doubleArray38;
    double double41 = quarterlyDouble32.getQseqQ();
    double double44 = quarterlyDouble32.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray48 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble49 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray48);
    double double50 = quarterlyDouble49.getTtmAvg();
    double double51 = quarterlyDouble49.getMostRecent();
    double double53 = quarterlyDouble49.get((int) 'a');
    double double55 = quarterlyDouble49.get((int) (byte) -1);
    double[] doubleArray59 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble60 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray59);
    double double61 = quarterlyDouble60.getTtm();
    double double62 = quarterlyDouble60.getQseqQ();
    double[] doubleArray63 = quarterlyDouble60.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble64 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray63);
    quarterlyDouble49.dArr = doubleArray63;
    quarterlyDouble32.dArr = doubleArray63;
    quarterlyDouble22.dArr = doubleArray63;
    quarterlyDouble4.dArr = doubleArray63;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str70 = quarterlyDouble4.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9999.9999d) + "'", double12 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5100.0d + "'", double34 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray38);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 5100.0d + "'", double41 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray48);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    org.junit.Assert.assertTrue("'" + double51 + "' != '" + 52.0d + "'", double51 == 52.0d);
    org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-9999.9999d) + "'", double53 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-9999.9999d) + "'", double55 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray59);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
    org.junit.Assert.assertTrue("'" + double62 + "' != '" + 5100.0d + "'", double62 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray63);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01232() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01232");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) '4', (int) 'a');
  }

  @Test
  public void test01233() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01233");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 10, (int) (short) 10);
  }

  @Test
  public void test01234() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01234");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) -1, (-1));
  }

  @Test
  public void test01235() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01235");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double25 = quarterlyDouble23.getQseqQ();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble23.dArr = doubleArray29;
    double double32 = quarterlyDouble23.getQseqQ();
    double double33 = quarterlyDouble23.getTtmAvg();
    double double34 = quarterlyDouble23.getTtm();
    double double35 = quarterlyDouble23.getMostRecent();
    double[] doubleArray39 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray39);
    double double41 = quarterlyDouble40.getTtm();
    double double42 = quarterlyDouble40.getQseqQ();
    double[] doubleArray43 = quarterlyDouble40.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray43);
    double double45 = quarterlyDouble44.getQseqQ();
    double[] doubleArray49 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray49);
    double[] doubleArray51 = quarterlyDouble50.dArr;
    double[] doubleArray52 = quarterlyDouble50.dArr;
    quarterlyDouble44.dArr = doubleArray52;
    quarterlyDouble23.dArr = doubleArray52;
    quarterlyDouble18.dArr = doubleArray52;
    double double56 = quarterlyDouble18.getMostRecent();
    double double57 = quarterlyDouble18.getTtm();
    double double59 = quarterlyDouble18.get((int) '#');
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5100.0d + "'", double32 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    org.junit.Assert.assertTrue("'" + double42 + "' != '" + 5100.0d + "'", double42 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 5100.0d + "'", double45 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray49);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double56 + "' != '" + 52.0d + "'", double56 == 52.0d);
    org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
    org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-9999.9999d) + "'", double59 == (-9999.9999d));
  }

  @Test
  public void test01236() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01236");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) ' ');
    double double10 = quarterlyDouble4.getMostRecent();
    double double12 = quarterlyDouble4.get(10);
    double double15 = quarterlyDouble4.deltaQ(10, (int) (short) -1);
    double double16 = quarterlyDouble4.getMostRecent();
    double double17 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str19 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9999.9999d) + "'", double12 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
  }

  @Test
  public void test01237() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01237");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, 0, (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 10, 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 10, (int) ' ');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList20 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 1, (int) (short) 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList23 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 0, (int) (short) 100);
    java.lang.Class<?> wildcardClass24 = strList2.getClass();
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(manyCompanyDataList7);
    org.junit.Assert.assertNotNull(manyCompanyDataList8);
    org.junit.Assert.assertNotNull(companyDataList11);
    org.junit.Assert.assertNotNull(companyDataList14);
    org.junit.Assert.assertNotNull(companyDataList17);
    org.junit.Assert.assertNotNull(companyDataList20);
    org.junit.Assert.assertNotNull(companyDataList23);
    org.junit.Assert.assertNotNull(wildcardClass24);
  }

  @Test
  public void test01238() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01238");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getMostRecent();
    double double7 = quarterlyDouble5.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str9 = quarterlyDouble5.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
  }

  @Test
  public void test01239() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01239");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double[] doubleArray21 = quarterlyDouble20.dArr;
    double[] doubleArray22 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray22;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double[] doubleArray25 = quarterlyDouble24.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    java.lang.Class<?> wildcardClass27 = doubleArray25.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass27);
  }

  @Test
  public void test01240() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01240");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (byte) 0, (int) (short) 10);
  }

  @Test
  public void test01241() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01241");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, 0, (int) (byte) -1);
  }

  @Test
  public void test01242() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01242");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double13 = quarterlyDouble12.getTtm();
    double double16 = quarterlyDouble12.deltaQ((int) (byte) 1, (int) (byte) -1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str18 = quarterlyDouble12.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
  }

  @Test
  public void test01243() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01243");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (short) 10, (int) (short) 10);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01244() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01244");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtmAvg();
    double double17 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str19 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
  }

  @Test
  public void test01245() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01245");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) '#', (int) (byte) 0);
  }

  @Test
  public void test01246() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01246");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (short) 100, (int) 'a');
  }

  @Test
  public void test01247() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01247");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (short) 10, (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (-1), 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList18 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList19 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList22 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (-1), 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList25 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (byte) 100, (int) (byte) 100);
    java.lang.Class<?> wildcardClass26 = strList3.getClass();
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(companyDataList13);
    org.junit.Assert.assertNotNull(manyCompanyDataList14);
    org.junit.Assert.assertNotNull(companyDataList17);
    org.junit.Assert.assertNotNull(manyCompanyDataList18);
    org.junit.Assert.assertNotNull(manyCompanyDataList19);
    org.junit.Assert.assertNotNull(companyDataList22);
    org.junit.Assert.assertNotNull(companyDataList25);
    org.junit.Assert.assertNotNull(wildcardClass26);
  }

  @Test
  public void test01248() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01248");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ(10, (int) (byte) 0);
    double[] doubleArray17 = quarterlyDouble4.dArr;
    double double20 = quarterlyDouble4.deltaQ(10, (int) (short) -1);
    java.lang.Class<?> wildcardClass21 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test01249() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01249");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) '4', (int) (byte) 0);
  }

  @Test
  public void test01250() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01250");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double[] doubleArray16 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double double18 = quarterlyDouble17.getTtm();
    double double19 = quarterlyDouble17.getQseqQ();
    double[] doubleArray20 = quarterlyDouble17.dArr;
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    quarterlyDouble17.dArr = doubleArray24;
    double double27 = quarterlyDouble17.getTtm();
    double[] doubleArray28 = quarterlyDouble17.dArr;
    double double29 = quarterlyDouble17.getTtm();
    double[] doubleArray30 = quarterlyDouble17.dArr;
    quarterlyDouble4.dArr = doubleArray30;
    double double32 = quarterlyDouble4.getMostRecent();
    double double35 = quarterlyDouble4.deltaQ((int) (byte) 10, (int) (byte) 0);
    double double36 = quarterlyDouble4.getQseqQ();
    double[] doubleArray37 = quarterlyDouble4.dArr;
    double[] doubleArray38 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble39 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray38);
    double[] doubleArray43 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray43);
    double double45 = quarterlyDouble44.getTtm();
    double double46 = quarterlyDouble44.getQseqQ();
    double[] doubleArray47 = quarterlyDouble44.dArr;
    double[] doubleArray51 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble52 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray51);
    quarterlyDouble44.dArr = doubleArray51;
    double[] doubleArray54 = quarterlyDouble44.dArr;
    quarterlyDouble39.dArr = doubleArray54;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble56 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray54);
    quarterlyDouble4.dArr = doubleArray54;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str59 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5100.0d + "'", double19 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5100.0d + "'", double36 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + 5100.0d + "'", double46 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray54);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01251() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01251");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double double12 = quarterlyDouble4.get(0);
    double double13 = quarterlyDouble4.getMostRecent();
    double double14 = quarterlyDouble4.getQseqQ();
    double double15 = quarterlyDouble4.getMostRecent();
    double double18 = quarterlyDouble4.deltaQ((int) (byte) 100, (-1));
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double25 = quarterlyDouble23.getQseqQ();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble23.dArr = doubleArray29;
    double double32 = quarterlyDouble23.getQseqQ();
    double double33 = quarterlyDouble23.getTtmAvg();
    double[] doubleArray37 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    double double39 = quarterlyDouble38.getTtm();
    double double40 = quarterlyDouble38.getQseqQ();
    double[] doubleArray44 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble45 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble38.dArr = doubleArray44;
    double double47 = quarterlyDouble38.getQseqQ();
    double double48 = quarterlyDouble38.getTtmAvg();
    double double49 = quarterlyDouble38.getTtm();
    double[] doubleArray53 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble54 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray53);
    double double55 = quarterlyDouble54.getTtm();
    double double56 = quarterlyDouble54.getQseqQ();
    double[] doubleArray57 = quarterlyDouble54.dArr;
    quarterlyDouble38.dArr = doubleArray57;
    quarterlyDouble23.dArr = doubleArray57;
    double[] doubleArray63 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble64 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray63);
    double[] doubleArray65 = quarterlyDouble64.dArr;
    double double66 = quarterlyDouble64.getQseqQ();
    double[] doubleArray67 = new double[] {};
    quarterlyDouble64.dArr = doubleArray67;
    quarterlyDouble23.dArr = doubleArray67;
    quarterlyDouble4.dArr = doubleArray67;
    double double72 = quarterlyDouble4.get((-1));
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str74 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5100.0d + "'", double32 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double47 + "' != '" + 5100.0d + "'", double47 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray53);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5100.0d + "'", double56 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray57);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray63);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray65);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5100.0d + "'", double66 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray67);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
    org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-9999.9999d) + "'", double72 == (-9999.9999d));
  }

  @Test
  public void test01252() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01252");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double double12 = quarterlyDouble4.get(0);
    double double13 = quarterlyDouble4.getMostRecent();
    double double14 = quarterlyDouble4.getQseqQ();
    double double15 = quarterlyDouble4.getMostRecent();
    double double18 = quarterlyDouble4.deltaQ((int) (byte) 100, (-1));
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double25 = quarterlyDouble23.getQseqQ();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble23.dArr = doubleArray29;
    double double32 = quarterlyDouble23.getQseqQ();
    double double33 = quarterlyDouble23.getTtmAvg();
    double[] doubleArray37 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    double double39 = quarterlyDouble38.getTtm();
    double double40 = quarterlyDouble38.getQseqQ();
    double[] doubleArray44 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble45 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble38.dArr = doubleArray44;
    double double47 = quarterlyDouble38.getQseqQ();
    double double48 = quarterlyDouble38.getTtmAvg();
    double double49 = quarterlyDouble38.getTtm();
    double[] doubleArray53 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble54 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray53);
    double double55 = quarterlyDouble54.getTtm();
    double double56 = quarterlyDouble54.getQseqQ();
    double[] doubleArray57 = quarterlyDouble54.dArr;
    quarterlyDouble38.dArr = doubleArray57;
    quarterlyDouble23.dArr = doubleArray57;
    double[] doubleArray63 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble64 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray63);
    double[] doubleArray65 = quarterlyDouble64.dArr;
    double double66 = quarterlyDouble64.getQseqQ();
    double[] doubleArray67 = new double[] {};
    quarterlyDouble64.dArr = doubleArray67;
    quarterlyDouble23.dArr = doubleArray67;
    quarterlyDouble4.dArr = doubleArray67;
    double double72 = quarterlyDouble4.get((-1));
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str74 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5100.0d + "'", double32 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double47 + "' != '" + 5100.0d + "'", double47 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray53);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5100.0d + "'", double56 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray57);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray63);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray65);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5100.0d + "'", double66 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray67);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
    org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-9999.9999d) + "'", double72 == (-9999.9999d));
  }

  @Test
  public void test01253() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01253");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (byte) 100, (int) ' ');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01254() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01254");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray9 = quarterlyDouble4.dArr;
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01255() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01255");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getQseqQ();
    double double10 = quarterlyDouble4.getQseqQ();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double12 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5100.0d + "'", double10 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01256() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01256");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    double[] doubleArray18 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double double26 = quarterlyDouble25.getTtm();
    double double27 = quarterlyDouble25.getQseqQ();
    double[] doubleArray31 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble32 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    quarterlyDouble25.dArr = doubleArray31;
    double double34 = quarterlyDouble25.getQseqQ();
    double double37 = quarterlyDouble25.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray41 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble42 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    double double43 = quarterlyDouble42.getTtmAvg();
    double double44 = quarterlyDouble42.getMostRecent();
    double double46 = quarterlyDouble42.get((int) 'a');
    double double48 = quarterlyDouble42.get((int) (byte) -1);
    double[] doubleArray52 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    double double54 = quarterlyDouble53.getTtm();
    double double55 = quarterlyDouble53.getQseqQ();
    double[] doubleArray56 = quarterlyDouble53.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble57 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    quarterlyDouble42.dArr = doubleArray56;
    quarterlyDouble25.dArr = doubleArray56;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble60 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    quarterlyDouble20.dArr = doubleArray56;
    double[] doubleArray62 = quarterlyDouble20.dArr;
    double double65 = quarterlyDouble20.deltaQ((int) (short) 1, 0);
    double double68 = quarterlyDouble20.deltaQ(0, 0);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str70 = quarterlyDouble20.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5100.0d + "'", double27 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5100.0d + "'", double34 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-9999.9999d) + "'", double46 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-9999.9999d) + "'", double48 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5100.0d + "'", double55 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray62);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
  }

  @Test
  public void test01257() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01257");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double double19 = quarterlyDouble4.deltaQ((int) (byte) 100, 0);
    double double20 = quarterlyDouble4.getTtm();
    double[] doubleArray21 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str23 = quarterlyDouble4.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01258() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01258");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtm();
    double double22 = quarterlyDouble20.getQseqQ();
    double[] doubleArray23 = quarterlyDouble20.dArr;
    double double24 = quarterlyDouble20.getQseqQ();
    double[] doubleArray28 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    quarterlyDouble20.dArr = doubleArray28;
    double[] doubleArray32 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray32;
    double[] doubleArray34 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    double[] doubleArray39 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray39);
    double double41 = quarterlyDouble40.getTtm();
    double double42 = quarterlyDouble40.getQseqQ();
    double[] doubleArray43 = quarterlyDouble40.dArr;
    double[] doubleArray47 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble48 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray47);
    quarterlyDouble40.dArr = doubleArray47;
    double[] doubleArray50 = quarterlyDouble40.dArr;
    quarterlyDouble35.dArr = doubleArray50;
    quarterlyDouble4.dArr = doubleArray50;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str54 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5100.0d + "'", double22 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    org.junit.Assert.assertTrue("'" + double42 + "' != '" + 5100.0d + "'", double42 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01259() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01259");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, 10, 1);
  }

  @Test
  public void test01260() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01260");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.lang.String str6 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList8 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList9 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData12 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList9, (int) (short) 0, (int) (byte) 10);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData15 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList9, (int) ' ', (-1));
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData18 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList9, (int) (short) 10, (int) (byte) 1);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertNotNull(fieldDataList8);
    org.junit.Assert.assertNotNull(fieldDataList9);
    org.junit.Assert.assertNull(fieldData12);
    org.junit.Assert.assertNull(fieldData15);
    org.junit.Assert.assertNull(fieldData18);
  }

  @Test
  public void test01261() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01261");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) (byte) 10, (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(manyCompanyDataList3);
  }

  @Test
  public void test01262() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01262");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get(10);
    double double14 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str16 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
  }

  @Test
  public void test01263() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01263");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    double double8 = quarterlyDouble5.getTtmAvg();
    double double9 = quarterlyDouble5.getMostRecent();
    double double10 = quarterlyDouble5.getMostRecent();
    double double11 = quarterlyDouble5.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double12 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
  }

  @Test
  public void test01264() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01264");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtm();
    double double22 = quarterlyDouble20.getQseqQ();
    double[] doubleArray23 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray23;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray23);
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double double31 = quarterlyDouble30.getTtm();
    double double32 = quarterlyDouble30.getQseqQ();
    double[] doubleArray36 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble37 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray36);
    quarterlyDouble30.dArr = doubleArray36;
    double double39 = quarterlyDouble30.getQseqQ();
    double double42 = quarterlyDouble30.deltaQ((int) (short) 100, (int) (byte) -1);
    double double45 = quarterlyDouble30.deltaQ((int) (byte) 100, 0);
    double double46 = quarterlyDouble30.getTtm();
    double[] doubleArray47 = quarterlyDouble30.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble48 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray47);
    quarterlyDouble25.dArr = doubleArray47;
    double double51 = quarterlyDouble25.get((int) ' ');
    double double52 = quarterlyDouble25.getTtm();
    double double53 = quarterlyDouble25.getMostRecent();
    double[] doubleArray57 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble58 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray57);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble59 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray57);
    double[] doubleArray60 = quarterlyDouble59.dArr;
    double[] doubleArray64 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble65 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray64);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble66 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray64);
    double double68 = quarterlyDouble66.get(100);
    double[] doubleArray69 = quarterlyDouble66.dArr;
    quarterlyDouble59.dArr = doubleArray69;
    double[] doubleArray71 = quarterlyDouble59.dArr;
    quarterlyDouble25.dArr = doubleArray71;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str74 = quarterlyDouble25.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5100.0d + "'", double22 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5100.0d + "'", double32 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray36);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double39 + "' != '" + 5100.0d + "'", double39 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-9999.9999d) + "'", double51 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray57);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray60);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray64);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-9999.9999d) + "'", double68 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray69);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray71);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01265() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01265");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble7 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray6);
    double double8 = quarterlyDouble7.getMostRecent();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double14 = quarterlyDouble13.getTtm();
    double double15 = quarterlyDouble13.getQseqQ();
    double[] doubleArray16 = quarterlyDouble13.dArr;
    double double17 = quarterlyDouble13.getQseqQ();
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    quarterlyDouble13.dArr = doubleArray21;
    double[] doubleArray25 = quarterlyDouble13.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    quarterlyDouble7.dArr = doubleArray25;
    double double30 = quarterlyDouble7.deltaQ((int) 'a', (int) (short) 100);
    double double31 = quarterlyDouble7.getQseqQ();
    double[] doubleArray32 = quarterlyDouble7.dArr;
    double double33 = quarterlyDouble7.getMostRecent();
    java.lang.Class<?> wildcardClass34 = quarterlyDouble7.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5100.0d + "'", double31 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
    org.junit.Assert.assertNotNull(wildcardClass34);
  }

  @Test
  public void test01266() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01266");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, 1, (int) '#');
  }

  @Test
  public void test01267() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01267");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData9 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList6, (int) (byte) 1, (int) (short) 10);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData12 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList6, (int) (short) -1, 100);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData15 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList6, (-1), (int) (short) 10);
    java.lang.Class<?> wildcardClass16 = fieldDataList6.getClass();
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNull(fieldData9);
    org.junit.Assert.assertNull(fieldData12);
    org.junit.Assert.assertNull(fieldData15);
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test01268() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01268");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (short) 0, (int) 'a');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01269() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01269");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    double[] doubleArray8 = quarterlyDouble5.dArr;
    double double9 = quarterlyDouble5.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double12 = quarterlyDouble5.deltaQ((int) (byte) 1, (int) ' ');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
  }

  @Test
  public void test01270() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01270");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, 100, (int) (short) 100);
  }

  @Test
  public void test01271() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01271");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.lang.String str4 = companyData1.getTicker();
    java.lang.String str5 = companyData1.getTicker();
    java.lang.String str6 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.Class<?> wildcardClass8 = fieldDataList7.getClass();
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertNotNull(wildcardClass8);
  }

  @Test
  public void test01272() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01272");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double8 = quarterlyDouble5.deltaQ((int) (short) 10, (int) ' ');
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double14 = quarterlyDouble13.getTtm();
    double double16 = quarterlyDouble13.get((int) '4');
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double[] doubleArray22 = quarterlyDouble21.dArr;
    double double23 = quarterlyDouble21.getQseqQ();
    double[] doubleArray24 = new double[] {};
    quarterlyDouble21.dArr = doubleArray24;
    quarterlyDouble13.dArr = doubleArray24;
    double[] doubleArray27 = quarterlyDouble13.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    double[] doubleArray33 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray33);
    double double35 = quarterlyDouble34.getTtm();
    double double36 = quarterlyDouble34.getQseqQ();
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    quarterlyDouble34.dArr = doubleArray40;
    double double43 = quarterlyDouble34.getQseqQ();
    double double46 = quarterlyDouble34.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray50 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble51 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray50);
    double double52 = quarterlyDouble51.getTtmAvg();
    double double53 = quarterlyDouble51.getMostRecent();
    double double55 = quarterlyDouble51.get((int) 'a');
    double double57 = quarterlyDouble51.get((int) (byte) -1);
    double[] doubleArray61 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble62 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray61);
    double double63 = quarterlyDouble62.getTtm();
    double double64 = quarterlyDouble62.getQseqQ();
    double[] doubleArray65 = quarterlyDouble62.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble66 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    quarterlyDouble51.dArr = doubleArray65;
    quarterlyDouble34.dArr = doubleArray65;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble69 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    quarterlyDouble29.dArr = doubleArray65;
    quarterlyDouble5.dArr = doubleArray65;
    double double74 = quarterlyDouble5.deltaQ((int) (byte) 100, (int) (byte) 1);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9999.9999d) + "'", double16 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
    org.junit.Assert.assertNotNull(doubleArray33);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5100.0d + "'", double36 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-9999.9999d) + "'", double55 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-9999.9999d) + "'", double57 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray61);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    org.junit.Assert.assertTrue("'" + double64 + "' != '" + 5100.0d + "'", double64 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray65);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
  }

  @Test
  public void test01273() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01273");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.String str8 = companyData1.getTicker();
    java.lang.String str9 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList10 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData13 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList10, (int) (byte) 1, (int) (short) 100);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData16 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList10, (int) (short) 0, (int) '4');
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    org.junit.Assert.assertNotNull(fieldDataList10);
    org.junit.Assert.assertNull(fieldData13);
    org.junit.Assert.assertNull(fieldData16);
  }

  @Test
  public void test01274() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01274");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] fieldDataArray0 = new net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] {};
    java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList1 = new java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>();
    boolean boolean2 = java.util.Collections.addAll((java.util.Collection<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1,
        fieldDataArray0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData5 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, 0, (int) 'a');
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData8 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, 0, (int) (short) 0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData11 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (byte) 1, 1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData14 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, 0, (-1));
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData17 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, 0, (int) (short) 1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData20 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (short) 10, (int) (short) -1);
    org.junit.Assert.assertNotNull(fieldDataArray0);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNull(fieldData5);
    org.junit.Assert.assertNull(fieldData8);
    org.junit.Assert.assertNull(fieldData11);
    org.junit.Assert.assertNull(fieldData14);
    org.junit.Assert.assertNull(fieldData17);
    org.junit.Assert.assertNull(fieldData20);
  }

  @Test
  public void test01275() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01275");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double double16 = quarterlyDouble4.getQseqQ();
    double double17 = quarterlyDouble4.getMostRecent();
    double double18 = quarterlyDouble4.getTtmAvg();
    double double19 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str21 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
  }

  @Test
  public void test01276() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01276");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double double8 = quarterlyDouble5.getMostRecent();
    double double10 = quarterlyDouble5.get((int) (byte) -1);
    double double11 = quarterlyDouble5.getTtm();
    double double12 = quarterlyDouble5.getQseqQ();
    double double13 = quarterlyDouble5.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str15 = quarterlyDouble5.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5100.0d + "'", double12 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
  }

  @Test
  public void test01277() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01277");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getTtm();
    double double9 = quarterlyDouble4.deltaQ((int) '#', 100);
    double double10 = quarterlyDouble4.getMostRecent();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double[] doubleArray12 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str14 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01278() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01278");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    double double8 = quarterlyDouble5.getMostRecent();
    double double9 = quarterlyDouble5.getTtm();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
  }

  @Test
  public void test01279() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01279");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double double10 = quarterlyDouble8.getMostRecent();
    double double11 = quarterlyDouble8.getMostRecent();
    double double14 = quarterlyDouble8.deltaQ((int) (byte) -1, (int) (short) 1);
    double double15 = quarterlyDouble8.getQseqQ();
    double double16 = quarterlyDouble8.getQseqQ();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 52.0d + "'", double11 == 52.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
  }

  @Test
  public void test01280() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01280");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double18 = quarterlyDouble16.get((int) (short) -1);
    // The following exception was thrown during execution in test generation
    try {
      double double21 = quarterlyDouble16.deltaQ((int) (byte) 0, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-9999.9999d) + "'", double18 == (-9999.9999d));
  }

  @Test
  public void test01281() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01281");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtm();
    double[] doubleArray17 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    java.lang.Class<?> wildcardClass19 = doubleArray17.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test01282() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01282");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, 0, (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList16 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 0, (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList20 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 100, (int) (byte) 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList21 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList22 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(manyCompanyDataList7);
    org.junit.Assert.assertNotNull(manyCompanyDataList8);
    org.junit.Assert.assertNotNull(companyDataList11);
    org.junit.Assert.assertNotNull(manyCompanyDataList12);
    org.junit.Assert.assertNotNull(manyCompanyDataList13);
    org.junit.Assert.assertNotNull(companyDataList16);
    org.junit.Assert.assertNotNull(manyCompanyDataList17);
    org.junit.Assert.assertNotNull(companyDataList20);
    org.junit.Assert.assertNotNull(manyCompanyDataList21);
    org.junit.Assert.assertNotNull(manyCompanyDataList22);
  }

  @Test
  public void test01283() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01283");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double[] doubleArray14 = quarterlyDouble4.dArr;
    double double17 = quarterlyDouble4.deltaQ((int) 'a', 100);
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double[] doubleArray24 = quarterlyDouble22.dArr;
    quarterlyDouble4.dArr = doubleArray24;
    double double26 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str28 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5100.0d + "'", double26 == 5100.0d);
  }

  @Test
  public void test01284() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01284");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtmAvg();
    double double17 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      double double20 = quarterlyDouble4.deltaQ((int) (byte) 0, (int) (byte) 10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
  }

  @Test
  public void test01285() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01285");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (short) 100, (int) (short) 1);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01286() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01286");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) 'a', 1);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01287() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01287");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double18 = quarterlyDouble16.get(10);
    double double19 = quarterlyDouble16.getTtm();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-9999.9999d) + "'", double18 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
  }

  @Test
  public void test01288() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01288");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(0, (int) (byte) 10);
  }

  @Test
  public void test01289() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01289");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) -1, (-1));
  }

  @Test
  public void test01290() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01290");
    double[] doubleArray0 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble1 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray0);
    double[] doubleArray5 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble6 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray5);
    double double7 = quarterlyDouble6.getTtm();
    double double8 = quarterlyDouble6.getQseqQ();
    double[] doubleArray9 = quarterlyDouble6.dArr;
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    quarterlyDouble6.dArr = doubleArray13;
    double[] doubleArray16 = quarterlyDouble6.dArr;
    quarterlyDouble1.dArr = doubleArray16;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double double19 = quarterlyDouble18.getQseqQ();
    double double20 = quarterlyDouble18.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      double double23 = quarterlyDouble18.deltaQ((int) (byte) 0, (int) '#');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5100.0d + "'", double19 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
  }

  @Test
  public void test01291() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01291");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double19 = quarterlyDouble18.getTtm();
    double double20 = quarterlyDouble18.getTtmAvg();
    double double21 = quarterlyDouble18.getTtmAvg();
    java.lang.Class<?> wildcardClass22 = quarterlyDouble18.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass22);
  }

  @Test
  public void test01292() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01292");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getMostRecent();
    double double7 = quarterlyDouble5.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double8 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
  }

  @Test
  public void test01293() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01293");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getTtm();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double17 = quarterlyDouble14.get((int) '4');
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double double24 = quarterlyDouble22.getQseqQ();
    double[] doubleArray25 = new double[] {};
    quarterlyDouble22.dArr = doubleArray25;
    quarterlyDouble14.dArr = doubleArray25;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble28.dArr = doubleArray44;
    quarterlyDouble8.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str52 = quarterlyDouble50.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
  }

  @Test
  public void test01294() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01294");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (-1), (int) (short) -1);
  }

  @Test
  public void test01295() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01295");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, 0, (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 10, 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 10, (int) ' ');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList20 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 1, (int) (short) 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList23 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 0, (int) (short) 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList24 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.lang.Class<?> wildcardClass25 = manyCompanyDataList24.getClass();
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(manyCompanyDataList7);
    org.junit.Assert.assertNotNull(manyCompanyDataList8);
    org.junit.Assert.assertNotNull(companyDataList11);
    org.junit.Assert.assertNotNull(companyDataList14);
    org.junit.Assert.assertNotNull(companyDataList17);
    org.junit.Assert.assertNotNull(companyDataList20);
    org.junit.Assert.assertNotNull(companyDataList23);
    org.junit.Assert.assertNotNull(manyCompanyDataList24);
    org.junit.Assert.assertNotNull(wildcardClass25);
  }

  @Test
  public void test01296() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01296");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(manyCompanyDataList8);
    org.junit.Assert.assertNotNull(manyCompanyDataList9);
    org.junit.Assert.assertNotNull(manyCompanyDataList10);
  }

  @Test
  public void test01297() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01297");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) 'a', (int) (short) -1);
  }

  @Test
  public void test01298() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01298");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getTtm();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double17 = quarterlyDouble14.get((int) '4');
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double double24 = quarterlyDouble22.getQseqQ();
    double[] doubleArray25 = new double[] {};
    quarterlyDouble22.dArr = doubleArray25;
    quarterlyDouble14.dArr = doubleArray25;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble28.dArr = doubleArray44;
    quarterlyDouble8.dArr = doubleArray44;
    double[] doubleArray53 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble54 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray53);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble55 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray53);
    double[] doubleArray56 = quarterlyDouble55.dArr;
    double[] doubleArray60 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble61 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray60);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble62 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray60);
    double double64 = quarterlyDouble62.get(100);
    double[] doubleArray65 = quarterlyDouble62.dArr;
    quarterlyDouble55.dArr = doubleArray65;
    double double67 = quarterlyDouble55.getTtmAvg();
    double double68 = quarterlyDouble55.getQseqQ();
    double[] doubleArray69 = quarterlyDouble55.dArr;
    quarterlyDouble8.dArr = doubleArray69;
    double double71 = quarterlyDouble8.getQseqQ();
    double double72 = quarterlyDouble8.getTtmAvg();
    double[] doubleArray76 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble77 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray76);
    double double78 = quarterlyDouble77.getTtm();
    double double79 = quarterlyDouble77.getQseqQ();
    double[] doubleArray80 = quarterlyDouble77.dArr;
    double double81 = quarterlyDouble77.getQseqQ();
    double[] doubleArray85 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble86 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray85);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble87 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray85);
    quarterlyDouble77.dArr = doubleArray85;
    double[] doubleArray92 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble93 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray92);
    double[] doubleArray94 = quarterlyDouble93.dArr;
    double[] doubleArray95 = quarterlyDouble93.dArr;
    quarterlyDouble77.dArr = doubleArray95;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble97 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray95);
    double[] doubleArray98 = quarterlyDouble97.dArr;
    quarterlyDouble8.dArr = doubleArray98;
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertNotNull(doubleArray53);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray60);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-9999.9999d) + "'", double64 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray65);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5100.0d + "'", double68 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray69);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double71 + "' != '" + 5100.0d + "'", double71 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray76);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
    org.junit.Assert.assertTrue("'" + double79 + "' != '" + 5100.0d + "'", double79 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray80);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double81 + "' != '" + 5100.0d + "'", double81 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray85);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray92);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray94);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray95);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray98);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01299() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01299");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList4 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, 100, 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(manyCompanyDataList3);
    org.junit.Assert.assertNotNull(companyDataList4);
    org.junit.Assert.assertNotNull(manyCompanyDataList5);
    org.junit.Assert.assertNotNull(manyCompanyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(manyCompanyDataList10);
  }

  @Test
  public void test01300() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01300");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getTtmAvg();
    double double7 = quarterlyDouble5.getMostRecent();
    double double9 = quarterlyDouble5.get((int) (short) 1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str11 = quarterlyDouble5.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
  }

  @Test
  public void test01301() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01301");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get((int) (short) -1);
    double double8 = quarterlyDouble5.getTtmAvg();
    double double9 = quarterlyDouble5.getQseqQ();
    double double10 = quarterlyDouble5.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double11 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
  }

  @Test
  public void test01302() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01302");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double[] doubleArray15 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double17 = quarterlyDouble16.getTtmAvg();
    double double18 = quarterlyDouble16.getMostRecent();
    double double19 = quarterlyDouble16.getTtm();
    double[] doubleArray20 = quarterlyDouble16.dArr;
    quarterlyDouble11.dArr = doubleArray20;
    java.lang.Class<?> wildcardClass22 = doubleArray20.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass22);
  }

  @Test
  public void test01303() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01303");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double12 = quarterlyDouble4.getTtm();
    double[] doubleArray16 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    quarterlyDouble4.dArr = doubleArray16;
    java.lang.Class<?> wildcardClass19 = doubleArray16.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test01304() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01304");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (short) 10, (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 0, (int) (short) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList18 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList21 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) ' ', (int) (short) 100);
    java.lang.Class<?> wildcardClass22 = companyDataList21.getClass();
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(companyDataList13);
    org.junit.Assert.assertNotNull(manyCompanyDataList14);
    org.junit.Assert.assertNotNull(companyDataList17);
    org.junit.Assert.assertNotNull(manyCompanyDataList18);
    org.junit.Assert.assertNotNull(companyDataList21);
    org.junit.Assert.assertNotNull(wildcardClass22);
  }

  @Test
  public void test01305() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01305");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) -1, (int) (short) 100);
  }

  @Test
  public void test01306() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01306");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    double double10 = quarterlyDouble4.get((int) (byte) -1);
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double16 = quarterlyDouble15.getTtm();
    double double17 = quarterlyDouble15.getQseqQ();
    double[] doubleArray18 = quarterlyDouble15.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    quarterlyDouble4.dArr = doubleArray18;
    double double21 = quarterlyDouble4.getMostRecent();
    double[] doubleArray25 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble27 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double double29 = quarterlyDouble27.get(10);
    double double30 = quarterlyDouble27.getMostRecent();
    double[] doubleArray31 = quarterlyDouble27.dArr;
    quarterlyDouble4.dArr = doubleArray31;
    double double33 = quarterlyDouble4.getMostRecent();
    double double36 = quarterlyDouble4.deltaQ((int) (short) -1, (int) (short) 0);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str38 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-9999.9999d) + "'", double29 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
  }

  @Test
  public void test01307() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01307");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.String str8 = companyData1.getTicker();
    java.lang.String str9 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList10 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList11 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList12 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData15 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList12, (int) ' ', 1);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    org.junit.Assert.assertNotNull(fieldDataList10);
    org.junit.Assert.assertNotNull(fieldDataList11);
    org.junit.Assert.assertNotNull(fieldDataList12);
    org.junit.Assert.assertNull(fieldData15);
  }

  @Test
  public void test01308() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01308");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getQseqQ();
    double double10 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double11 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
  }

  @Test
  public void test01309() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01309");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double[] doubleArray15 = quarterlyDouble14.dArr;
    double[] doubleArray16 = quarterlyDouble14.dArr;
    quarterlyDouble8.dArr = doubleArray16;
    double double20 = quarterlyDouble8.deltaQ(10, (int) (byte) -1);
    java.lang.Class<?> wildcardClass21 = quarterlyDouble8.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test01310() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01310");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) -1, (int) (short) 1);
  }

  @Test
  public void test01311() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01311");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double[] doubleArray16 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double double18 = quarterlyDouble17.getTtm();
    double double19 = quarterlyDouble17.getQseqQ();
    double[] doubleArray20 = quarterlyDouble17.dArr;
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    quarterlyDouble17.dArr = doubleArray24;
    double double27 = quarterlyDouble17.getTtm();
    double[] doubleArray28 = quarterlyDouble17.dArr;
    double double29 = quarterlyDouble17.getTtm();
    double[] doubleArray30 = quarterlyDouble17.dArr;
    quarterlyDouble4.dArr = doubleArray30;
    double double32 = quarterlyDouble4.getMostRecent();
    double double35 = quarterlyDouble4.deltaQ((int) (byte) 10, (int) (byte) 0);
    double double36 = quarterlyDouble4.getQseqQ();
    double double39 = quarterlyDouble4.deltaQ(0, (int) (byte) -1);
    double double40 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str42 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5100.0d + "'", double19 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5100.0d + "'", double36 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
  }

  @Test
  public void test01312() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01312");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (short) 100, (int) (short) 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01313() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01313");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double double16 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      double double17 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
  }

  @Test
  public void test01314() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01314");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double17 = quarterlyDouble16.getTtm();
    double double18 = quarterlyDouble16.getTtmAvg();
    double double19 = quarterlyDouble16.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double20 = quarterlyDouble16.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
  }

  @Test
  public void test01315() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01315");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double[] doubleArray21 = quarterlyDouble20.dArr;
    double[] doubleArray22 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray22;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str27 = quarterlyDouble25.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01316() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01316");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getTtmAvg();
    double double7 = quarterlyDouble5.getTtm();
    double double8 = quarterlyDouble5.getQseqQ();
    double double9 = quarterlyDouble5.getQseqQ();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
  }

  @Test
  public void test01317() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01317");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) 'a', 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01318() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01318");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double double16 = quarterlyDouble4.getQseqQ();
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double24 = quarterlyDouble22.get(100);
    double[] doubleArray25 = quarterlyDouble22.dArr;
    double double28 = quarterlyDouble22.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    double[] doubleArray47 = quarterlyDouble33.dArr;
    quarterlyDouble22.dArr = doubleArray47;
    quarterlyDouble4.dArr = doubleArray47;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray47);
    double double52 = quarterlyDouble50.get((int) (byte) 10);
    // The following exception was thrown during execution in test generation
    try {
      double double53 = quarterlyDouble50.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9999.9999d) + "'", double24 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-9999.9999d) + "'", double52 == (-9999.9999d));
  }

  @Test
  public void test01319() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01319");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double18 = quarterlyDouble16.get((int) (short) -1);
    java.lang.Class<?> wildcardClass19 = quarterlyDouble16.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-9999.9999d) + "'", double18 == (-9999.9999d));
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test01320() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01320");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray17 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str19 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01321() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01321");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    double double9 = quarterlyDouble4.getQseqQ();
    double double10 = quarterlyDouble4.getTtmAvg();
    java.lang.Class<?> wildcardClass11 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test01322() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01322");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", 100, (int) '#');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01323() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01323");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    double double10 = quarterlyDouble4.get((int) (byte) -1);
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double16 = quarterlyDouble15.getTtm();
    double double17 = quarterlyDouble15.getQseqQ();
    double[] doubleArray18 = quarterlyDouble15.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    quarterlyDouble4.dArr = doubleArray18;
    double double21 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      double double24 = quarterlyDouble4.deltaQ((-1), (int) (byte) 100);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
  }

  @Test
  public void test01324() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01324");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double double16 = quarterlyDouble4.getTtm();
    double double18 = quarterlyDouble4.get(1);
    double double21 = quarterlyDouble4.deltaQ(1, (int) (short) -1);
    double double22 = quarterlyDouble4.getMostRecent();
    double double23 = quarterlyDouble4.getMostRecent();
    double double24 = quarterlyDouble4.getTtm();
    double[] doubleArray25 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double26 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01325() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01325");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) (byte) -1, (int) 'a');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01326() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01326");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (-1), 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01327() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01327");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", 10, (int) 'a');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01328() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01328");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    double[] doubleArray18 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    // The following exception was thrown during execution in test generation
    try {
      double double22 = quarterlyDouble21.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
  }

  @Test
  public void test01329() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01329");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtmAvg();
    double double23 = quarterlyDouble21.getMostRecent();
    double double25 = quarterlyDouble21.get((int) 'a');
    double double27 = quarterlyDouble21.get((int) (byte) -1);
    double[] doubleArray31 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble32 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    double double33 = quarterlyDouble32.getTtm();
    double double34 = quarterlyDouble32.getQseqQ();
    double[] doubleArray35 = quarterlyDouble32.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble36 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray35);
    quarterlyDouble21.dArr = doubleArray35;
    quarterlyDouble4.dArr = doubleArray35;
    // The following exception was thrown during execution in test generation
    try {
      double double41 = quarterlyDouble4.deltaQ((-1), (int) (short) 100);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-9999.9999d) + "'", double25 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9999.9999d) + "'", double27 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5100.0d + "'", double34 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray35);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01330() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01330");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, 0, (int) (short) -1);
  }

  @Test
  public void test01331() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01331");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getQseqQ();
    double double10 = quarterlyDouble4.getQseqQ();
    double double11 = quarterlyDouble4.getMostRecent();
    double double14 = quarterlyDouble4.deltaQ((int) (byte) 100, (int) (byte) 10);
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtmAvg();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5100.0d + "'", double10 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 52.0d + "'", double11 == 52.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
  }

  @Test
  public void test01332() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01332");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    double double10 = quarterlyDouble4.get((int) (byte) -1);
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double16 = quarterlyDouble15.getTtm();
    double double17 = quarterlyDouble15.getQseqQ();
    double[] doubleArray18 = quarterlyDouble15.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    quarterlyDouble4.dArr = doubleArray18;
    double double23 = quarterlyDouble4.deltaQ((int) (byte) 100, 0);
    double double24 = quarterlyDouble4.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double25 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
  }

  @Test
  public void test01333() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01333");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, 1);
    double double17 = quarterlyDouble4.getQseqQ();
    double double18 = quarterlyDouble4.getTtmAvg();
    double double19 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str21 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
  }

  @Test
  public void test01334() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01334");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) '4', (int) (byte) 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01335() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01335");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtm();
    double double9 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str11 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
  }

  @Test
  public void test01336() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01336");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double double16 = quarterlyDouble4.getQseqQ();
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double24 = quarterlyDouble22.get(100);
    double[] doubleArray25 = quarterlyDouble22.dArr;
    double double28 = quarterlyDouble22.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    double[] doubleArray47 = quarterlyDouble33.dArr;
    quarterlyDouble22.dArr = doubleArray47;
    quarterlyDouble4.dArr = doubleArray47;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray47);
    double double51 = quarterlyDouble50.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double52 = quarterlyDouble50.getQseqQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9999.9999d) + "'", double24 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
    org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
  }

  @Test
  public void test01337() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01337");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double[] doubleArray8 = quarterlyDouble5.dArr;
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double15 = quarterlyDouble13.get((int) (byte) 1);
    double double16 = quarterlyDouble13.getQseqQ();
    double[] doubleArray17 = quarterlyDouble13.dArr;
    quarterlyDouble5.dArr = doubleArray17;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble5.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01338() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01338");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtm();
    double[] doubleArray17 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    double double20 = quarterlyDouble18.get((int) (short) -1);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-9999.9999d) + "'", double20 == (-9999.9999d));
  }

  @Test
  public void test01339() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01339");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double24 = quarterlyDouble22.get(100);
    double[] doubleArray25 = quarterlyDouble22.dArr;
    quarterlyDouble5.dArr = doubleArray25;
    double double27 = quarterlyDouble5.getTtm();
    double double28 = quarterlyDouble5.getTtm();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9999.9999d) + "'", double24 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
  }

  @Test
  public void test01340() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01340");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double double12 = quarterlyDouble4.get(0);
    double double13 = quarterlyDouble4.getMostRecent();
    double double14 = quarterlyDouble4.getQseqQ();
    double double15 = quarterlyDouble4.getMostRecent();
    double double18 = quarterlyDouble4.deltaQ((int) (byte) 100, (-1));
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double25 = quarterlyDouble23.getQseqQ();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble23.dArr = doubleArray29;
    double double32 = quarterlyDouble23.getQseqQ();
    double double33 = quarterlyDouble23.getTtmAvg();
    double[] doubleArray37 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    double double39 = quarterlyDouble38.getTtm();
    double double40 = quarterlyDouble38.getQseqQ();
    double[] doubleArray44 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble45 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble38.dArr = doubleArray44;
    double double47 = quarterlyDouble38.getQseqQ();
    double double48 = quarterlyDouble38.getTtmAvg();
    double double49 = quarterlyDouble38.getTtm();
    double[] doubleArray53 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble54 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray53);
    double double55 = quarterlyDouble54.getTtm();
    double double56 = quarterlyDouble54.getQseqQ();
    double[] doubleArray57 = quarterlyDouble54.dArr;
    quarterlyDouble38.dArr = doubleArray57;
    quarterlyDouble23.dArr = doubleArray57;
    double[] doubleArray63 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble64 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray63);
    double[] doubleArray65 = quarterlyDouble64.dArr;
    double double66 = quarterlyDouble64.getQseqQ();
    double[] doubleArray67 = new double[] {};
    quarterlyDouble64.dArr = doubleArray67;
    quarterlyDouble23.dArr = doubleArray67;
    quarterlyDouble4.dArr = doubleArray67;
    double double72 = quarterlyDouble4.get((-1));
    double[] doubleArray76 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble77 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray76);
    double double78 = quarterlyDouble77.getTtm();
    double double79 = quarterlyDouble77.getQseqQ();
    double[] doubleArray83 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble84 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray83);
    quarterlyDouble77.dArr = doubleArray83;
    double double86 = quarterlyDouble77.getQseqQ();
    double double87 = quarterlyDouble77.getTtmAvg();
    double double88 = quarterlyDouble77.getTtm();
    double double89 = quarterlyDouble77.getTtm();
    double double91 = quarterlyDouble77.get(1);
    double double94 = quarterlyDouble77.deltaQ(1, (int) (short) -1);
    double double95 = quarterlyDouble77.getMostRecent();
    double double96 = quarterlyDouble77.getMostRecent();
    double double97 = quarterlyDouble77.getTtm();
    double[] doubleArray98 = quarterlyDouble77.dArr;
    quarterlyDouble4.dArr = doubleArray98;
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5100.0d + "'", double32 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double47 + "' != '" + 5100.0d + "'", double47 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray53);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5100.0d + "'", double56 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray57);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray63);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray65);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5100.0d + "'", double66 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray67);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
    org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-9999.9999d) + "'", double72 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray76);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
    org.junit.Assert.assertTrue("'" + double79 + "' != '" + 5100.0d + "'", double79 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray83);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double86 + "' != '" + 5100.0d + "'", double86 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
    org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
    org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    org.junit.Assert.assertTrue("'" + double91 + "' != '" + 52.0d + "'", double91 == 52.0d);
    org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    org.junit.Assert.assertTrue("'" + double95 + "' != '" + 52.0d + "'", double95 == 52.0d);
    org.junit.Assert.assertTrue("'" + double96 + "' != '" + 52.0d + "'", double96 == 52.0d);
    org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray98);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01341() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01341");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData9 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList6, (int) (byte) 1, (int) (short) 10);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData12 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList6, (int) (short) -1, 100);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData15 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList6, (int) (byte) 100, 10);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNull(fieldData9);
    org.junit.Assert.assertNull(fieldData12);
    org.junit.Assert.assertNull(fieldData15);
  }

  @Test
  public void test01342() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01342");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.lang.String str2 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.lang.String str4 = companyData1.getTicker();
    java.lang.String str5 = companyData1.getTicker();
    java.lang.Class<?> wildcardClass6 = companyData1.getClass();
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(wildcardClass6);
  }

  @Test
  public void test01343() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01343");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double double16 = quarterlyDouble4.getQseqQ();
    double double17 = quarterlyDouble4.getMostRecent();
    double[] doubleArray18 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01344() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01344");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (-1), (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(companyDataList3);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList7);
  }

  @Test
  public void test01345() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01345");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) 1, (int) (byte) 100);
  }

  @Test
  public void test01346() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01346");
    java.util.List<java.lang.String> strList0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
          .getCompanies(strList0, (int) 'a', (int) (short) 0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
  }

  @Test
  public void test01347() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01347");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) '#', (int) (short) 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01348() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01348");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double18 = quarterlyDouble16.get((int) (short) -1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble16.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-9999.9999d) + "'", double18 == (-9999.9999d));
  }

  @Test
  public void test01349() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01349");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getMostRecent();
    double double18 = quarterlyDouble5.getTtm();
    double[] doubleArray19 = quarterlyDouble5.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double20 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01350() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01350");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) -1, (int) (short) -1);
  }

  @Test
  public void test01351() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01351");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList1 = net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary
        .readBinaryFile("");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData4 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList1, 0, 0);
    org.junit.Assert.assertNotNull(fieldDataList1);
    org.junit.Assert.assertNull(fieldData4);
  }

  @Test
  public void test01352() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01352");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double12 = quarterlyDouble11.getTtmAvg();
    double double13 = quarterlyDouble11.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str15 = quarterlyDouble11.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
  }

  @Test
  public void test01353() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01353");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, 1);
    double double17 = quarterlyDouble4.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str19 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
  }

  @Test
  public void test01354() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01354");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double[] doubleArray27 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    double double31 = quarterlyDouble29.get(100);
    double[] doubleArray32 = quarterlyDouble29.dArr;
    quarterlyDouble22.dArr = doubleArray32;
    quarterlyDouble4.dArr = doubleArray32;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double36 = quarterlyDouble35.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str38 = quarterlyDouble35.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9999.9999d) + "'", double31 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
  }

  @Test
  public void test01355() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01355");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    double double8 = quarterlyDouble5.getTtmAvg();
    double double9 = quarterlyDouble5.getMostRecent();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double16 = quarterlyDouble14.getQseqQ();
    double[] doubleArray17 = quarterlyDouble14.dArr;
    double double18 = quarterlyDouble14.getQseqQ();
    double double19 = quarterlyDouble14.getTtmAvg();
    double double21 = quarterlyDouble14.get(0);
    double[] doubleArray25 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double double27 = quarterlyDouble26.getTtm();
    double double28 = quarterlyDouble26.getQseqQ();
    double[] doubleArray29 = quarterlyDouble26.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble14.dArr = doubleArray29;
    quarterlyDouble5.dArr = doubleArray29;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    // The following exception was thrown during execution in test generation
    try {
      double double36 = quarterlyDouble33.deltaQ((int) (short) -1, (int) '4');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 5100.0d + "'", double28 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01356() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01356");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getMostRecent();
    double double18 = quarterlyDouble5.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      double double19 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
  }

  @Test
  public void test01357() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01357");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double double10 = quarterlyDouble8.getMostRecent();
    double[] doubleArray11 = quarterlyDouble8.dArr;
    double double12 = quarterlyDouble8.getTtmAvg();
    double double14 = quarterlyDouble8.get((-1));
    double double16 = quarterlyDouble8.get((int) (short) -1);
    // The following exception was thrown during execution in test generation
    try {
      double double17 = quarterlyDouble8.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9999.9999d) + "'", double16 == (-9999.9999d));
  }

  @Test
  public void test01358() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01358");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double double16 = quarterlyDouble4.getTtm();
    double double18 = quarterlyDouble4.get(1);
    double double21 = quarterlyDouble4.deltaQ(1, (int) (short) -1);
    double double22 = quarterlyDouble4.getMostRecent();
    double double23 = quarterlyDouble4.getMostRecent();
    double[] doubleArray27 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    double[] doubleArray29 = quarterlyDouble28.dArr;
    double[] doubleArray30 = quarterlyDouble28.dArr;
    quarterlyDouble4.dArr = doubleArray30;
    java.lang.Class<?> wildcardClass32 = doubleArray30.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass32);
  }

  @Test
  public void test01359() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01359");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray17 = quarterlyDouble4.dArr;
    double[] doubleArray18 = quarterlyDouble4.dArr;
    java.lang.Class<?> wildcardClass19 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test01360() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01360");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray17 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    double[] doubleArray23 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray23);
    double[] doubleArray25 = quarterlyDouble24.dArr;
    double double26 = quarterlyDouble24.getTtm();
    double double29 = quarterlyDouble24.deltaQ((int) '#', 100);
    double[] doubleArray33 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray33);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray33);
    double[] doubleArray36 = quarterlyDouble35.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble37 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray36);
    double double38 = quarterlyDouble37.getMostRecent();
    double[] doubleArray42 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble43 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray42);
    double double44 = quarterlyDouble43.getTtm();
    double double45 = quarterlyDouble43.getQseqQ();
    double[] doubleArray46 = quarterlyDouble43.dArr;
    double double47 = quarterlyDouble43.getQseqQ();
    double[] doubleArray51 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble52 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray51);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray51);
    quarterlyDouble43.dArr = doubleArray51;
    double[] doubleArray55 = quarterlyDouble43.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble56 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray55);
    quarterlyDouble37.dArr = doubleArray55;
    quarterlyDouble24.dArr = doubleArray55;
    double double59 = quarterlyDouble24.getTtmAvg();
    double[] doubleArray63 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble64 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray63);
    double double65 = quarterlyDouble64.getTtm();
    double double66 = quarterlyDouble64.getQseqQ();
    double[] doubleArray67 = quarterlyDouble64.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble68 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray67);
    double double69 = quarterlyDouble68.getQseqQ();
    double double70 = quarterlyDouble68.getTtm();
    double[] doubleArray71 = quarterlyDouble68.dArr;
    quarterlyDouble24.dArr = doubleArray71;
    quarterlyDouble19.dArr = doubleArray71;
    java.lang.Class<?> wildcardClass74 = quarterlyDouble19.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray33);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray36);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 5100.0d + "'", double45 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray46);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double47 + "' != '" + 5100.0d + "'", double47 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray55);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray63);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5100.0d + "'", double66 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray67);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5100.0d + "'", double69 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray71);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass74);
  }

  @Test
  public void test01361() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01361");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(0, (int) 'a');
  }

  @Test
  public void test01362() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01362");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", 0, (int) (byte) 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01363() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01363");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) -1, (int) ' ');
  }

  @Test
  public void test01364() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01364");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double8 = quarterlyDouble4.getMostRecent();
    double double10 = quarterlyDouble4.get((int) '4');
    // The following exception was thrown during execution in test generation
    try {
      double double11 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
  }

  @Test
  public void test01365() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01365");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double double13 = quarterlyDouble12.getTtm();
    double double15 = quarterlyDouble12.get((int) '4');
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double[] doubleArray21 = quarterlyDouble20.dArr;
    double double22 = quarterlyDouble20.getQseqQ();
    double[] doubleArray23 = new double[] {};
    quarterlyDouble20.dArr = doubleArray23;
    quarterlyDouble12.dArr = doubleArray23;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray23);
    quarterlyDouble5.dArr = doubleArray23;
    double double28 = quarterlyDouble5.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str30 = quarterlyDouble5.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-9999.9999d) + "'", double15 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5100.0d + "'", double22 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
  }

  @Test
  public void test01366() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01366");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble7 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray6);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str9 = quarterlyDouble7.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01367() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01367");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getTtm();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double17 = quarterlyDouble14.get((int) '4');
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double double24 = quarterlyDouble22.getQseqQ();
    double[] doubleArray25 = new double[] {};
    quarterlyDouble22.dArr = doubleArray25;
    quarterlyDouble14.dArr = doubleArray25;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble28.dArr = doubleArray44;
    quarterlyDouble8.dArr = doubleArray44;
    double[] doubleArray53 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble54 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray53);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble55 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray53);
    double[] doubleArray56 = quarterlyDouble55.dArr;
    double[] doubleArray60 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble61 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray60);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble62 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray60);
    double double64 = quarterlyDouble62.get(100);
    double[] doubleArray65 = quarterlyDouble62.dArr;
    quarterlyDouble55.dArr = doubleArray65;
    double double67 = quarterlyDouble55.getTtmAvg();
    double double68 = quarterlyDouble55.getQseqQ();
    double[] doubleArray69 = quarterlyDouble55.dArr;
    quarterlyDouble8.dArr = doubleArray69;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str72 = quarterlyDouble8.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertNotNull(doubleArray53);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray60);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-9999.9999d) + "'", double64 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray65);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5100.0d + "'", double68 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray69);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01368() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01368");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double[] doubleArray27 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    double double31 = quarterlyDouble29.get(100);
    double[] doubleArray32 = quarterlyDouble29.dArr;
    quarterlyDouble22.dArr = doubleArray32;
    quarterlyDouble4.dArr = doubleArray32;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    // The following exception was thrown during execution in test generation
    try {
      double double36 = quarterlyDouble35.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9999.9999d) + "'", double31 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01369() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01369");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) '#', (int) (byte) 1);
  }

  @Test
  public void test01370() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01370");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(100, (int) (short) -1);
  }

  @Test
  public void test01371() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01371");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getQseqQ();
    double double10 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      double double11 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5100.0d + "'", double10 == 5100.0d);
  }

  @Test
  public void test01372() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01372");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double[] doubleArray8 = quarterlyDouble4.dArr;
    double double10 = quarterlyDouble4.get(100);
    double[] doubleArray11 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double12 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01373() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01373");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtmAvg();
    double double22 = quarterlyDouble20.getTtm();
    double double23 = quarterlyDouble20.getMostRecent();
    double double24 = quarterlyDouble20.getTtmAvg();
    double double25 = quarterlyDouble20.getMostRecent();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double double31 = quarterlyDouble30.getTtm();
    double double33 = quarterlyDouble30.get((int) '4');
    double[] doubleArray37 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    double[] doubleArray39 = quarterlyDouble38.dArr;
    double double40 = quarterlyDouble38.getQseqQ();
    double[] doubleArray41 = new double[] {};
    quarterlyDouble38.dArr = doubleArray41;
    quarterlyDouble30.dArr = doubleArray41;
    quarterlyDouble20.dArr = doubleArray41;
    quarterlyDouble4.dArr = doubleArray41;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble46 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    java.lang.Class<?> wildcardClass47 = quarterlyDouble46.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-9999.9999d) + "'", double33 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
    org.junit.Assert.assertNotNull(wildcardClass47);
  }

  @Test
  public void test01374() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01374");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getTtm();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double17 = quarterlyDouble14.get((int) '4');
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double double24 = quarterlyDouble22.getQseqQ();
    double[] doubleArray25 = new double[] {};
    quarterlyDouble22.dArr = doubleArray25;
    quarterlyDouble14.dArr = doubleArray25;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble28.dArr = doubleArray44;
    quarterlyDouble8.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    java.lang.Class<?> wildcardClass51 = doubleArray44.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertNotNull(wildcardClass51);
  }

  @Test
  public void test01375() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01375");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    double[] doubleArray8 = quarterlyDouble5.dArr;
    double double11 = quarterlyDouble5.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray15 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double17 = quarterlyDouble16.getTtm();
    double double19 = quarterlyDouble16.get((int) '4');
    double[] doubleArray23 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray23);
    double[] doubleArray25 = quarterlyDouble24.dArr;
    double double26 = quarterlyDouble24.getQseqQ();
    double[] doubleArray27 = new double[] {};
    quarterlyDouble24.dArr = doubleArray27;
    quarterlyDouble16.dArr = doubleArray27;
    double[] doubleArray30 = quarterlyDouble16.dArr;
    quarterlyDouble5.dArr = doubleArray30;
    java.lang.Class<?> wildcardClass32 = quarterlyDouble5.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9999.9999d) + "'", double19 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5100.0d + "'", double26 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
    org.junit.Assert.assertNotNull(wildcardClass32);
  }

  @Test
  public void test01376() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01376");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) ' ', (int) (byte) 10);
  }

  @Test
  public void test01377() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01377");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double[] doubleArray15 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double17 = quarterlyDouble16.getTtmAvg();
    double double18 = quarterlyDouble16.getMostRecent();
    double double19 = quarterlyDouble16.getTtm();
    double[] doubleArray20 = quarterlyDouble16.dArr;
    quarterlyDouble11.dArr = doubleArray20;
    double double22 = quarterlyDouble11.getTtm();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
  }

  @Test
  public void test01378() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01378");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double24 = quarterlyDouble22.get(100);
    double[] doubleArray25 = quarterlyDouble22.dArr;
    quarterlyDouble5.dArr = doubleArray25;
    double double29 = quarterlyDouble5.deltaQ((int) (short) 1, (int) (byte) 1);
    double double31 = quarterlyDouble5.get((int) (short) -1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str33 = quarterlyDouble5.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9999.9999d) + "'", double24 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9999.9999d) + "'", double31 == (-9999.9999d));
  }

  @Test
  public void test01379() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01379");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double[] doubleArray27 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    double double31 = quarterlyDouble29.get(100);
    double[] doubleArray32 = quarterlyDouble29.dArr;
    quarterlyDouble22.dArr = doubleArray32;
    quarterlyDouble4.dArr = doubleArray32;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double37 = quarterlyDouble35.get((int) (byte) 1);
    double double40 = quarterlyDouble35.deltaQ(10, (int) ' ');
    double[] doubleArray44 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble45 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    double double46 = quarterlyDouble45.getTtmAvg();
    double[] doubleArray50 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble51 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray50);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble52 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray50);
    double double54 = quarterlyDouble52.get(100);
    double[] doubleArray55 = quarterlyDouble52.dArr;
    quarterlyDouble45.dArr = doubleArray55;
    double double57 = quarterlyDouble45.getQseqQ();
    double[] doubleArray61 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble62 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray61);
    double double64 = quarterlyDouble62.get((int) (byte) 1);
    double double65 = quarterlyDouble62.getQseqQ();
    double[] doubleArray66 = quarterlyDouble62.dArr;
    quarterlyDouble45.dArr = doubleArray66;
    double double69 = quarterlyDouble45.get((int) '#');
    double[] doubleArray73 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble74 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray73);
    double double75 = quarterlyDouble74.getTtm();
    double double76 = quarterlyDouble74.getQseqQ();
    double[] doubleArray77 = quarterlyDouble74.dArr;
    double double78 = quarterlyDouble74.getQseqQ();
    double[] doubleArray82 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble83 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray82);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble84 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray82);
    quarterlyDouble74.dArr = doubleArray82;
    double[] doubleArray86 = quarterlyDouble74.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble87 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray86);
    quarterlyDouble45.dArr = doubleArray86;
    quarterlyDouble35.dArr = doubleArray86;
    double double90 = quarterlyDouble35.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str92 = quarterlyDouble35.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9999.9999d) + "'", double31 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-9999.9999d) + "'", double54 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray55);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5100.0d + "'", double57 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray61);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double64 + "' != '" + 52.0d + "'", double64 == 52.0d);
    org.junit.Assert.assertTrue("'" + double65 + "' != '" + 5100.0d + "'", double65 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray66);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-9999.9999d) + "'", double69 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray73);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
    org.junit.Assert.assertTrue("'" + double76 + "' != '" + 5100.0d + "'", double76 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray77);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double78 + "' != '" + 5100.0d + "'", double78 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray82);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray86);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double90 + "' != '" + 52.0d + "'", double90 == 52.0d);
  }

  @Test
  public void test01380() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01380");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double12 = quarterlyDouble11.getTtmAvg();
    double double13 = quarterlyDouble11.getQseqQ();
    double[] doubleArray17 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    double double21 = quarterlyDouble19.get(100);
    double[] doubleArray22 = quarterlyDouble19.dArr;
    double double25 = quarterlyDouble19.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double double31 = quarterlyDouble30.getTtm();
    double double33 = quarterlyDouble30.get((int) '4');
    double[] doubleArray37 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    double[] doubleArray39 = quarterlyDouble38.dArr;
    double double40 = quarterlyDouble38.getQseqQ();
    double[] doubleArray41 = new double[] {};
    quarterlyDouble38.dArr = doubleArray41;
    quarterlyDouble30.dArr = doubleArray41;
    double[] doubleArray44 = quarterlyDouble30.dArr;
    quarterlyDouble19.dArr = doubleArray44;
    quarterlyDouble11.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str49 = quarterlyDouble47.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-9999.9999d) + "'", double21 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-9999.9999d) + "'", double33 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
  }

  @Test
  public void test01381() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01381");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (-1), (int) (short) 0);
  }

  @Test
  public void test01382() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01382");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get(1);
    double double15 = quarterlyDouble4.get((int) 'a');
    double double16 = quarterlyDouble4.getTtm();
    java.lang.Class<?> wildcardClass17 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-9999.9999d) + "'", double15 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test01383() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01383");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      double double20 = quarterlyDouble5.deltaQ((-1), (int) (short) 10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
  }

  @Test
  public void test01384() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01384");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList4 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (int) (byte) 10, (int) (byte) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(manyCompanyDataList3);
    org.junit.Assert.assertNotNull(companyDataList4);
    org.junit.Assert.assertNotNull(companyDataList5);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(manyCompanyDataList7);
    org.junit.Assert.assertNotNull(manyCompanyDataList8);
    org.junit.Assert.assertNotNull(manyCompanyDataList9);
    org.junit.Assert.assertNotNull(companyDataList12);
    org.junit.Assert.assertNotNull(manyCompanyDataList13);
  }

  @Test
  public void test01385() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01385");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (short) 100, (-1));
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01386() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01386");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList4 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.lang.Class<?> wildcardClass9 = strList2.getClass();
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(companyDataList3);
    org.junit.Assert.assertNotNull(companyDataList4);
    org.junit.Assert.assertNotNull(manyCompanyDataList5);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(manyCompanyDataList7);
    org.junit.Assert.assertNotNull(companyDataList8);
    org.junit.Assert.assertNotNull(wildcardClass9);
  }

  @Test
  public void test01387() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01387");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, 1);
    double double17 = quarterlyDouble4.getQseqQ();
    double double18 = quarterlyDouble4.getTtmAvg();
    double double19 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray23 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray23);
    double double25 = quarterlyDouble24.getTtm();
    double double26 = quarterlyDouble24.getQseqQ();
    double[] doubleArray27 = quarterlyDouble24.dArr;
    double double28 = quarterlyDouble24.getQseqQ();
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    quarterlyDouble24.dArr = doubleArray32;
    double[] doubleArray39 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray39);
    double[] doubleArray41 = quarterlyDouble40.dArr;
    double[] doubleArray42 = quarterlyDouble40.dArr;
    quarterlyDouble24.dArr = doubleArray42;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray42);
    quarterlyDouble4.dArr = doubleArray42;
    double double46 = quarterlyDouble4.getMostRecent();
    double double48 = quarterlyDouble4.get((int) (short) -1);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5100.0d + "'", double26 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 5100.0d + "'", double28 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + 52.0d + "'", double46 == 52.0d);
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-9999.9999d) + "'", double48 == (-9999.9999d));
  }

  @Test
  public void test01388() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01388");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (byte) 10, (int) (short) 10);
  }

  @Test
  public void test01389() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01389");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    double[] doubleArray18 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    // The following exception was thrown during execution in test generation
    try {
      double double20 = quarterlyDouble19.getMostRecent();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
  }

  @Test
  public void test01390() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01390");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (short) -1, (int) (byte) 1);
  }

  @Test
  public void test01391() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01391");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getTtmAvg();
    double double18 = quarterlyDouble5.getQseqQ();
    double double21 = quarterlyDouble5.deltaQ((int) '#', (int) (short) 1);
    java.lang.Class<?> wildcardClass22 = quarterlyDouble5.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass22);
  }

  @Test
  public void test01392() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01392");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double13 = quarterlyDouble12.getTtm();
    double double16 = quarterlyDouble12.deltaQ((int) (byte) 1, (int) (byte) -1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str18 = quarterlyDouble12.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
  }

  @Test
  public void test01393() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01393");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double[] doubleArray27 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    double double31 = quarterlyDouble29.get(100);
    double[] doubleArray32 = quarterlyDouble29.dArr;
    quarterlyDouble22.dArr = doubleArray32;
    quarterlyDouble4.dArr = doubleArray32;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double36 = quarterlyDouble35.getMostRecent();
    java.lang.Class<?> wildcardClass37 = quarterlyDouble35.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9999.9999d) + "'", double31 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
    org.junit.Assert.assertNotNull(wildcardClass37);
  }

  @Test
  public void test01394() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01394");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double19 = quarterlyDouble17.get((int) (byte) 10);
    double double20 = quarterlyDouble17.getTtmAvg();
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double[] doubleArray30 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    double double32 = quarterlyDouble31.getTtm();
    double double34 = quarterlyDouble31.get((int) '4');
    double double37 = quarterlyDouble31.deltaQ((int) (short) 1, 0);
    double[] doubleArray41 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble42 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    double double43 = quarterlyDouble42.getTtm();
    double double44 = quarterlyDouble42.getQseqQ();
    double[] doubleArray45 = quarterlyDouble42.dArr;
    quarterlyDouble31.dArr = doubleArray45;
    quarterlyDouble26.dArr = doubleArray45;
    quarterlyDouble17.dArr = doubleArray45;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble49 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray45);
    double double50 = quarterlyDouble49.getMostRecent();
    double double51 = quarterlyDouble49.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      double double52 = quarterlyDouble49.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9999.9999d) + "'", double19 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-9999.9999d) + "'", double34 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 5100.0d + "'", double44 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray45);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double50 + "' != '" + 52.0d + "'", double50 == 52.0d);
    org.junit.Assert.assertTrue("'" + double51 + "' != '" + 5100.0d + "'", double51 == 5100.0d);
  }

  @Test
  public void test01395() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01395");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    double[] doubleArray8 = quarterlyDouble5.dArr;
    double double9 = quarterlyDouble5.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double10 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
  }

  @Test
  public void test01396() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01396");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (byte) -1, (int) 'a');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01397() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01397");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) 100, 10);
  }

  @Test
  public void test01398() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01398");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble7 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray6);
    double double8 = quarterlyDouble7.getMostRecent();
    double double11 = quarterlyDouble7.deltaQ((int) (byte) 100, (int) '4');
    double[] doubleArray12 = quarterlyDouble7.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str14 = quarterlyDouble7.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01399() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01399");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getTtm();
    double double9 = quarterlyDouble4.deltaQ((int) '#', 100);
    double double10 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str12 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
  }

  @Test
  public void test01400() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01400");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList0 = null;
    // The following exception was thrown during execution in test generation
    try {
      net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
          .getFieldData(fieldDataList0, (int) (short) 10, (int) (short) 100);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
  }

  @Test
  public void test01401() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01401");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble7 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray6);
    double double8 = quarterlyDouble7.getMostRecent();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double14 = quarterlyDouble13.getTtm();
    double double15 = quarterlyDouble13.getQseqQ();
    double[] doubleArray16 = quarterlyDouble13.dArr;
    double double17 = quarterlyDouble13.getQseqQ();
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    quarterlyDouble13.dArr = doubleArray21;
    double[] doubleArray25 = quarterlyDouble13.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    quarterlyDouble7.dArr = doubleArray25;
    double double30 = quarterlyDouble7.deltaQ((int) 'a', (int) (short) 100);
    double double31 = quarterlyDouble7.getQseqQ();
    double[] doubleArray32 = quarterlyDouble7.dArr;
    double double35 = quarterlyDouble7.deltaQ((int) 'a', 1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str37 = quarterlyDouble7.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5100.0d + "'", double31 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
  }

  @Test
  public void test01402() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01402");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ(10, (int) (byte) 0);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str18 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
  }

  @Test
  public void test01403() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01403");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double double12 = quarterlyDouble4.get(0);
    double double13 = quarterlyDouble4.getMostRecent();
    double double14 = quarterlyDouble4.getQseqQ();
    double double15 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      double double18 = quarterlyDouble4.deltaQ(0, (int) (byte) 10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
  }

  @Test
  public void test01404() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01404");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 100, (int) ' ');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (-1), (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList15 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 0, (int) (byte) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList16 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList19 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 100, (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList22 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 100, 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList25 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) ' ', 10);
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(companyDataList12);
    org.junit.Assert.assertNotNull(companyDataList15);
    org.junit.Assert.assertNotNull(manyCompanyDataList16);
    org.junit.Assert.assertNotNull(companyDataList19);
    org.junit.Assert.assertNotNull(companyDataList22);
    org.junit.Assert.assertNotNull(companyDataList25);
  }

  @Test
  public void test01405() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01405");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getQseqQ();
    double[] doubleArray18 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double double20 = quarterlyDouble19.getTtm();
    double double21 = quarterlyDouble19.getQseqQ();
    double[] doubleArray22 = quarterlyDouble19.dArr;
    double double23 = quarterlyDouble19.getQseqQ();
    double double24 = quarterlyDouble19.getQseqQ();
    double double25 = quarterlyDouble19.getQseqQ();
    double[] doubleArray26 = quarterlyDouble19.dArr;
    double double28 = quarterlyDouble19.get((int) (short) 0);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double35 = quarterlyDouble33.get((int) (byte) 1);
    double double36 = quarterlyDouble33.getQseqQ();
    double[] doubleArray37 = quarterlyDouble33.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    quarterlyDouble19.dArr = doubleArray37;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    quarterlyDouble4.dArr = doubleArray37;
    // The following exception was thrown during execution in test generation
    try {
      double double42 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5100.0d + "'", double21 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray26);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5100.0d + "'", double36 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01406() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01406");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getTtmAvg();
    double[] doubleArray18 = quarterlyDouble5.dArr;
    double double19 = quarterlyDouble5.getTtm();
    double double21 = quarterlyDouble5.get((int) (short) 1);
    double double22 = quarterlyDouble5.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double23 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
  }

  @Test
  public void test01407() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01407");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) '4', (int) (byte) 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01408() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01408");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData5 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList2, (int) '4', 100);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData8 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList2, (int) (byte) 1, (int) (short) 100);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData11 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList2, (int) 'a', (int) (short) -1);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNull(fieldData5);
    org.junit.Assert.assertNull(fieldData8);
    org.junit.Assert.assertNull(fieldData11);
  }

  @Test
  public void test01409() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01409");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData9 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList6, (int) '#', (int) (short) -1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData12 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList6, (int) (byte) 0, (int) 'a');
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData15 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList6, (-1), (int) (short) 100);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNull(fieldData9);
    org.junit.Assert.assertNull(fieldData12);
    org.junit.Assert.assertNull(fieldData15);
  }

  @Test
  public void test01410() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01410");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtm();
    double double22 = quarterlyDouble20.getQseqQ();
    double[] doubleArray23 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray23;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray23);
    double double26 = quarterlyDouble25.getMostRecent();
    double[] doubleArray30 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble32 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    double double33 = quarterlyDouble32.getTtmAvg();
    double double34 = quarterlyDouble32.getTtmAvg();
    double double35 = quarterlyDouble32.getTtmAvg();
    double[] doubleArray36 = quarterlyDouble32.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble37 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray36);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray36);
    quarterlyDouble25.dArr = doubleArray36;
    double double41 = quarterlyDouble25.get((int) '4');
    java.lang.Class<?> wildcardClass42 = quarterlyDouble25.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5100.0d + "'", double22 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray36);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-9999.9999d) + "'", double41 == (-9999.9999d));
    org.junit.Assert.assertNotNull(wildcardClass42);
  }

  @Test
  public void test01411() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01411");
    java.util.List<java.lang.String> strList0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
          .getCompanies(strList0, (int) '4', (int) (short) 10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
  }

  @Test
  public void test01412() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01412");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double[] doubleArray8 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double9 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01413() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01413");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (byte) 0, (int) (byte) 0);
  }

  @Test
  public void test01414() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01414");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (short) 10, 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01415() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01415");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtm();
    double[] doubleArray17 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    // The following exception was thrown during execution in test generation
    try {
      double double19 = quarterlyDouble18.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01416() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01416");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (byte) 10, 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) 'a', (int) ' ');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList16 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 10, 1);
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(companyDataList13);
    org.junit.Assert.assertNotNull(companyDataList16);
  }

  @Test
  public void test01417() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01417");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    double[] doubleArray8 = quarterlyDouble5.dArr;
    double double11 = quarterlyDouble5.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray15 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double17 = quarterlyDouble16.getTtm();
    double double19 = quarterlyDouble16.get((int) '4');
    double[] doubleArray23 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray23);
    double[] doubleArray25 = quarterlyDouble24.dArr;
    double double26 = quarterlyDouble24.getQseqQ();
    double[] doubleArray27 = new double[] {};
    quarterlyDouble24.dArr = doubleArray27;
    quarterlyDouble16.dArr = doubleArray27;
    double[] doubleArray30 = quarterlyDouble16.dArr;
    quarterlyDouble5.dArr = doubleArray30;
    double double32 = quarterlyDouble5.getTtmAvg();
    double double34 = quarterlyDouble5.get((int) (short) 1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str36 = quarterlyDouble5.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9999.9999d) + "'", double19 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5100.0d + "'", double26 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-9999.9999d) + "'", double34 == (-9999.9999d));
  }

  @Test
  public void test01418() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01418");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.lang.String str2 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.lang.String str4 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList5 = companyData1.getFdList();
    java.lang.String str6 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.Class<?> wildcardClass8 = fieldDataList7.getClass();
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    org.junit.Assert.assertNotNull(fieldDataList5);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertNotNull(wildcardClass8);
  }

  @Test
  public void test01419() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01419");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(1, (-1));
  }

  @Test
  public void test01420() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01420");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) ' ', (int) (short) -1);
  }

  @Test
  public void test01421() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01421");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double16 = quarterlyDouble4.get(10);
    double double17 = quarterlyDouble4.getQseqQ();
    double[] doubleArray18 = quarterlyDouble4.dArr;
    double double19 = quarterlyDouble4.getMostRecent();
    double double21 = quarterlyDouble4.get((int) (short) 1);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9999.9999d) + "'", double16 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
  }

  @Test
  public void test01422() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01422");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getTtmAvg();
    double[] doubleArray18 = quarterlyDouble5.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble5.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01423() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01423");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = new double[] {};
    quarterlyDouble4.dArr = doubleArray7;
    double double9 = quarterlyDouble4.getTtm();
    double double10 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double11 = quarterlyDouble4.getQseqQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
  }

  @Test
  public void test01424() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01424");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] fieldDataArray0 = new net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] {};
    java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList1 = new java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>();
    boolean boolean2 = java.util.Collections.addAll((java.util.Collection<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1,
        fieldDataArray0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData5 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (short) -1, (int) (short) 0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData8 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) 'a', 1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData11 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (short) 0, (int) 'a');
    org.junit.Assert.assertNotNull(fieldDataArray0);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNull(fieldData5);
    org.junit.Assert.assertNull(fieldData8);
    org.junit.Assert.assertNull(fieldData11);
  }

  @Test
  public void test01425() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01425");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) '4', (int) (short) 0);
  }

  @Test
  public void test01426() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01426");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double19 = quarterlyDouble17.get((int) (byte) 10);
    double double20 = quarterlyDouble17.getTtmAvg();
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double[] doubleArray30 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    double double32 = quarterlyDouble31.getTtm();
    double double34 = quarterlyDouble31.get((int) '4');
    double double37 = quarterlyDouble31.deltaQ((int) (short) 1, 0);
    double[] doubleArray41 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble42 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    double double43 = quarterlyDouble42.getTtm();
    double double44 = quarterlyDouble42.getQseqQ();
    double[] doubleArray45 = quarterlyDouble42.dArr;
    quarterlyDouble31.dArr = doubleArray45;
    quarterlyDouble26.dArr = doubleArray45;
    quarterlyDouble17.dArr = doubleArray45;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble49 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray45);
    double[] doubleArray53 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble54 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray53);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble55 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray53);
    double double56 = quarterlyDouble55.getTtmAvg();
    double[] doubleArray60 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble61 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray60);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble62 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray60);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble63 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray60);
    quarterlyDouble55.dArr = doubleArray60;
    quarterlyDouble49.dArr = doubleArray60;
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9999.9999d) + "'", double19 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-9999.9999d) + "'", double34 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 5100.0d + "'", double44 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray45);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray53);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray60);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01427() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01427");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) 0, (int) (byte) 10);
  }

  @Test
  public void test01428() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01428");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("hi!");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData5 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList2, (int) (byte) 10, 10);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData8 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList2, (int) (short) 1, (int) (short) 1);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNull(fieldData5);
    org.junit.Assert.assertNull(fieldData8);
  }

  @Test
  public void test01429() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01429");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) '4', 10);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01430() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01430");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double double11 = quarterlyDouble4.get((int) '4');
    double double14 = quarterlyDouble4.deltaQ((int) (byte) 100, (int) (short) 10);
    double double15 = quarterlyDouble4.getQseqQ();
    double[] doubleArray16 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str18 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9999.9999d) + "'", double11 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01431() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01431");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str18 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
  }

  @Test
  public void test01432() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01432");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) 1, 0);
  }

  @Test
  public void test01433() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01433");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) 'a', (int) (short) 0);
  }

  @Test
  public void test01434() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01434");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str18 = quarterlyDouble16.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01435() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01435");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) ' ', (int) 'a');
  }

  @Test
  public void test01436() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01436");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getTtmAvg();
    double double18 = quarterlyDouble5.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble5.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
  }

  @Test
  public void test01437() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01437");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double double11 = quarterlyDouble4.get((int) '4');
    double double14 = quarterlyDouble4.deltaQ((int) (byte) 100, (int) (short) 10);
    double double15 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.getQseqQ();
    double double19 = quarterlyDouble4.deltaQ((int) (byte) 10, (-1));
    double double20 = quarterlyDouble4.getTtm();
    java.lang.Class<?> wildcardClass21 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9999.9999d) + "'", double11 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test01438() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01438");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtm();
    double double22 = quarterlyDouble20.getQseqQ();
    double[] doubleArray23 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray23;
    double double26 = quarterlyDouble4.get((int) '#');
    double double27 = quarterlyDouble4.getMostRecent();
    double double29 = quarterlyDouble4.get(0);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5100.0d + "'", double22 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9999.9999d) + "'", double26 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
  }

  @Test
  public void test01439() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01439");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getMostRecent();
    double double7 = quarterlyDouble5.getMostRecent();
    double[] doubleArray8 = quarterlyDouble5.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble9 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray8);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray8);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str12 = quarterlyDouble10.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01440() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01440");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    double double10 = quarterlyDouble4.get((int) (byte) -1);
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double16 = quarterlyDouble15.getTtm();
    double double17 = quarterlyDouble15.getQseqQ();
    double[] doubleArray18 = quarterlyDouble15.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    quarterlyDouble4.dArr = doubleArray18;
    double double23 = quarterlyDouble4.deltaQ((int) (byte) 100, 0);
    double[] doubleArray24 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str26 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01441() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01441");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) -1, (int) (short) 0);
  }

  @Test
  public void test01442() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01442");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, 1);
    double double17 = quarterlyDouble4.getTtm();
    double double19 = quarterlyDouble4.get(1);
    // The following exception was thrown during execution in test generation
    try {
      double double20 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
  }

  @Test
  public void test01443() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01443");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList4 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (int) 'a', (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(manyCompanyDataList3);
    org.junit.Assert.assertNotNull(companyDataList4);
    org.junit.Assert.assertNotNull(companyDataList5);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(manyCompanyDataList11);
  }

  @Test
  public void test01444() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01444");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) ' ');
    double double10 = quarterlyDouble4.getMostRecent();
    double double12 = quarterlyDouble4.get(10);
    double double15 = quarterlyDouble4.deltaQ(10, (int) (short) -1);
    double double16 = quarterlyDouble4.getMostRecent();
    double double17 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double double23 = quarterlyDouble22.getTtmAvg();
    double double24 = quarterlyDouble22.getMostRecent();
    double double25 = quarterlyDouble22.getTtm();
    double double26 = quarterlyDouble22.getTtm();
    double[] doubleArray27 = quarterlyDouble22.dArr;
    double[] doubleArray31 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble32 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    double double33 = quarterlyDouble32.getTtm();
    double double34 = quarterlyDouble32.getQseqQ();
    double[] doubleArray38 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble39 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray38);
    quarterlyDouble32.dArr = doubleArray38;
    double double41 = quarterlyDouble32.getQseqQ();
    double double44 = quarterlyDouble32.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray48 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble49 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray48);
    double double50 = quarterlyDouble49.getTtmAvg();
    double double51 = quarterlyDouble49.getMostRecent();
    double double53 = quarterlyDouble49.get((int) 'a');
    double double55 = quarterlyDouble49.get((int) (byte) -1);
    double[] doubleArray59 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble60 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray59);
    double double61 = quarterlyDouble60.getTtm();
    double double62 = quarterlyDouble60.getQseqQ();
    double[] doubleArray63 = quarterlyDouble60.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble64 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray63);
    quarterlyDouble49.dArr = doubleArray63;
    quarterlyDouble32.dArr = doubleArray63;
    quarterlyDouble22.dArr = doubleArray63;
    quarterlyDouble4.dArr = doubleArray63;
    java.lang.Class<?> wildcardClass69 = doubleArray63.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9999.9999d) + "'", double12 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5100.0d + "'", double34 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray38);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 5100.0d + "'", double41 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray48);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    org.junit.Assert.assertTrue("'" + double51 + "' != '" + 52.0d + "'", double51 == 52.0d);
    org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-9999.9999d) + "'", double53 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-9999.9999d) + "'", double55 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray59);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
    org.junit.Assert.assertTrue("'" + double62 + "' != '" + 5100.0d + "'", double62 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray63);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass69);
  }

  @Test
  public void test01445() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01445");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double9 = quarterlyDouble5.deltaQ(0, (int) (byte) 100);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01446() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01446");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) '#', (int) '#');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01447() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01447");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double[] doubleArray21 = quarterlyDouble20.dArr;
    double[] doubleArray22 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray22;
    double double24 = quarterlyDouble4.getQseqQ();
    double double27 = quarterlyDouble4.deltaQ(100, (int) '#');
    // The following exception was thrown during execution in test generation
    try {
      double double28 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
  }

  @Test
  public void test01448() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01448");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double8 = quarterlyDouble5.deltaQ((int) (byte) 0, 1);
    double double9 = quarterlyDouble5.getTtm();
    java.lang.Class<?> wildcardClass10 = quarterlyDouble5.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass10);
  }

  @Test
  public void test01449() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01449");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getTtmAvg();
    double double7 = quarterlyDouble5.getTtmAvg();
    double double8 = quarterlyDouble5.getTtmAvg();
    double[] doubleArray9 = quarterlyDouble5.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double11 = quarterlyDouble10.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double12 = quarterlyDouble10.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
  }

  @Test
  public void test01450() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01450");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double[] doubleArray21 = quarterlyDouble20.dArr;
    double[] doubleArray22 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray22;
    double double24 = quarterlyDouble4.getQseqQ();
    double double25 = quarterlyDouble4.getMostRecent();
    double double27 = quarterlyDouble4.get((int) '4');
    double double30 = quarterlyDouble4.deltaQ((int) '4', (int) (short) -1);
    java.lang.Class<?> wildcardClass31 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9999.9999d) + "'", double27 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass31);
  }

  @Test
  public void test01451() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01451");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (byte) 10, (int) '#');
  }

  @Test
  public void test01452() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01452");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) (short) 10, 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01453() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01453");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get(1);
    double double14 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      double double15 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
  }

  @Test
  public void test01454() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01454");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double double16 = quarterlyDouble4.getQseqQ();
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double23 = quarterlyDouble21.get((int) (byte) 1);
    double double24 = quarterlyDouble21.getQseqQ();
    double[] doubleArray25 = quarterlyDouble21.dArr;
    quarterlyDouble4.dArr = doubleArray25;
    double double28 = quarterlyDouble4.get((int) '#');
    double double31 = quarterlyDouble4.deltaQ((int) ' ', (int) (short) 10);
    double double34 = quarterlyDouble4.deltaQ((int) (short) 10, (int) '4');
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-9999.9999d) + "'", double28 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
  }

  @Test
  public void test01455() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01455");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", 100, (int) (byte) 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01456() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01456");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, 1, 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, 0, (int) (short) -1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList15 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.lang.Class<?> wildcardClass16 = manyCompanyDataList15.getClass();
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(manyCompanyDataList7);
    org.junit.Assert.assertNotNull(manyCompanyDataList8);
    org.junit.Assert.assertNotNull(companyDataList11);
    org.junit.Assert.assertNotNull(companyDataList14);
    org.junit.Assert.assertNotNull(manyCompanyDataList15);
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test01457() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01457");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str19 = quarterlyDouble17.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01458() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01458");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getQseqQ();
    double double10 = quarterlyDouble4.getQseqQ();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double12 = quarterlyDouble4.getTtmAvg();
    double double13 = quarterlyDouble4.getTtmAvg();
    double double14 = quarterlyDouble4.getTtmAvg();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5100.0d + "'", double10 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
  }

  @Test
  public void test01459() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01459");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) ' ', 10);
  }

  @Test
  public void test01460() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01460");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (-1), (int) '4');
  }

  @Test
  public void test01461() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01461");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 100, (int) ' ');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (-1), (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList15 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 10, 100);
    java.lang.Class<?> wildcardClass16 = strList2.getClass();
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(companyDataList12);
    org.junit.Assert.assertNotNull(companyDataList15);
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test01462() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01462");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (byte) 1, 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01463() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01463");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtm();
    double[] doubleArray17 = quarterlyDouble4.dArr;
    java.lang.Class<?> wildcardClass18 = doubleArray17.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test01464() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01464");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) (byte) 0, 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01465() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01465");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getTtm();
    double double9 = quarterlyDouble4.deltaQ((int) '#', 100);
    double double10 = quarterlyDouble4.getMostRecent();
    double double11 = quarterlyDouble4.getQseqQ();
    double double12 = quarterlyDouble4.getMostRecent();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5100.0d + "'", double11 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
  }

  @Test
  public void test01466() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01466");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double[] doubleArray15 = quarterlyDouble14.dArr;
    double[] doubleArray16 = quarterlyDouble14.dArr;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtm();
    double double23 = quarterlyDouble21.getQseqQ();
    double[] doubleArray24 = quarterlyDouble21.dArr;
    double double25 = quarterlyDouble21.getQseqQ();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble21.dArr = doubleArray29;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble14.dArr = doubleArray29;
    quarterlyDouble4.dArr = doubleArray29;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str37 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01467() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01467");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str9 = quarterlyDouble4.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
  }

  @Test
  public void test01468() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01468");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double[] doubleArray15 = quarterlyDouble14.dArr;
    double[] doubleArray16 = quarterlyDouble14.dArr;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtm();
    double double23 = quarterlyDouble21.getQseqQ();
    double[] doubleArray24 = quarterlyDouble21.dArr;
    double double25 = quarterlyDouble21.getQseqQ();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble21.dArr = doubleArray29;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble14.dArr = doubleArray29;
    quarterlyDouble4.dArr = doubleArray29;
    double[] doubleArray36 = null;
    quarterlyDouble4.dArr = doubleArray36;
    // The following exception was thrown during execution in test generation
    try {
      double double38 = quarterlyDouble4.getQseqQ();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01469() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01469");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.lang.String str2 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.lang.String str4 = companyData1.getTicker();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.lang.String str7 = companyData1.getTicker();
    java.lang.String str8 = companyData1.getTicker();
    java.lang.String str9 = companyData1.getTicker();
    java.lang.String str10 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList11 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData14 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList11, (int) '4', (int) (byte) 1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Class<?> wildcardClass15 = fieldData14.getClass();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    org.junit.Assert.assertNotNull(fieldDataList11);
    org.junit.Assert.assertNull(fieldData14);
  }

  @Test
  public void test01470() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01470");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double[] doubleArray6 = quarterlyDouble4.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double12 = quarterlyDouble11.getTtm();
    double double13 = quarterlyDouble11.getQseqQ();
    double[] doubleArray14 = quarterlyDouble11.dArr;
    double double15 = quarterlyDouble11.getQseqQ();
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    quarterlyDouble11.dArr = doubleArray19;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    quarterlyDouble4.dArr = doubleArray19;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double26 = quarterlyDouble25.getTtmAvg();
    double double27 = quarterlyDouble25.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str29 = quarterlyDouble25.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
  }

  @Test
  public void test01471() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01471");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    double double9 = quarterlyDouble4.getQseqQ();
    double double10 = quarterlyDouble4.getTtmAvg();
    double double11 = quarterlyDouble4.getMostRecent();
    double double13 = quarterlyDouble4.get((int) (byte) 100);
    double double14 = quarterlyDouble4.getMostRecent();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 52.0d + "'", double11 == 52.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
  }

  @Test
  public void test01472() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01472");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.String str8 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList9 = companyData1.getFdList();
    java.lang.String str10 = companyData1.getTicker();
    java.lang.String str11 = companyData1.getTicker();
    java.lang.Class<?> wildcardClass12 = companyData1.getClass();
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    org.junit.Assert.assertNotNull(fieldDataList9);
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test01473() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01473");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (byte) 100, (int) (short) 0);
  }

  @Test
  public void test01474() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01474");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble18.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01475() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01475");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getTtm();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double12 = quarterlyDouble11.getTtm();
    double double14 = quarterlyDouble11.get((int) '4');
    double[] doubleArray18 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double[] doubleArray20 = quarterlyDouble19.dArr;
    double double21 = quarterlyDouble19.getQseqQ();
    double[] doubleArray22 = new double[] {};
    quarterlyDouble19.dArr = doubleArray22;
    quarterlyDouble11.dArr = doubleArray22;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double double31 = quarterlyDouble30.getTtm();
    double double33 = quarterlyDouble30.get((int) '4');
    double[] doubleArray37 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    double[] doubleArray39 = quarterlyDouble38.dArr;
    double double40 = quarterlyDouble38.getQseqQ();
    double[] doubleArray41 = new double[] {};
    quarterlyDouble38.dArr = doubleArray41;
    quarterlyDouble30.dArr = doubleArray41;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    quarterlyDouble25.dArr = doubleArray41;
    double[] doubleArray46 = quarterlyDouble25.dArr;
    quarterlyDouble4.dArr = doubleArray46;
    double[] doubleArray51 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble52 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray51);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray51);
    double[] doubleArray57 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble58 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray57);
    double double59 = quarterlyDouble58.getTtm();
    double double61 = quarterlyDouble58.get((int) '4');
    double double64 = quarterlyDouble58.deltaQ((int) (short) 1, 0);
    double[] doubleArray68 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble69 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray68);
    double double70 = quarterlyDouble69.getTtm();
    double double71 = quarterlyDouble69.getQseqQ();
    double[] doubleArray72 = quarterlyDouble69.dArr;
    quarterlyDouble58.dArr = doubleArray72;
    quarterlyDouble53.dArr = doubleArray72;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble75 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray72);
    quarterlyDouble4.dArr = doubleArray72;
    java.lang.Class<?> wildcardClass77 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5100.0d + "'", double21 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-9999.9999d) + "'", double33 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
    org.junit.Assert.assertNotNull(doubleArray46);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray57);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
    org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-9999.9999d) + "'", double61 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray68);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
    org.junit.Assert.assertTrue("'" + double71 + "' != '" + 5100.0d + "'", double71 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray72);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass77);
  }

  @Test
  public void test01476() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01476");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double double10 = quarterlyDouble8.getTtm();
    double double12 = quarterlyDouble8.get((int) (short) 0);
    double double13 = quarterlyDouble8.getTtmAvg();
    double[] doubleArray17 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    double double20 = quarterlyDouble18.get((int) (byte) 1);
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double double26 = quarterlyDouble25.getTtm();
    double double27 = quarterlyDouble25.getQseqQ();
    double[] doubleArray28 = quarterlyDouble25.dArr;
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    quarterlyDouble25.dArr = doubleArray32;
    double double35 = quarterlyDouble25.getTtm();
    double[] doubleArray36 = quarterlyDouble25.dArr;
    double double37 = quarterlyDouble25.getTtm();
    double[] doubleArray38 = quarterlyDouble25.dArr;
    quarterlyDouble18.dArr = doubleArray38;
    quarterlyDouble8.dArr = doubleArray38;
    double[] doubleArray41 = quarterlyDouble8.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double42 = quarterlyDouble8.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5100.0d + "'", double27 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray36);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray38);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01477() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01477");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList4 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.lang.Class<?> wildcardClass7 = strList2.getClass();
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(manyCompanyDataList3);
    org.junit.Assert.assertNotNull(companyDataList4);
    org.junit.Assert.assertNotNull(manyCompanyDataList5);
    org.junit.Assert.assertNotNull(manyCompanyDataList6);
    org.junit.Assert.assertNotNull(wildcardClass7);
  }

  @Test
  public void test01478() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01478");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (short) 10, (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList15 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList16 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.lang.Class<?> wildcardClass17 = manyCompanyDataList16.getClass();
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(companyDataList13);
    org.junit.Assert.assertNotNull(manyCompanyDataList14);
    org.junit.Assert.assertNotNull(manyCompanyDataList15);
    org.junit.Assert.assertNotNull(manyCompanyDataList16);
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test01479() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01479");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (short) 10, (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (-1), 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList18 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList19 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList22 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (-1), 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList23 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(companyDataList13);
    org.junit.Assert.assertNotNull(manyCompanyDataList14);
    org.junit.Assert.assertNotNull(companyDataList17);
    org.junit.Assert.assertNotNull(manyCompanyDataList18);
    org.junit.Assert.assertNotNull(manyCompanyDataList19);
    org.junit.Assert.assertNotNull(companyDataList22);
    org.junit.Assert.assertNotNull(manyCompanyDataList23);
  }

  @Test
  public void test01480() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01480");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str16 = quarterlyDouble14.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01481() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01481");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (int) '4', (int) (short) 100);
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(companyDataList5);
  }

  @Test
  public void test01482() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01482");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double12 = quarterlyDouble11.getTtmAvg();
    double double13 = quarterlyDouble11.getQseqQ();
    double[] doubleArray17 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    double double21 = quarterlyDouble19.get(100);
    double[] doubleArray22 = quarterlyDouble19.dArr;
    double double25 = quarterlyDouble19.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double double31 = quarterlyDouble30.getTtm();
    double double33 = quarterlyDouble30.get((int) '4');
    double[] doubleArray37 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    double[] doubleArray39 = quarterlyDouble38.dArr;
    double double40 = quarterlyDouble38.getQseqQ();
    double[] doubleArray41 = new double[] {};
    quarterlyDouble38.dArr = doubleArray41;
    quarterlyDouble30.dArr = doubleArray41;
    double[] doubleArray44 = quarterlyDouble30.dArr;
    quarterlyDouble19.dArr = doubleArray44;
    quarterlyDouble11.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    double double48 = quarterlyDouble47.getTtm();
    java.lang.Class<?> wildcardClass49 = quarterlyDouble47.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-9999.9999d) + "'", double21 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-9999.9999d) + "'", double33 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass49);
  }

  @Test
  public void test01483() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01483");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 100, (int) (short) 100);
  }

  @Test
  public void test01484() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01484");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double double19 = quarterlyDouble4.deltaQ((int) (byte) 100, 0);
    double double20 = quarterlyDouble4.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str22 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
  }

  @Test
  public void test01485() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01485");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get(1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str15 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
  }

  @Test
  public void test01486() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01486");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double[] doubleArray13 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double14 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01487() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01487");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) (byte) 10, (int) (short) 10);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01488() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01488");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      double double9 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
  }

  @Test
  public void test01489() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01489");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double24 = quarterlyDouble22.get(100);
    double[] doubleArray25 = quarterlyDouble22.dArr;
    quarterlyDouble5.dArr = doubleArray25;
    double double29 = quarterlyDouble5.deltaQ((int) (short) 1, (int) (byte) 1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str31 = quarterlyDouble5.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9999.9999d) + "'", double24 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
  }

  @Test
  public void test01490() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01490");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) -1, 10);
  }

  @Test
  public void test01491() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01491");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.String str8 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList9 = companyData1.getFdList();
    java.lang.String str10 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList11 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData14 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList11, (int) (short) 10, (-1));
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    org.junit.Assert.assertNotNull(fieldDataList9);
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    org.junit.Assert.assertNotNull(fieldDataList11);
    org.junit.Assert.assertNull(fieldData14);
  }

  @Test
  public void test01492() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01492");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double double12 = quarterlyDouble4.get(0);
    double double13 = quarterlyDouble4.getMostRecent();
    double double14 = quarterlyDouble4.getQseqQ();
    double double15 = quarterlyDouble4.getMostRecent();
    double double18 = quarterlyDouble4.deltaQ((int) (byte) 100, (-1));
    // The following exception was thrown during execution in test generation
    try {
      double double21 = quarterlyDouble4.deltaQ(0, (int) (short) 10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
  }

  @Test
  public void test01493() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01493");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) '4', (int) (byte) 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01494() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01494");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double[] doubleArray14 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double15 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01495() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01495");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getMostRecent();
    double double18 = quarterlyDouble5.getTtm();
    double double20 = quarterlyDouble5.get((int) '4');
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double double26 = quarterlyDouble25.getTtm();
    double double27 = quarterlyDouble25.getQseqQ();
    double[] doubleArray28 = quarterlyDouble25.dArr;
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    quarterlyDouble25.dArr = doubleArray32;
    double[] doubleArray35 = quarterlyDouble25.dArr;
    double[] doubleArray39 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray39);
    double double41 = quarterlyDouble40.getTtmAvg();
    double double42 = quarterlyDouble40.getTtm();
    double double43 = quarterlyDouble40.getMostRecent();
    double double44 = quarterlyDouble40.getTtmAvg();
    double double45 = quarterlyDouble40.getMostRecent();
    double[] doubleArray49 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray49);
    double[] doubleArray51 = quarterlyDouble50.dArr;
    double[] doubleArray52 = quarterlyDouble50.dArr;
    double[] doubleArray56 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble57 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    double double58 = quarterlyDouble57.getTtm();
    double double59 = quarterlyDouble57.getQseqQ();
    double[] doubleArray60 = quarterlyDouble57.dArr;
    double double61 = quarterlyDouble57.getQseqQ();
    double[] doubleArray65 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble66 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble67 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    quarterlyDouble57.dArr = doubleArray65;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble69 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    quarterlyDouble50.dArr = doubleArray65;
    quarterlyDouble40.dArr = doubleArray65;
    quarterlyDouble25.dArr = doubleArray65;
    quarterlyDouble5.dArr = doubleArray65;
    // The following exception was thrown during execution in test generation
    try {
      double double74 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-9999.9999d) + "'", double20 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5100.0d + "'", double27 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray35);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 52.0d + "'", double43 == 52.0d);
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray49);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    org.junit.Assert.assertTrue("'" + double59 + "' != '" + 5100.0d + "'", double59 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray60);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double61 + "' != '" + 5100.0d + "'", double61 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray65);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01496() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01496");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 100, (int) ' ');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (-1), (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList16 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 10, 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList20 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 100, (int) (short) 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList21 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList24 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, 1, 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList27 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) -1, (int) (byte) -1);
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(companyDataList12);
    org.junit.Assert.assertNotNull(manyCompanyDataList13);
    org.junit.Assert.assertNotNull(companyDataList16);
    org.junit.Assert.assertNotNull(manyCompanyDataList17);
    org.junit.Assert.assertNotNull(companyDataList20);
    org.junit.Assert.assertNotNull(manyCompanyDataList21);
    org.junit.Assert.assertNotNull(companyDataList24);
    org.junit.Assert.assertNotNull(companyDataList27);
  }

  @Test
  public void test01497() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01497");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtm();
    double double19 = quarterlyDouble4.deltaQ(10, (int) (byte) 10);
    double double20 = quarterlyDouble4.getMostRecent();
    double double21 = quarterlyDouble4.getQseqQ();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5100.0d + "'", double21 == 5100.0d);
  }

  @Test
  public void test01498() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01498");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double double9 = quarterlyDouble4.get(0);
    // The following exception was thrown during execution in test generation
    try {
      double double10 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
  }

  @Test
  public void test01499() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01499");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble7 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray6);
    double double8 = quarterlyDouble7.getMostRecent();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double14 = quarterlyDouble13.getTtm();
    double double15 = quarterlyDouble13.getQseqQ();
    double[] doubleArray16 = quarterlyDouble13.dArr;
    double double17 = quarterlyDouble13.getQseqQ();
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    quarterlyDouble13.dArr = doubleArray21;
    double[] doubleArray25 = quarterlyDouble13.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    quarterlyDouble7.dArr = doubleArray25;
    double[] doubleArray28 = quarterlyDouble7.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str30 = quarterlyDouble7.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01500() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests2.test01500");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double[] doubleArray17 = quarterlyDouble16.dArr;
    double[] doubleArray18 = quarterlyDouble16.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double19 = quarterlyDouble16.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
  }
}
