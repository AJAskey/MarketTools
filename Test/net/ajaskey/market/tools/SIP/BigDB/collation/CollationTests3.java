package net.ajaskey.market.tools.SIP.BigDB.collation;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class CollationTests3 {

  public static boolean debug = false;

  @Test
  public void test01501() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01501");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double7 = quarterlyDouble4.getQseqQ();
    double double10 = quarterlyDouble4.deltaQ(10, (int) (byte) 10);
    double double11 = quarterlyDouble4.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double14 = quarterlyDouble4.deltaQ((int) (short) 1, 100);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
  }

  @Test
  public void test01502() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01502");
    java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) '4', (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 10, (int) (byte) 10);
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(manyCompanyDataList5);
    org.junit.Assert.assertNotNull(companyDataList8);
    org.junit.Assert.assertNotNull(companyDataList11);
  }

  @Test
  public void test01503() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01503");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double double10 = quarterlyDouble8.getTtm();
    double double12 = quarterlyDouble8.get((int) (short) 0);
    double double13 = quarterlyDouble8.getTtmAvg();
    double[] doubleArray17 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    double double20 = quarterlyDouble18.get((int) (byte) 1);
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double double26 = quarterlyDouble25.getTtm();
    double double27 = quarterlyDouble25.getQseqQ();
    double[] doubleArray28 = quarterlyDouble25.dArr;
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    quarterlyDouble25.dArr = doubleArray32;
    double double35 = quarterlyDouble25.getTtm();
    double[] doubleArray36 = quarterlyDouble25.dArr;
    double double37 = quarterlyDouble25.getTtm();
    double[] doubleArray38 = quarterlyDouble25.dArr;
    quarterlyDouble18.dArr = doubleArray38;
    quarterlyDouble8.dArr = doubleArray38;
    double[] doubleArray41 = quarterlyDouble8.dArr;
    double double44 = quarterlyDouble8.deltaQ((int) '#', (int) (short) 1);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5100.0d + "'", double27 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray36);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray38);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
  }

  @Test
  public void test01504() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01504");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtm();
    double[] doubleArray17 = quarterlyDouble4.dArr;
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double double24 = quarterlyDouble22.get((int) (byte) 1);
    double[] doubleArray28 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    double double30 = quarterlyDouble29.getTtm();
    double double31 = quarterlyDouble29.getQseqQ();
    double[] doubleArray32 = quarterlyDouble29.dArr;
    double[] doubleArray36 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble37 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray36);
    quarterlyDouble29.dArr = doubleArray36;
    double double39 = quarterlyDouble29.getTtm();
    double[] doubleArray40 = quarterlyDouble29.dArr;
    double double41 = quarterlyDouble29.getTtm();
    double[] doubleArray42 = quarterlyDouble29.dArr;
    quarterlyDouble22.dArr = doubleArray42;
    quarterlyDouble4.dArr = doubleArray42;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble45 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray42);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str47 = quarterlyDouble45.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5100.0d + "'", double31 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray36);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01505() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01505");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, 0, (int) (short) 100);
  }

  @Test
  public void test01506() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01506");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double20 = quarterlyDouble17.deltaQ((int) (short) -1, 1);
    double double23 = quarterlyDouble17.deltaQ(0, 0);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str25 = quarterlyDouble17.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
  }

  @Test
  public void test01507() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01507");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double25 = quarterlyDouble23.getQseqQ();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble23.dArr = doubleArray29;
    double double32 = quarterlyDouble23.getQseqQ();
    double double33 = quarterlyDouble23.getTtmAvg();
    double double34 = quarterlyDouble23.getTtm();
    double double35 = quarterlyDouble23.getMostRecent();
    double[] doubleArray39 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray39);
    double double41 = quarterlyDouble40.getTtm();
    double double42 = quarterlyDouble40.getQseqQ();
    double[] doubleArray43 = quarterlyDouble40.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray43);
    double double45 = quarterlyDouble44.getQseqQ();
    double[] doubleArray49 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray49);
    double[] doubleArray51 = quarterlyDouble50.dArr;
    double[] doubleArray52 = quarterlyDouble50.dArr;
    quarterlyDouble44.dArr = doubleArray52;
    quarterlyDouble23.dArr = doubleArray52;
    quarterlyDouble18.dArr = doubleArray52;
    double double56 = quarterlyDouble18.getMostRecent();
    double double57 = quarterlyDouble18.getQseqQ();
    double double58 = quarterlyDouble18.getTtmAvg();
    java.lang.Class<?> wildcardClass59 = quarterlyDouble18.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5100.0d + "'", double32 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    org.junit.Assert.assertTrue("'" + double42 + "' != '" + 5100.0d + "'", double42 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 5100.0d + "'", double45 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray49);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double56 + "' != '" + 52.0d + "'", double56 == 52.0d);
    org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5100.0d + "'", double57 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass59);
  }

  @Test
  public void test01508() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01508");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double12 = quarterlyDouble11.getTtmAvg();
    double double13 = quarterlyDouble11.getQseqQ();
    double[] doubleArray17 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    double double21 = quarterlyDouble19.get(100);
    double[] doubleArray22 = quarterlyDouble19.dArr;
    double double25 = quarterlyDouble19.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double double31 = quarterlyDouble30.getTtm();
    double double33 = quarterlyDouble30.get((int) '4');
    double[] doubleArray37 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    double[] doubleArray39 = quarterlyDouble38.dArr;
    double double40 = quarterlyDouble38.getQseqQ();
    double[] doubleArray41 = new double[] {};
    quarterlyDouble38.dArr = doubleArray41;
    quarterlyDouble30.dArr = doubleArray41;
    double[] doubleArray44 = quarterlyDouble30.dArr;
    quarterlyDouble19.dArr = doubleArray44;
    quarterlyDouble11.dArr = doubleArray44;
    double double48 = quarterlyDouble11.get((int) (short) 100);
    double[] doubleArray52 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    double double54 = quarterlyDouble53.getTtmAvg();
    double double55 = quarterlyDouble53.getMostRecent();
    double double57 = quarterlyDouble53.get((int) 'a');
    double double59 = quarterlyDouble53.get((int) (byte) -1);
    double[] doubleArray63 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble64 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray63);
    double double65 = quarterlyDouble64.getTtm();
    double double66 = quarterlyDouble64.getQseqQ();
    double[] doubleArray67 = quarterlyDouble64.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble68 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray67);
    quarterlyDouble53.dArr = doubleArray67;
    double double70 = quarterlyDouble53.getMostRecent();
    double[] doubleArray74 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble75 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray74);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble76 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray74);
    double double78 = quarterlyDouble76.get(10);
    double double79 = quarterlyDouble76.getMostRecent();
    double[] doubleArray80 = quarterlyDouble76.dArr;
    quarterlyDouble53.dArr = doubleArray80;
    quarterlyDouble11.dArr = doubleArray80;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble83 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray80);
    // The following exception was thrown during execution in test generation
    try {
      double double84 = quarterlyDouble83.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-9999.9999d) + "'", double21 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-9999.9999d) + "'", double33 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-9999.9999d) + "'", double48 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 52.0d + "'", double55 == 52.0d);
    org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-9999.9999d) + "'", double57 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-9999.9999d) + "'", double59 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray63);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5100.0d + "'", double66 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray67);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double70 + "' != '" + 52.0d + "'", double70 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray74);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-9999.9999d) + "'", double78 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double79 + "' != '" + 52.0d + "'", double79 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray80);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01509() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01509");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    double double8 = quarterlyDouble5.getTtmAvg();
    double double9 = quarterlyDouble5.getMostRecent();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double16 = quarterlyDouble14.getQseqQ();
    double[] doubleArray17 = quarterlyDouble14.dArr;
    double double18 = quarterlyDouble14.getQseqQ();
    double double19 = quarterlyDouble14.getTtmAvg();
    double double21 = quarterlyDouble14.get(0);
    double[] doubleArray25 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double double27 = quarterlyDouble26.getTtm();
    double double28 = quarterlyDouble26.getQseqQ();
    double[] doubleArray29 = quarterlyDouble26.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble14.dArr = doubleArray29;
    quarterlyDouble5.dArr = doubleArray29;
    double[] doubleArray33 = quarterlyDouble5.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double34 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 5100.0d + "'", double28 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray33);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01510() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01510");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.get((int) (byte) 100);
    // The following exception was thrown during execution in test generation
    try {
      double double17 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9999.9999d) + "'", double16 == (-9999.9999d));
  }

  @Test
  public void test01511() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01511");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    double double10 = quarterlyDouble4.get((int) (byte) -1);
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double16 = quarterlyDouble15.getTtm();
    double double17 = quarterlyDouble15.getQseqQ();
    double[] doubleArray18 = quarterlyDouble15.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    quarterlyDouble4.dArr = doubleArray18;
    double double23 = quarterlyDouble4.deltaQ((int) (byte) 100, 0);
    double double26 = quarterlyDouble4.deltaQ((int) (byte) 10, (int) (byte) 100);
    double double27 = quarterlyDouble4.getMostRecent();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
  }

  @Test
  public void test01512() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01512");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double25 = quarterlyDouble23.getQseqQ();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble23.dArr = doubleArray29;
    double double32 = quarterlyDouble23.getQseqQ();
    double double33 = quarterlyDouble23.getTtmAvg();
    double double34 = quarterlyDouble23.getTtm();
    double double35 = quarterlyDouble23.getMostRecent();
    double[] doubleArray39 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray39);
    double double41 = quarterlyDouble40.getTtm();
    double double42 = quarterlyDouble40.getQseqQ();
    double[] doubleArray43 = quarterlyDouble40.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray43);
    double double45 = quarterlyDouble44.getQseqQ();
    double[] doubleArray49 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray49);
    double[] doubleArray51 = quarterlyDouble50.dArr;
    double[] doubleArray52 = quarterlyDouble50.dArr;
    quarterlyDouble44.dArr = doubleArray52;
    quarterlyDouble23.dArr = doubleArray52;
    quarterlyDouble18.dArr = doubleArray52;
    double double56 = quarterlyDouble18.getMostRecent();
    double double57 = quarterlyDouble18.getQseqQ();
    java.lang.Class<?> wildcardClass58 = quarterlyDouble18.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5100.0d + "'", double32 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    org.junit.Assert.assertTrue("'" + double42 + "' != '" + 5100.0d + "'", double42 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 5100.0d + "'", double45 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray49);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double56 + "' != '" + 52.0d + "'", double56 == 52.0d);
    org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5100.0d + "'", double57 == 5100.0d);
    org.junit.Assert.assertNotNull(wildcardClass58);
  }

  @Test
  public void test01513() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01513");
    java.util.List<java.lang.String> strList0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
          .getCompanies(strList0, 100, (int) ' ');
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
  }

  @Test
  public void test01514() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01514");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double[] doubleArray21 = quarterlyDouble20.dArr;
    double[] doubleArray22 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray22;
    double double24 = quarterlyDouble4.getQseqQ();
    double double25 = quarterlyDouble4.getTtm();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double[] doubleArray32 = quarterlyDouble31.dArr;
    double[] doubleArray36 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble37 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray36);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray36);
    double double40 = quarterlyDouble38.get(100);
    double[] doubleArray41 = quarterlyDouble38.dArr;
    quarterlyDouble31.dArr = doubleArray41;
    double[] doubleArray46 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray46);
    double double48 = quarterlyDouble47.getTtm();
    double double49 = quarterlyDouble47.getQseqQ();
    double[] doubleArray50 = quarterlyDouble47.dArr;
    double double51 = quarterlyDouble47.getQseqQ();
    double double52 = quarterlyDouble47.getQseqQ();
    double double53 = quarterlyDouble47.getQseqQ();
    double[] doubleArray54 = quarterlyDouble47.dArr;
    quarterlyDouble31.dArr = doubleArray54;
    double double57 = quarterlyDouble31.get((int) (byte) -1);
    double[] doubleArray61 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble62 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray61);
    double double63 = quarterlyDouble62.getTtm();
    double double65 = quarterlyDouble62.get((int) '4');
    double[] doubleArray69 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble70 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray69);
    double[] doubleArray71 = quarterlyDouble70.dArr;
    double double72 = quarterlyDouble70.getQseqQ();
    double[] doubleArray73 = new double[] {};
    quarterlyDouble70.dArr = doubleArray73;
    quarterlyDouble62.dArr = doubleArray73;
    double[] doubleArray76 = quarterlyDouble62.dArr;
    quarterlyDouble31.dArr = doubleArray76;
    quarterlyDouble4.dArr = doubleArray76;
    // The following exception was thrown during execution in test generation
    try {
      double double79 = quarterlyDouble4.getMostRecent();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray36);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-9999.9999d) + "'", double40 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray46);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    org.junit.Assert.assertTrue("'" + double49 + "' != '" + 5100.0d + "'", double49 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double51 + "' != '" + 5100.0d + "'", double51 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5100.0d + "'", double52 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5100.0d + "'", double53 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray54);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-9999.9999d) + "'", double57 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray61);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-9999.9999d) + "'", double65 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray69);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray71);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double72 + "' != '" + 5100.0d + "'", double72 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray73);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
    org.junit.Assert.assertNotNull(doubleArray76);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
  }

  @Test
  public void test01515() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01515");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (byte) -1, (int) (short) 100);
  }

  @Test
  public void test01516() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01516");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    double double8 = quarterlyDouble5.getTtmAvg();
    double double9 = quarterlyDouble5.getMostRecent();
    double[] doubleArray10 = quarterlyDouble5.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str12 = quarterlyDouble5.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01517() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01517");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double8 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str10 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
  }

  @Test
  public void test01518() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01518");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (byte) 10, 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (-1), (int) (short) -1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList15 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(companyDataList13);
    org.junit.Assert.assertNotNull(manyCompanyDataList14);
    org.junit.Assert.assertNotNull(manyCompanyDataList15);
  }

  @Test
  public void test01519() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01519");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getTtmAvg();
    double double7 = quarterlyDouble5.getTtm();
    double double8 = quarterlyDouble5.getTtmAvg();
    double double9 = quarterlyDouble5.getTtmAvg();
    double[] doubleArray10 = null;
    quarterlyDouble5.dArr = doubleArray10;
    // The following exception was thrown during execution in test generation
    try {
      double double12 = quarterlyDouble5.getMostRecent();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
  }

  @Test
  public void test01520() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01520");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble9 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double10 = quarterlyDouble9.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str12 = quarterlyDouble9.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5100.0d + "'", double10 == 5100.0d);
  }

  @Test
  public void test01521() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01521");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 1, (int) '4');
  }

  @Test
  public void test01522() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01522");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str9 = quarterlyDouble5.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
  }

  @Test
  public void test01523() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01523");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    double double10 = quarterlyDouble4.get((int) (byte) -1);
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double16 = quarterlyDouble15.getTtm();
    double double17 = quarterlyDouble15.getQseqQ();
    double[] doubleArray18 = quarterlyDouble15.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    quarterlyDouble4.dArr = doubleArray18;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    // The following exception was thrown during execution in test generation
    try {
      double double22 = quarterlyDouble21.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01524() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01524");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("", 100,
        (-1));
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01525() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01525");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double[] doubleArray21 = quarterlyDouble20.dArr;
    double[] doubleArray22 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray22;
    double double24 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str26 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
  }

  @Test
  public void test01526() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01526");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.lang.String str6 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList8 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList9 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData12 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList9, 1, 1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData15 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList9, 0, 100);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData18 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList9, (-1), (int) '#');
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertNotNull(fieldDataList8);
    org.junit.Assert.assertNotNull(fieldDataList9);
    org.junit.Assert.assertNull(fieldData12);
    org.junit.Assert.assertNull(fieldData15);
    org.junit.Assert.assertNull(fieldData18);
  }

  @Test
  public void test01527() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01527");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (short) -1, 0);
  }

  @Test
  public void test01528() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01528");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList4 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, 100, 1);
    java.lang.Class<?> wildcardClass10 = strList2.getClass();
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(manyCompanyDataList3);
    org.junit.Assert.assertNotNull(companyDataList4);
    org.junit.Assert.assertNotNull(manyCompanyDataList5);
    org.junit.Assert.assertNotNull(manyCompanyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(wildcardClass10);
  }

  @Test
  public void test01529() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01529");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double double8 = quarterlyDouble5.getMostRecent();
    double double10 = quarterlyDouble5.get((int) (byte) -1);
    double double11 = quarterlyDouble5.getTtm();
    double[] doubleArray15 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double17 = quarterlyDouble16.getTtm();
    double double18 = quarterlyDouble16.getQseqQ();
    double[] doubleArray19 = quarterlyDouble16.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    quarterlyDouble5.dArr = doubleArray19;
    java.lang.Class<?> wildcardClass23 = quarterlyDouble5.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test01530() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01530");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ(10, (int) (byte) 0);
    double[] doubleArray17 = quarterlyDouble4.dArr;
    double double20 = quarterlyDouble4.deltaQ(10, (int) (short) -1);
    double double21 = quarterlyDouble4.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double22 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
  }

  @Test
  public void test01531() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01531");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 1, (int) (short) -1);
  }

  @Test
  public void test01532() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01532");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getMostRecent();
    double double18 = quarterlyDouble5.getTtm();
    double double20 = quarterlyDouble5.get((int) '4');
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str22 = quarterlyDouble5.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-9999.9999d) + "'", double20 == (-9999.9999d));
  }

  @Test
  public void test01533() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01533");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get(1);
    double double14 = quarterlyDouble4.getMostRecent();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str17 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01534() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01534");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double double11 = quarterlyDouble4.get((int) '4');
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str13 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9999.9999d) + "'", double11 == (-9999.9999d));
  }

  @Test
  public void test01535() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01535");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double26 = quarterlyDouble23.get((int) '4');
    double[] doubleArray30 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    double[] doubleArray32 = quarterlyDouble31.dArr;
    double double33 = quarterlyDouble31.getQseqQ();
    double[] doubleArray34 = new double[] {};
    quarterlyDouble31.dArr = doubleArray34;
    quarterlyDouble23.dArr = doubleArray34;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble37 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    quarterlyDouble18.dArr = doubleArray34;
    double[] doubleArray39 = quarterlyDouble18.dArr;
    double double40 = quarterlyDouble18.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double41 = quarterlyDouble18.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9999.9999d) + "'", double26 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5100.0d + "'", double33 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
  }

  @Test
  public void test01536() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01536");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double double10 = quarterlyDouble8.getMostRecent();
    double[] doubleArray11 = quarterlyDouble8.dArr;
    double double12 = quarterlyDouble8.getTtmAvg();
    double double15 = quarterlyDouble8.deltaQ((int) 'a', (-1));
    double double17 = quarterlyDouble8.get(0);
    double double18 = quarterlyDouble8.getQseqQ();
    double double19 = quarterlyDouble8.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str21 = quarterlyDouble8.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
  }

  @Test
  public void test01537() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01537");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getTtmAvg();
    double double7 = quarterlyDouble5.getTtmAvg();
    double double8 = quarterlyDouble5.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      double double9 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
  }

  @Test
  public void test01538() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01538");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (byte) 10, 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (-1), (int) (short) -1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList16 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (byte) 10, (int) (short) 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList18 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList19 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(companyDataList13);
    org.junit.Assert.assertNotNull(companyDataList16);
    org.junit.Assert.assertNotNull(manyCompanyDataList17);
    org.junit.Assert.assertNotNull(manyCompanyDataList18);
    org.junit.Assert.assertNotNull(manyCompanyDataList19);
  }

  @Test
  public void test01539() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01539");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double8 = quarterlyDouble4.getMostRecent();
    double double10 = quarterlyDouble4.get((int) '4');
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    quarterlyDouble4.dArr = doubleArray14;
    double[] doubleArray17 = quarterlyDouble4.dArr;
    double double18 = quarterlyDouble4.getMostRecent();
    double double19 = quarterlyDouble4.getQseqQ();
    double double20 = quarterlyDouble4.getTtm();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5100.0d + "'", double19 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
  }

  @Test
  public void test01540() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01540");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (byte) 1, 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01541() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01541");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 1, (int) ' ');
  }

  @Test
  public void test01542() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01542");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtm();
    double double22 = quarterlyDouble20.getQseqQ();
    double[] doubleArray23 = quarterlyDouble20.dArr;
    double double24 = quarterlyDouble20.getQseqQ();
    double[] doubleArray28 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    quarterlyDouble20.dArr = doubleArray28;
    double[] doubleArray32 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray32;
    double double34 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      double double35 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5100.0d + "'", double22 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 52.0d + "'", double34 == 52.0d);
  }

  @Test
  public void test01543() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01543");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getTtmAvg();
    double double18 = quarterlyDouble5.getQseqQ();
    double double21 = quarterlyDouble5.deltaQ((int) (byte) 10, (int) (byte) 100);
    double[] doubleArray25 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double double27 = quarterlyDouble26.getTtm();
    double double28 = quarterlyDouble26.getQseqQ();
    double[] doubleArray29 = quarterlyDouble26.dArr;
    double[] doubleArray33 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray33);
    quarterlyDouble26.dArr = doubleArray33;
    double double36 = quarterlyDouble26.getTtm();
    double[] doubleArray37 = quarterlyDouble26.dArr;
    quarterlyDouble5.dArr = doubleArray37;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str40 = quarterlyDouble5.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 5100.0d + "'", double28 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray33);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01544() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01544");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get(1);
    double double15 = quarterlyDouble4.get((int) 'a');
    double[] doubleArray16 = quarterlyDouble4.dArr;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtmAvg();
    double double23 = quarterlyDouble21.getMostRecent();
    double double24 = quarterlyDouble21.getTtm();
    double double25 = quarterlyDouble21.getTtm();
    double[] doubleArray26 = quarterlyDouble21.dArr;
    quarterlyDouble4.dArr = doubleArray26;
    double[] doubleArray28 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str30 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-9999.9999d) + "'", double15 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray26);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01545() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01545");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get(1);
    double double15 = quarterlyDouble4.get((int) 'a');
    double[] doubleArray16 = quarterlyDouble4.dArr;
    double double18 = quarterlyDouble4.get((int) ' ');
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtmAvg();
    double double25 = quarterlyDouble23.getMostRecent();
    double double27 = quarterlyDouble23.get((int) 'a');
    double double29 = quarterlyDouble23.get((int) (byte) -1);
    double[] doubleArray33 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray33);
    double double35 = quarterlyDouble34.getTtm();
    double double36 = quarterlyDouble34.getQseqQ();
    double[] doubleArray37 = quarterlyDouble34.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    quarterlyDouble23.dArr = doubleArray37;
    double double40 = quarterlyDouble23.getMostRecent();
    double[] doubleArray44 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble45 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble46 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    double double48 = quarterlyDouble46.get(10);
    double double49 = quarterlyDouble46.getMostRecent();
    double[] doubleArray50 = quarterlyDouble46.dArr;
    quarterlyDouble23.dArr = doubleArray50;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble52 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray50);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray50);
    quarterlyDouble4.dArr = doubleArray50;
    double[] doubleArray55 = quarterlyDouble4.dArr;
    double double57 = quarterlyDouble4.get((int) '#');
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str59 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-9999.9999d) + "'", double15 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-9999.9999d) + "'", double18 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9999.9999d) + "'", double27 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-9999.9999d) + "'", double29 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray33);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5100.0d + "'", double36 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 52.0d + "'", double40 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-9999.9999d) + "'", double48 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double49 + "' != '" + 52.0d + "'", double49 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray55);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-9999.9999d) + "'", double57 == (-9999.9999d));
  }

  @Test
  public void test01546() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01546");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) 'a', (int) ' ');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01547() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01547");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtm();
    double double22 = quarterlyDouble20.getQseqQ();
    double[] doubleArray23 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray23;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray23);
    double double26 = quarterlyDouble25.getMostRecent();
    double double29 = quarterlyDouble25.deltaQ((int) (byte) 10, (int) (byte) 10);
    // The following exception was thrown during execution in test generation
    try {
      double double32 = quarterlyDouble25.deltaQ((int) (short) 1, (int) '4');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5100.0d + "'", double22 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
  }

  @Test
  public void test01548() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01548");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double8 = quarterlyDouble5.deltaQ((int) (short) 10, (int) ' ');
    double double9 = quarterlyDouble5.getTtm();
    double[] doubleArray10 = quarterlyDouble5.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str12 = quarterlyDouble5.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01549() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01549");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble4.deltaQ((int) (short) 10, (int) (short) 100);
    double[] doubleArray8 = quarterlyDouble4.dArr;
    double[] doubleArray9 = quarterlyDouble4.dArr;
    double double10 = quarterlyDouble4.getTtmAvg();
    java.lang.Class<?> wildcardClass11 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test01550() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01550");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList0 = null;
    // The following exception was thrown during execution in test generation
    try {
      net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
          .getFieldData(fieldDataList0, (int) (short) 1, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
  }

  @Test
  public void test01551() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01551");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double double16 = quarterlyDouble4.getQseqQ();
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double23 = quarterlyDouble21.get((int) (byte) 1);
    double double24 = quarterlyDouble21.getQseqQ();
    double[] doubleArray25 = quarterlyDouble21.dArr;
    quarterlyDouble4.dArr = doubleArray25;
    double double28 = quarterlyDouble4.get((int) (short) 10);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str30 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-9999.9999d) + "'", double28 == (-9999.9999d));
  }

  @Test
  public void test01552() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01552");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    double double8 = quarterlyDouble5.getTtmAvg();
    double double9 = quarterlyDouble5.getMostRecent();
    double double10 = quarterlyDouble5.getMostRecent();
    double double11 = quarterlyDouble5.getTtmAvg();
    java.lang.Class<?> wildcardClass12 = quarterlyDouble5.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test01553() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01553");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtm();
    double double22 = quarterlyDouble20.getQseqQ();
    double[] doubleArray23 = quarterlyDouble20.dArr;
    double double24 = quarterlyDouble20.getQseqQ();
    double[] doubleArray28 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    quarterlyDouble20.dArr = doubleArray28;
    double[] doubleArray32 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray32;
    double[] doubleArray34 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    double[] doubleArray39 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray39);
    double double41 = quarterlyDouble40.getTtm();
    double double42 = quarterlyDouble40.getQseqQ();
    double[] doubleArray43 = quarterlyDouble40.dArr;
    double[] doubleArray47 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble48 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray47);
    quarterlyDouble40.dArr = doubleArray47;
    double[] doubleArray50 = quarterlyDouble40.dArr;
    quarterlyDouble35.dArr = doubleArray50;
    quarterlyDouble4.dArr = doubleArray50;
    java.lang.Class<?> wildcardClass53 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5100.0d + "'", double22 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    org.junit.Assert.assertTrue("'" + double42 + "' != '" + 5100.0d + "'", double42 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass53);
  }

  @Test
  public void test01554() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01554");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double17 = quarterlyDouble14.get((int) '4');
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double double24 = quarterlyDouble22.getQseqQ();
    double[] doubleArray25 = new double[] {};
    quarterlyDouble22.dArr = doubleArray25;
    quarterlyDouble14.dArr = doubleArray25;
    quarterlyDouble4.dArr = doubleArray25;
    double double30 = quarterlyDouble4.get((int) 'a');
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str32 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-9999.9999d) + "'", double30 == (-9999.9999d));
  }

  @Test
  public void test01555() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01555");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble4.deltaQ((int) (short) 10, (int) (short) 100);
    double double9 = quarterlyDouble4.get((int) (byte) 0);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str12 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01556() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01556");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double9 = quarterlyDouble4.get((int) (short) -1);
    double double10 = quarterlyDouble4.getTtmAvg();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
  }

  @Test
  public void test01557() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01557");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray17 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    double double19 = quarterlyDouble18.getTtmAvg();
    double[] doubleArray23 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray23);
    double double25 = quarterlyDouble24.getTtm();
    double double26 = quarterlyDouble24.getQseqQ();
    double[] doubleArray27 = quarterlyDouble24.dArr;
    double[] doubleArray31 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble32 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    quarterlyDouble24.dArr = doubleArray31;
    double double34 = quarterlyDouble24.getTtm();
    double[] doubleArray35 = quarterlyDouble24.dArr;
    double double36 = quarterlyDouble24.getQseqQ();
    double double37 = quarterlyDouble24.getTtm();
    double[] doubleArray38 = quarterlyDouble24.dArr;
    quarterlyDouble18.dArr = doubleArray38;
    // The following exception was thrown during execution in test generation
    try {
      double double40 = quarterlyDouble18.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5100.0d + "'", double26 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray35);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5100.0d + "'", double36 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray38);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01558() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01558");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    double double10 = quarterlyDouble4.get((int) (byte) -1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str12 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
  }

  @Test
  public void test01559() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01559");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("hi!");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.lang.String str4 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList5 = companyData1.getFdList();
    java.lang.String str6 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData10 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList7, (int) (byte) 10, (int) (short) 100);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData13 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList7, (int) '4', (int) (byte) 0);
    java.lang.Class<?> wildcardClass14 = fieldDataList7.getClass();
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    org.junit.Assert.assertNotNull(fieldDataList5);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertNull(fieldData10);
    org.junit.Assert.assertNull(fieldData13);
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test01560() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01560");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) '4', 0);
  }

  @Test
  public void test01561() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01561");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double[] doubleArray27 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    double double31 = quarterlyDouble29.get(100);
    double[] doubleArray32 = quarterlyDouble29.dArr;
    quarterlyDouble22.dArr = doubleArray32;
    quarterlyDouble4.dArr = doubleArray32;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double37 = quarterlyDouble35.get((int) (byte) 1);
    double double40 = quarterlyDouble35.deltaQ(10, (int) ' ');
    double[] doubleArray44 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble45 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    double double46 = quarterlyDouble45.getTtmAvg();
    double[] doubleArray50 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble51 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray50);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble52 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray50);
    double double54 = quarterlyDouble52.get(100);
    double[] doubleArray55 = quarterlyDouble52.dArr;
    quarterlyDouble45.dArr = doubleArray55;
    double double57 = quarterlyDouble45.getQseqQ();
    double[] doubleArray61 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble62 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray61);
    double double64 = quarterlyDouble62.get((int) (byte) 1);
    double double65 = quarterlyDouble62.getQseqQ();
    double[] doubleArray66 = quarterlyDouble62.dArr;
    quarterlyDouble45.dArr = doubleArray66;
    double double69 = quarterlyDouble45.get((int) '#');
    double[] doubleArray73 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble74 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray73);
    double double75 = quarterlyDouble74.getTtm();
    double double76 = quarterlyDouble74.getQseqQ();
    double[] doubleArray77 = quarterlyDouble74.dArr;
    double double78 = quarterlyDouble74.getQseqQ();
    double[] doubleArray82 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble83 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray82);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble84 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray82);
    quarterlyDouble74.dArr = doubleArray82;
    double[] doubleArray86 = quarterlyDouble74.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble87 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray86);
    quarterlyDouble45.dArr = doubleArray86;
    quarterlyDouble35.dArr = doubleArray86;
    double double90 = quarterlyDouble35.getTtm();
    double double91 = quarterlyDouble35.getTtmAvg();
    java.lang.Class<?> wildcardClass92 = quarterlyDouble35.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9999.9999d) + "'", double31 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-9999.9999d) + "'", double54 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray55);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5100.0d + "'", double57 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray61);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double64 + "' != '" + 52.0d + "'", double64 == 52.0d);
    org.junit.Assert.assertTrue("'" + double65 + "' != '" + 5100.0d + "'", double65 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray66);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-9999.9999d) + "'", double69 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray73);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
    org.junit.Assert.assertTrue("'" + double76 + "' != '" + 5100.0d + "'", double76 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray77);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double78 + "' != '" + 5100.0d + "'", double78 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray82);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray86);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
    org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass92);
  }

  @Test
  public void test01562() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01562");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(1, 10);
  }

  @Test
  public void test01563() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01563");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(0, (int) (short) 0);
  }

  @Test
  public void test01564() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01564");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double12 = quarterlyDouble11.getTtmAvg();
    double double13 = quarterlyDouble11.getQseqQ();
    double[] doubleArray17 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    double double21 = quarterlyDouble19.get(100);
    double[] doubleArray22 = quarterlyDouble19.dArr;
    double double25 = quarterlyDouble19.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double double31 = quarterlyDouble30.getTtm();
    double double33 = quarterlyDouble30.get((int) '4');
    double[] doubleArray37 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    double[] doubleArray39 = quarterlyDouble38.dArr;
    double double40 = quarterlyDouble38.getQseqQ();
    double[] doubleArray41 = new double[] {};
    quarterlyDouble38.dArr = doubleArray41;
    quarterlyDouble30.dArr = doubleArray41;
    double[] doubleArray44 = quarterlyDouble30.dArr;
    quarterlyDouble19.dArr = doubleArray44;
    quarterlyDouble11.dArr = doubleArray44;
    double double48 = quarterlyDouble11.get((int) (short) 100);
    double[] doubleArray52 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    double double54 = quarterlyDouble53.getTtmAvg();
    double double55 = quarterlyDouble53.getMostRecent();
    double double57 = quarterlyDouble53.get((int) 'a');
    double double59 = quarterlyDouble53.get((int) (byte) -1);
    double[] doubleArray63 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble64 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray63);
    double double65 = quarterlyDouble64.getTtm();
    double double66 = quarterlyDouble64.getQseqQ();
    double[] doubleArray67 = quarterlyDouble64.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble68 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray67);
    quarterlyDouble53.dArr = doubleArray67;
    double double70 = quarterlyDouble53.getMostRecent();
    double[] doubleArray74 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble75 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray74);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble76 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray74);
    double double78 = quarterlyDouble76.get(10);
    double double79 = quarterlyDouble76.getMostRecent();
    double[] doubleArray80 = quarterlyDouble76.dArr;
    quarterlyDouble53.dArr = doubleArray80;
    quarterlyDouble11.dArr = doubleArray80;
    // The following exception was thrown during execution in test generation
    try {
      double double83 = quarterlyDouble11.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-9999.9999d) + "'", double21 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-9999.9999d) + "'", double33 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-9999.9999d) + "'", double48 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 52.0d + "'", double55 == 52.0d);
    org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-9999.9999d) + "'", double57 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-9999.9999d) + "'", double59 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray63);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5100.0d + "'", double66 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray67);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double70 + "' != '" + 52.0d + "'", double70 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray74);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-9999.9999d) + "'", double78 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double79 + "' != '" + 52.0d + "'", double79 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray80);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01565() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01565");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getTtmAvg();
    double double18 = quarterlyDouble5.getQseqQ();
    double[] doubleArray19 = quarterlyDouble5.dArr;
    double double20 = quarterlyDouble5.getMostRecent();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
  }

  @Test
  public void test01566() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01566");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double[] doubleArray6 = quarterlyDouble4.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double12 = quarterlyDouble11.getTtm();
    double double13 = quarterlyDouble11.getQseqQ();
    double[] doubleArray14 = quarterlyDouble11.dArr;
    double double15 = quarterlyDouble11.getQseqQ();
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    quarterlyDouble11.dArr = doubleArray19;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    quarterlyDouble4.dArr = doubleArray19;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double26 = quarterlyDouble25.getTtmAvg();
    double double28 = quarterlyDouble25.get((int) (short) -1);
    // The following exception was thrown during execution in test generation
    try {
      double double29 = quarterlyDouble25.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-9999.9999d) + "'", double28 == (-9999.9999d));
  }

  @Test
  public void test01567() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01567");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getMostRecent();
    java.lang.Class<?> wildcardClass11 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test01568() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01568");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double25 = quarterlyDouble23.getQseqQ();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble23.dArr = doubleArray29;
    double double32 = quarterlyDouble23.getQseqQ();
    double double33 = quarterlyDouble23.getTtmAvg();
    double double34 = quarterlyDouble23.getTtm();
    double double35 = quarterlyDouble23.getMostRecent();
    double[] doubleArray39 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray39);
    double double41 = quarterlyDouble40.getTtm();
    double double42 = quarterlyDouble40.getQseqQ();
    double[] doubleArray43 = quarterlyDouble40.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray43);
    double double45 = quarterlyDouble44.getQseqQ();
    double[] doubleArray49 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray49);
    double[] doubleArray51 = quarterlyDouble50.dArr;
    double[] doubleArray52 = quarterlyDouble50.dArr;
    quarterlyDouble44.dArr = doubleArray52;
    quarterlyDouble23.dArr = doubleArray52;
    quarterlyDouble18.dArr = doubleArray52;
    double double56 = quarterlyDouble18.getMostRecent();
    double double57 = quarterlyDouble18.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str59 = quarterlyDouble18.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5100.0d + "'", double32 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    org.junit.Assert.assertTrue("'" + double42 + "' != '" + 5100.0d + "'", double42 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 5100.0d + "'", double45 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray49);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double56 + "' != '" + 52.0d + "'", double56 == 52.0d);
    org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
  }

  @Test
  public void test01569() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01569");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("hi!");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.lang.String str3 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList5 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.String str8 = companyData1.getTicker();
    java.lang.String str9 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList10 = companyData1.getFdList();
    java.lang.Class<?> wildcardClass11 = companyData1.getClass();
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertNotNull(fieldDataList5);
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    org.junit.Assert.assertNotNull(fieldDataList10);
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test01571() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01571");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtm();
    double double22 = quarterlyDouble20.getQseqQ();
    double[] doubleArray23 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray23;
    double double26 = quarterlyDouble4.get((int) '#');
    java.lang.Class<?> wildcardClass27 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5100.0d + "'", double22 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9999.9999d) + "'", double26 == (-9999.9999d));
    org.junit.Assert.assertNotNull(wildcardClass27);
  }

  @Test
  public void test01572() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01572");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtmAvg();
    double double11 = quarterlyDouble4.getTtmAvg();
    double double12 = quarterlyDouble4.getTtmAvg();
    double double13 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str15 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
  }

  @Test
  public void test01573() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01573");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtm();
    double double23 = quarterlyDouble20.get((int) '4');
    double[] doubleArray27 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    double[] doubleArray29 = quarterlyDouble28.dArr;
    double double30 = quarterlyDouble28.getQseqQ();
    double[] doubleArray31 = new double[] {};
    quarterlyDouble28.dArr = doubleArray31;
    quarterlyDouble20.dArr = doubleArray31;
    double[] doubleArray34 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray34;
    double[] doubleArray36 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double37 = quarterlyDouble4.getMostRecent();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-9999.9999d) + "'", double23 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5100.0d + "'", double30 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
    org.junit.Assert.assertNotNull(doubleArray36);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
  }

  @Test
  public void test01574() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01574");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double[] doubleArray15 = quarterlyDouble14.dArr;
    double[] doubleArray16 = quarterlyDouble14.dArr;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtm();
    double double23 = quarterlyDouble21.getQseqQ();
    double[] doubleArray24 = quarterlyDouble21.dArr;
    double double25 = quarterlyDouble21.getQseqQ();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble21.dArr = doubleArray29;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble14.dArr = doubleArray29;
    quarterlyDouble4.dArr = doubleArray29;
    double[] doubleArray36 = null;
    quarterlyDouble4.dArr = doubleArray36;
    double double38 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double39 = quarterlyDouble4.getQseqQ();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
  }

  @Test
  public void test01575() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01575");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getTtmAvg();
    double double7 = quarterlyDouble5.getMostRecent();
    double double10 = quarterlyDouble5.deltaQ((int) (short) 1, 0);
    double double11 = quarterlyDouble5.getTtmAvg();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
  }

  @Test
  public void test01576() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01576");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str9 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
  }

  @Test
  public void test01577() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01577");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 0, (int) (byte) 100);
  }

  @Test
  public void test01578() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01578");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) 1, (int) '#');
  }

  @Test
  public void test01579() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01579");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double[] doubleArray8 = quarterlyDouble4.dArr;
    double double11 = quarterlyDouble4.deltaQ((int) (byte) 100, (int) (byte) 100);
    double double12 = quarterlyDouble4.getMostRecent();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
  }

  @Test
  public void test01580() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01580");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) 'a', (int) 'a');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01581() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01581");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble9 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double10 = quarterlyDouble9.getTtmAvg();
    double double11 = quarterlyDouble9.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str13 = quarterlyDouble9.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5100.0d + "'", double11 == 5100.0d);
  }

  @Test
  public void test01582() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01582");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getTtm();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double17 = quarterlyDouble14.get((int) '4');
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double double24 = quarterlyDouble22.getQseqQ();
    double[] doubleArray25 = new double[] {};
    quarterlyDouble22.dArr = doubleArray25;
    quarterlyDouble14.dArr = doubleArray25;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble28.dArr = doubleArray44;
    quarterlyDouble8.dArr = doubleArray44;
    double[] doubleArray50 = quarterlyDouble8.dArr;
    double[] doubleArray51 = quarterlyDouble8.dArr;
    double double52 = quarterlyDouble8.getTtm();
    double double55 = quarterlyDouble8.deltaQ((-1), (int) (short) -1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str57 = quarterlyDouble8.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
  }

  @Test
  public void test01583() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01583");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    double double10 = quarterlyDouble4.get((int) (byte) -1);
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double16 = quarterlyDouble15.getTtm();
    double double17 = quarterlyDouble15.getQseqQ();
    double[] doubleArray18 = quarterlyDouble15.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    quarterlyDouble4.dArr = doubleArray18;
    double double23 = quarterlyDouble4.deltaQ((int) (byte) 100, 0);
    double double24 = quarterlyDouble4.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str26 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
  }

  @Test
  public void test01584() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01584");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    double double17 = quarterlyDouble4.getTtmAvg();
    double double20 = quarterlyDouble4.deltaQ(10, (int) (byte) 0);
    // The following exception was thrown during execution in test generation
    try {
      double double21 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
  }

  @Test
  public void test01585() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01585");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getTtmAvg();
    double double18 = quarterlyDouble5.getQseqQ();
    double[] doubleArray19 = quarterlyDouble5.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double20 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01586() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01586");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getTtm();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double12 = quarterlyDouble11.getTtm();
    double double14 = quarterlyDouble11.get((int) '4');
    double[] doubleArray18 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double[] doubleArray20 = quarterlyDouble19.dArr;
    double double21 = quarterlyDouble19.getQseqQ();
    double[] doubleArray22 = new double[] {};
    quarterlyDouble19.dArr = doubleArray22;
    quarterlyDouble11.dArr = doubleArray22;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double double31 = quarterlyDouble30.getTtm();
    double double33 = quarterlyDouble30.get((int) '4');
    double[] doubleArray37 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    double[] doubleArray39 = quarterlyDouble38.dArr;
    double double40 = quarterlyDouble38.getQseqQ();
    double[] doubleArray41 = new double[] {};
    quarterlyDouble38.dArr = doubleArray41;
    quarterlyDouble30.dArr = doubleArray41;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    quarterlyDouble25.dArr = doubleArray41;
    double[] doubleArray46 = quarterlyDouble25.dArr;
    quarterlyDouble4.dArr = doubleArray46;
    double[] doubleArray51 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble52 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray51);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray51);
    double[] doubleArray57 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble58 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray57);
    double double59 = quarterlyDouble58.getTtm();
    double double61 = quarterlyDouble58.get((int) '4');
    double double64 = quarterlyDouble58.deltaQ((int) (short) 1, 0);
    double[] doubleArray68 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble69 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray68);
    double double70 = quarterlyDouble69.getTtm();
    double double71 = quarterlyDouble69.getQseqQ();
    double[] doubleArray72 = quarterlyDouble69.dArr;
    quarterlyDouble58.dArr = doubleArray72;
    quarterlyDouble53.dArr = doubleArray72;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble75 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray72);
    quarterlyDouble4.dArr = doubleArray72;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str78 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5100.0d + "'", double21 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-9999.9999d) + "'", double33 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
    org.junit.Assert.assertNotNull(doubleArray46);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray57);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
    org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-9999.9999d) + "'", double61 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray68);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
    org.junit.Assert.assertTrue("'" + double71 + "' != '" + 5100.0d + "'", double71 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray72);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01587() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01587");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    double double10 = quarterlyDouble4.get((int) (byte) -1);
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double16 = quarterlyDouble15.getTtm();
    double double17 = quarterlyDouble15.getQseqQ();
    double[] doubleArray18 = quarterlyDouble15.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    quarterlyDouble4.dArr = doubleArray18;
    double double21 = quarterlyDouble4.getMostRecent();
    double[] doubleArray25 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble27 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double double29 = quarterlyDouble27.get(10);
    double double30 = quarterlyDouble27.getMostRecent();
    double[] doubleArray31 = quarterlyDouble27.dArr;
    quarterlyDouble4.dArr = doubleArray31;
    double double33 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      double double34 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-9999.9999d) + "'", double29 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
  }

  @Test
  public void test01588() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01588");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double double10 = quarterlyDouble4.deltaQ((int) (short) 1, 0);
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double16 = quarterlyDouble15.getTtm();
    double double17 = quarterlyDouble15.getQseqQ();
    double[] doubleArray18 = quarterlyDouble15.dArr;
    quarterlyDouble4.dArr = doubleArray18;
    double double20 = quarterlyDouble4.getTtm();
    double double22 = quarterlyDouble4.get((int) (byte) 1);
    double double24 = quarterlyDouble4.get((int) '4');
    // The following exception was thrown during execution in test generation
    try {
      double double25 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9999.9999d) + "'", double24 == (-9999.9999d));
  }

  @Test
  public void test01589() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01589");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get(1);
    double double15 = quarterlyDouble4.get((int) 'a');
    double double17 = quarterlyDouble4.get((int) (byte) 100);
    double double18 = quarterlyDouble4.getQseqQ();
    double double20 = quarterlyDouble4.get((int) (short) 1);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-9999.9999d) + "'", double15 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
  }

  @Test
  public void test01590() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01590");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double double8 = quarterlyDouble5.getMostRecent();
    double double10 = quarterlyDouble5.get((int) (byte) -1);
    double double11 = quarterlyDouble5.getTtm();
    double double12 = quarterlyDouble5.getTtmAvg();
    double double13 = quarterlyDouble5.getQseqQ();
    double double14 = quarterlyDouble5.getQseqQ();
    double double15 = quarterlyDouble5.getTtm();
    double double16 = quarterlyDouble5.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str18 = quarterlyDouble5.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
  }

  @Test
  public void test01591() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01591");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(10, (int) (short) 0);
  }

  @Test
  public void test01592() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01592");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("hi!");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData6 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList3, 10, 10);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData9 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList3, (int) 'a', (int) (short) 0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData12 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList3, (int) ' ', (int) (byte) 1);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNull(fieldData6);
    org.junit.Assert.assertNull(fieldData9);
    org.junit.Assert.assertNull(fieldData12);
  }

  @Test
  public void test01593() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01593");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double12 = quarterlyDouble4.deltaQ(0, (int) (short) 0);
    double double14 = quarterlyDouble4.get(100);
    // The following exception was thrown during execution in test generation
    try {
      double double15 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
  }

  @Test
  public void test01594() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01594");
    double[] doubleArray0 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble1 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray0);
    double[] doubleArray5 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble6 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray5);
    double double7 = quarterlyDouble6.getTtm();
    double double8 = quarterlyDouble6.getQseqQ();
    double[] doubleArray9 = quarterlyDouble6.dArr;
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    quarterlyDouble6.dArr = doubleArray13;
    double[] doubleArray16 = quarterlyDouble6.dArr;
    quarterlyDouble1.dArr = doubleArray16;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double double19 = quarterlyDouble18.getQseqQ();
    java.lang.Class<?> wildcardClass20 = quarterlyDouble18.getClass();
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5100.0d + "'", double19 == 5100.0d);
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test01595() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01595");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double10 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
  }

  @Test
  public void test01596() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01596");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (short) 1, (-1));
  }

  @Test
  public void test01597() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01597");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double double16 = quarterlyDouble4.getQseqQ();
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double24 = quarterlyDouble22.get(100);
    double[] doubleArray25 = quarterlyDouble22.dArr;
    double double28 = quarterlyDouble22.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    double[] doubleArray47 = quarterlyDouble33.dArr;
    quarterlyDouble22.dArr = doubleArray47;
    quarterlyDouble4.dArr = doubleArray47;
    java.lang.Class<?> wildcardClass50 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9999.9999d) + "'", double24 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
    org.junit.Assert.assertNotNull(wildcardClass50);
  }

  @Test
  public void test01598() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01598");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.lang.String str4 = companyData1.getTicker();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData9 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList6, (int) (short) 100, 0);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Class<?> wildcardClass10 = fieldData9.getClass();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNull(fieldData9);
  }

  @Test
  public void test01599() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01599");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    double[] doubleArray18 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    // The following exception was thrown during execution in test generation
    try {
      double double22 = quarterlyDouble21.getMostRecent();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
  }

  @Test
  public void test01600() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01600");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.lang.String str6 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.String str8 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList9 = companyData1.getFdList();
    java.lang.Class<?> wildcardClass10 = companyData1.getClass();
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    org.junit.Assert.assertNotNull(fieldDataList9);
    org.junit.Assert.assertNotNull(wildcardClass10);
  }

  @Test
  public void test01601() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01601");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (byte) 10, (int) (byte) 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01602() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01602");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", 0, (int) (short) 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01603() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01603");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.lang.String str2 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData6 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList3, (int) (byte) 1, (int) (short) 1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Class<?> wildcardClass7 = fieldData6.getClass();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNull(fieldData6);
  }

  @Test
  public void test01604() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01604");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) 'a', 10);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01605() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01605");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double[] doubleArray27 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    double double31 = quarterlyDouble29.get(100);
    double[] doubleArray32 = quarterlyDouble29.dArr;
    quarterlyDouble22.dArr = doubleArray32;
    quarterlyDouble4.dArr = doubleArray32;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double37 = quarterlyDouble35.get((int) (byte) 100);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str39 = quarterlyDouble35.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9999.9999d) + "'", double31 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-9999.9999d) + "'", double37 == (-9999.9999d));
  }

  @Test
  public void test01606() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01606");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("hi!");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.lang.String str4 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList5 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData8 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList5, (int) '#', (int) (byte) 1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData11 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList5, (int) (short) 100, (int) (short) -1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData14 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList5, (-1), (int) (byte) 1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData17 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList5, (-1), (int) 'a');
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    org.junit.Assert.assertNotNull(fieldDataList5);
    org.junit.Assert.assertNull(fieldData8);
    org.junit.Assert.assertNull(fieldData11);
    org.junit.Assert.assertNull(fieldData14);
    org.junit.Assert.assertNull(fieldData17);
  }

  @Test
  public void test01607() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01607");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double double8 = quarterlyDouble5.getMostRecent();
    double double10 = quarterlyDouble5.get((int) (byte) -1);
    double double11 = quarterlyDouble5.getTtm();
    double double12 = quarterlyDouble5.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double13 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
  }

  @Test
  public void test01608() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01608");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double double16 = quarterlyDouble4.getTtm();
    double double18 = quarterlyDouble4.get(1);
    double double21 = quarterlyDouble4.deltaQ(1, (int) (short) -1);
    double double22 = quarterlyDouble4.getMostRecent();
    double double25 = quarterlyDouble4.deltaQ((int) (byte) -1, (int) (byte) 1);
    double double26 = quarterlyDouble4.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str28 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
  }

  @Test
  public void test01609() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01609");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double13 = quarterlyDouble12.getTtm();
    double double16 = quarterlyDouble12.deltaQ((int) (byte) 1, (int) (byte) -1);
    double double17 = quarterlyDouble12.getQseqQ();
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double double23 = quarterlyDouble22.getTtmAvg();
    double double24 = quarterlyDouble22.getTtm();
    double double25 = quarterlyDouble22.getTtmAvg();
    double double27 = quarterlyDouble22.get((int) (byte) 100);
    double[] doubleArray28 = quarterlyDouble22.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    double[] doubleArray33 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray33);
    double double35 = quarterlyDouble34.getTtmAvg();
    double double36 = quarterlyDouble34.getMostRecent();
    double double37 = quarterlyDouble34.getTtm();
    double[] doubleArray38 = quarterlyDouble34.dArr;
    quarterlyDouble29.dArr = doubleArray38;
    quarterlyDouble12.dArr = doubleArray38;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str42 = quarterlyDouble12.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9999.9999d) + "'", double27 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray33);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray38);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01610() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01610");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (short) 10);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str11 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
  }

  @Test
  public void test01611() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01611");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double12 = quarterlyDouble11.getTtmAvg();
    double double13 = quarterlyDouble11.getQseqQ();
    double[] doubleArray17 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    double double21 = quarterlyDouble19.get(100);
    double[] doubleArray22 = quarterlyDouble19.dArr;
    double double25 = quarterlyDouble19.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double double31 = quarterlyDouble30.getTtm();
    double double33 = quarterlyDouble30.get((int) '4');
    double[] doubleArray37 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    double[] doubleArray39 = quarterlyDouble38.dArr;
    double double40 = quarterlyDouble38.getQseqQ();
    double[] doubleArray41 = new double[] {};
    quarterlyDouble38.dArr = doubleArray41;
    quarterlyDouble30.dArr = doubleArray41;
    double[] doubleArray44 = quarterlyDouble30.dArr;
    quarterlyDouble19.dArr = doubleArray44;
    quarterlyDouble11.dArr = doubleArray44;
    double double48 = quarterlyDouble11.get((int) (short) 100);
    double[] doubleArray52 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    double double54 = quarterlyDouble53.getTtmAvg();
    double double55 = quarterlyDouble53.getMostRecent();
    double double57 = quarterlyDouble53.get((int) 'a');
    double double59 = quarterlyDouble53.get((int) (byte) -1);
    double[] doubleArray63 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble64 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray63);
    double double65 = quarterlyDouble64.getTtm();
    double double66 = quarterlyDouble64.getQseqQ();
    double[] doubleArray67 = quarterlyDouble64.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble68 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray67);
    quarterlyDouble53.dArr = doubleArray67;
    double double70 = quarterlyDouble53.getMostRecent();
    double[] doubleArray74 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble75 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray74);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble76 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray74);
    double double78 = quarterlyDouble76.get(10);
    double double79 = quarterlyDouble76.getMostRecent();
    double[] doubleArray80 = quarterlyDouble76.dArr;
    quarterlyDouble53.dArr = doubleArray80;
    quarterlyDouble11.dArr = doubleArray80;
    double double83 = quarterlyDouble11.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str85 = quarterlyDouble11.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-9999.9999d) + "'", double21 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-9999.9999d) + "'", double33 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-9999.9999d) + "'", double48 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 52.0d + "'", double55 == 52.0d);
    org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-9999.9999d) + "'", double57 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-9999.9999d) + "'", double59 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray63);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5100.0d + "'", double66 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray67);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double70 + "' != '" + 52.0d + "'", double70 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray74);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-9999.9999d) + "'", double78 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double79 + "' != '" + 52.0d + "'", double79 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray80);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double83 + "' != '" + 5100.0d + "'", double83 == 5100.0d);
  }

  @Test
  public void test01612() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01612");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) 'a', (int) (short) -1);
  }

  @Test
  public void test01613() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01613");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.lang.String str4 = companyData1.getTicker();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData9 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList6, (int) '4', (int) '#');
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData12 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList6, (int) (short) -1, (int) ' ');
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNull(fieldData9);
    org.junit.Assert.assertNull(fieldData12);
  }

  @Test
  public void test01614() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01614");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double26 = quarterlyDouble23.get((int) '4');
    double[] doubleArray30 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    double[] doubleArray32 = quarterlyDouble31.dArr;
    double double33 = quarterlyDouble31.getQseqQ();
    double[] doubleArray34 = new double[] {};
    quarterlyDouble31.dArr = doubleArray34;
    quarterlyDouble23.dArr = doubleArray34;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble37 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    quarterlyDouble18.dArr = doubleArray34;
    double[] doubleArray42 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble43 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray42);
    double[] doubleArray44 = quarterlyDouble43.dArr;
    double[] doubleArray45 = quarterlyDouble43.dArr;
    quarterlyDouble18.dArr = doubleArray45;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray45);
    double double49 = quarterlyDouble47.get(10);
    java.lang.Class<?> wildcardClass50 = quarterlyDouble47.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9999.9999d) + "'", double26 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5100.0d + "'", double33 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray45);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-9999.9999d) + "'", double49 == (-9999.9999d));
    org.junit.Assert.assertNotNull(wildcardClass50);
  }

  @Test
  public void test01615() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01615");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    // The following exception was thrown during execution in test generation
    try {
      double double14 = quarterlyDouble13.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01616() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01616");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double double10 = quarterlyDouble8.getMostRecent();
    double[] doubleArray11 = quarterlyDouble8.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    // The following exception was thrown during execution in test generation
    try {
      double double15 = quarterlyDouble14.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01617() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01617");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double[] doubleArray14 = quarterlyDouble4.dArr;
    double[] doubleArray18 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double double20 = quarterlyDouble19.getTtmAvg();
    double double21 = quarterlyDouble19.getTtm();
    double double22 = quarterlyDouble19.getMostRecent();
    double double23 = quarterlyDouble19.getTtmAvg();
    double double24 = quarterlyDouble19.getMostRecent();
    double[] doubleArray28 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    double[] doubleArray30 = quarterlyDouble29.dArr;
    double[] doubleArray31 = quarterlyDouble29.dArr;
    double[] doubleArray35 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble36 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray35);
    double double37 = quarterlyDouble36.getTtm();
    double double38 = quarterlyDouble36.getQseqQ();
    double[] doubleArray39 = quarterlyDouble36.dArr;
    double double40 = quarterlyDouble36.getQseqQ();
    double[] doubleArray44 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble45 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble46 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble36.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble48 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble29.dArr = doubleArray44;
    quarterlyDouble19.dArr = doubleArray44;
    quarterlyDouble4.dArr = doubleArray44;
    // The following exception was thrown during execution in test generation
    try {
      double double54 = quarterlyDouble4.deltaQ(0, (int) (short) 10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray35);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5100.0d + "'", double38 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01618() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01618");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double19 = quarterlyDouble18.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double20 = quarterlyDouble18.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
  }

  @Test
  public void test01619() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01619");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (-1), 1);
  }

  @Test
  public void test01620() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01620");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) ' ', (int) (byte) 10);
  }

  @Test
  public void test01621() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01621");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get(10);
    double double14 = quarterlyDouble4.getQseqQ();
    double double15 = quarterlyDouble4.getQseqQ();
    double double17 = quarterlyDouble4.get((int) (short) -1);
    double double18 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
  }

  @Test
  public void test01622() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01622");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!", 0,
        (-1));
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01623() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01623");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, 1);
    double double17 = quarterlyDouble4.getQseqQ();
    double double18 = quarterlyDouble4.getTtmAvg();
    double double19 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray23 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray23);
    double double25 = quarterlyDouble24.getTtm();
    double double26 = quarterlyDouble24.getQseqQ();
    double[] doubleArray27 = quarterlyDouble24.dArr;
    double double28 = quarterlyDouble24.getQseqQ();
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    quarterlyDouble24.dArr = doubleArray32;
    double[] doubleArray39 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray39);
    double[] doubleArray41 = quarterlyDouble40.dArr;
    double[] doubleArray42 = quarterlyDouble40.dArr;
    quarterlyDouble24.dArr = doubleArray42;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray42);
    quarterlyDouble4.dArr = doubleArray42;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str47 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5100.0d + "'", double26 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 5100.0d + "'", double28 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01624() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01624");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str8 = quarterlyDouble5.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01625() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01625");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getQseqQ();
    double double12 = quarterlyDouble4.deltaQ((-1), (int) (byte) -1);
    double double13 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      double double14 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
  }

  @Test
  public void test01626() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01626");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double[] doubleArray16 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double double18 = quarterlyDouble17.getTtm();
    double double19 = quarterlyDouble17.getQseqQ();
    double[] doubleArray20 = quarterlyDouble17.dArr;
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    quarterlyDouble17.dArr = doubleArray24;
    double double27 = quarterlyDouble17.getTtm();
    double[] doubleArray28 = quarterlyDouble17.dArr;
    double double29 = quarterlyDouble17.getTtm();
    double[] doubleArray30 = quarterlyDouble17.dArr;
    quarterlyDouble4.dArr = doubleArray30;
    double double32 = quarterlyDouble4.getMostRecent();
    double double34 = quarterlyDouble4.get((int) (byte) -1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str36 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5100.0d + "'", double19 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-9999.9999d) + "'", double34 == (-9999.9999d));
  }

  @Test
  public void test01627() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01627");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 100, (int) ' ');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (-1), (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList15 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) -1, (int) (short) 1);
    java.lang.Class<?> wildcardClass16 = companyDataList15.getClass();
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(companyDataList12);
    org.junit.Assert.assertNotNull(companyDataList15);
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test01628() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01628");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) '#', 10);
  }

  @Test
  public void test01629() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01629");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble4.deltaQ((int) (short) 10, (int) (short) 100);
    double double9 = quarterlyDouble4.get((int) (byte) 0);
    java.lang.Class<?> wildcardClass10 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    org.junit.Assert.assertNotNull(wildcardClass10);
  }

  @Test
  public void test01630() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01630");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) ' ');
    double double10 = quarterlyDouble4.getMostRecent();
    double double12 = quarterlyDouble4.get(10);
    double double15 = quarterlyDouble4.deltaQ(10, (int) (short) -1);
    double double16 = quarterlyDouble4.getMostRecent();
    double double17 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray18 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    // The following exception was thrown during execution in test generation
    try {
      double double20 = quarterlyDouble19.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9999.9999d) + "'", double12 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01631() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01631");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray9 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    // The following exception was thrown during execution in test generation
    try {
      double double11 = quarterlyDouble10.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01632() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01632");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double[] doubleArray8 = quarterlyDouble4.dArr;
    double double11 = quarterlyDouble4.deltaQ((int) (byte) 100, (int) (byte) 100);
    double double12 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double13 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
  }

  @Test
  public void test01633() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01633");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (short) 0, (int) (byte) 10);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01634() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01634");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double8 = quarterlyDouble5.deltaQ((int) (short) 10, (int) ' ');
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double14 = quarterlyDouble13.getTtm();
    double double16 = quarterlyDouble13.get((int) '4');
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double[] doubleArray22 = quarterlyDouble21.dArr;
    double double23 = quarterlyDouble21.getQseqQ();
    double[] doubleArray24 = new double[] {};
    quarterlyDouble21.dArr = doubleArray24;
    quarterlyDouble13.dArr = doubleArray24;
    double[] doubleArray27 = quarterlyDouble13.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    double[] doubleArray33 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray33);
    double double35 = quarterlyDouble34.getTtm();
    double double36 = quarterlyDouble34.getQseqQ();
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    quarterlyDouble34.dArr = doubleArray40;
    double double43 = quarterlyDouble34.getQseqQ();
    double double46 = quarterlyDouble34.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray50 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble51 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray50);
    double double52 = quarterlyDouble51.getTtmAvg();
    double double53 = quarterlyDouble51.getMostRecent();
    double double55 = quarterlyDouble51.get((int) 'a');
    double double57 = quarterlyDouble51.get((int) (byte) -1);
    double[] doubleArray61 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble62 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray61);
    double double63 = quarterlyDouble62.getTtm();
    double double64 = quarterlyDouble62.getQseqQ();
    double[] doubleArray65 = quarterlyDouble62.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble66 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    quarterlyDouble51.dArr = doubleArray65;
    quarterlyDouble34.dArr = doubleArray65;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble69 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    quarterlyDouble29.dArr = doubleArray65;
    quarterlyDouble5.dArr = doubleArray65;
    double double72 = quarterlyDouble5.getMostRecent();
    double double73 = quarterlyDouble5.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str75 = quarterlyDouble5.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9999.9999d) + "'", double16 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
    org.junit.Assert.assertNotNull(doubleArray33);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5100.0d + "'", double36 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-9999.9999d) + "'", double55 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-9999.9999d) + "'", double57 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray61);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    org.junit.Assert.assertTrue("'" + double64 + "' != '" + 5100.0d + "'", double64 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray65);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double72 + "' != '" + 52.0d + "'", double72 == 52.0d);
    org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
  }

  @Test
  public void test01635() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01635");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getTtm();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double12 = quarterlyDouble11.getTtm();
    double double14 = quarterlyDouble11.get((int) '4');
    double[] doubleArray18 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double[] doubleArray20 = quarterlyDouble19.dArr;
    double double21 = quarterlyDouble19.getQseqQ();
    double[] doubleArray22 = new double[] {};
    quarterlyDouble19.dArr = doubleArray22;
    quarterlyDouble11.dArr = doubleArray22;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double double31 = quarterlyDouble30.getTtm();
    double double33 = quarterlyDouble30.get((int) '4');
    double[] doubleArray37 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    double[] doubleArray39 = quarterlyDouble38.dArr;
    double double40 = quarterlyDouble38.getQseqQ();
    double[] doubleArray41 = new double[] {};
    quarterlyDouble38.dArr = doubleArray41;
    quarterlyDouble30.dArr = doubleArray41;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    quarterlyDouble25.dArr = doubleArray41;
    double[] doubleArray46 = quarterlyDouble25.dArr;
    quarterlyDouble4.dArr = doubleArray46;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble48 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray46);
    double double49 = quarterlyDouble48.getTtm();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5100.0d + "'", double21 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-9999.9999d) + "'", double33 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
    org.junit.Assert.assertNotNull(doubleArray46);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
    org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
  }

  @Test
  public void test01636() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01636");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("", 1,
        (int) (short) 10);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01637() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01637");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("hi!");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.lang.String str3 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList5 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.Class<?> wildcardClass8 = companyData1.getClass();
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertNotNull(fieldDataList5);
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertNotNull(wildcardClass8);
  }

  @Test
  public void test01638() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01638");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtmAvg();
    double double11 = quarterlyDouble4.getTtmAvg();
    double double12 = quarterlyDouble4.getTtmAvg();
    double double13 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str15 = quarterlyDouble4.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
  }

  @Test
  public void test01639() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01639");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 10, 0);
  }

  @Test
  public void test01640() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01640");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(1, (int) '4');
  }

  @Test
  public void test01641() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01641");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getTtmAvg();
    double double18 = quarterlyDouble5.getQseqQ();
    double double21 = quarterlyDouble5.deltaQ((int) (byte) 10, (int) (byte) 100);
    double double22 = quarterlyDouble5.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double23 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
  }

  @Test
  public void test01642() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01642");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (byte) -1, (int) (byte) -1);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01643() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01643");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double double8 = quarterlyDouble5.getMostRecent();
    double double10 = quarterlyDouble5.get((int) (byte) -1);
    double double11 = quarterlyDouble5.getTtm();
    double double12 = quarterlyDouble5.getTtmAvg();
    double double13 = quarterlyDouble5.getQseqQ();
    double double14 = quarterlyDouble5.getQseqQ();
    double double15 = quarterlyDouble5.getTtm();
    double[] doubleArray16 = quarterlyDouble5.dArr;
    double[] doubleArray17 = quarterlyDouble5.dArr;
    double double18 = quarterlyDouble5.getTtm();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
  }

  @Test
  public void test01644() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01644");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.lang.String str2 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.lang.String str4 = companyData1.getTicker();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.lang.String str7 = companyData1.getTicker();
    java.lang.String str8 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList9 = companyData1.getFdList();
    java.lang.String str10 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList11 = companyData1.getFdList();
    java.lang.Class<?> wildcardClass12 = companyData1.getClass();
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    org.junit.Assert.assertNotNull(fieldDataList9);
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    org.junit.Assert.assertNotNull(fieldDataList11);
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test01645() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01645");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double double13 = quarterlyDouble4.getQseqQ();
    java.lang.Class<?> wildcardClass14 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test01646() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01646");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getQseqQ();
    double double10 = quarterlyDouble4.getQseqQ();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double14 = quarterlyDouble4.deltaQ((int) (short) 0, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5100.0d + "'", double10 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01647() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01647");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) '4', (int) '#');
    org.junit.Assert.assertNotNull(strList2);
  }

  @Test
  public void test01648() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01648");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double double16 = quarterlyDouble4.getTtm();
    double double18 = quarterlyDouble4.get(1);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double27 = quarterlyDouble24.deltaQ((int) (short) 10, (int) ' ');
    double[] doubleArray31 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble32 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    double double33 = quarterlyDouble32.getTtm();
    double double35 = quarterlyDouble32.get((int) '4');
    double[] doubleArray39 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray39);
    double[] doubleArray41 = quarterlyDouble40.dArr;
    double double42 = quarterlyDouble40.getQseqQ();
    double[] doubleArray43 = new double[] {};
    quarterlyDouble40.dArr = doubleArray43;
    quarterlyDouble32.dArr = doubleArray43;
    double[] doubleArray46 = quarterlyDouble32.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray46);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble48 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray46);
    double[] doubleArray52 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    double double54 = quarterlyDouble53.getTtm();
    double double55 = quarterlyDouble53.getQseqQ();
    double[] doubleArray59 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble60 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray59);
    quarterlyDouble53.dArr = doubleArray59;
    double double62 = quarterlyDouble53.getQseqQ();
    double double65 = quarterlyDouble53.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray69 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble70 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray69);
    double double71 = quarterlyDouble70.getTtmAvg();
    double double72 = quarterlyDouble70.getMostRecent();
    double double74 = quarterlyDouble70.get((int) 'a');
    double double76 = quarterlyDouble70.get((int) (byte) -1);
    double[] doubleArray80 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble81 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray80);
    double double82 = quarterlyDouble81.getTtm();
    double double83 = quarterlyDouble81.getQseqQ();
    double[] doubleArray84 = quarterlyDouble81.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble85 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray84);
    quarterlyDouble70.dArr = doubleArray84;
    quarterlyDouble53.dArr = doubleArray84;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble88 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray84);
    quarterlyDouble48.dArr = doubleArray84;
    quarterlyDouble24.dArr = doubleArray84;
    quarterlyDouble4.dArr = doubleArray84;
    double double93 = quarterlyDouble4.get(0);
    double double94 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str96 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-9999.9999d) + "'", double35 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double42 + "' != '" + 5100.0d + "'", double42 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
    org.junit.Assert.assertNotNull(doubleArray46);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5100.0d + "'", double55 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray59);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double62 + "' != '" + 5100.0d + "'", double62 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray69);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
    org.junit.Assert.assertTrue("'" + double72 + "' != '" + 52.0d + "'", double72 == 52.0d);
    org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-9999.9999d) + "'", double74 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-9999.9999d) + "'", double76 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray80);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
    org.junit.Assert.assertTrue("'" + double83 + "' != '" + 5100.0d + "'", double83 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray84);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
    org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
  }

  @Test
  public void test01649() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01649");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray17 = quarterlyDouble4.dArr;
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double double23 = quarterlyDouble22.getTtmAvg();
    double double24 = quarterlyDouble22.getTtm();
    double double25 = quarterlyDouble22.getTtmAvg();
    double double27 = quarterlyDouble22.get((int) (byte) 100);
    double[] doubleArray28 = quarterlyDouble22.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    quarterlyDouble4.dArr = doubleArray28;
    double double34 = quarterlyDouble4.deltaQ((int) (byte) 100, (int) (byte) 1);
    double double37 = quarterlyDouble4.deltaQ((int) (byte) 0, 0);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str39 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9999.9999d) + "'", double27 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
  }

  @Test
  public void test01650() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01650");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double[] doubleArray6 = quarterlyDouble4.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double12 = quarterlyDouble11.getTtm();
    double double13 = quarterlyDouble11.getQseqQ();
    double[] doubleArray14 = quarterlyDouble11.dArr;
    double double15 = quarterlyDouble11.getQseqQ();
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    quarterlyDouble11.dArr = doubleArray19;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    quarterlyDouble4.dArr = doubleArray19;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double26 = quarterlyDouble25.getTtmAvg();
    double double27 = quarterlyDouble25.getTtm();
    double double28 = quarterlyDouble25.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double29 = quarterlyDouble25.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
  }

  @Test
  public void test01651() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01651");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, 1);
    double double17 = quarterlyDouble4.getQseqQ();
    double double20 = quarterlyDouble4.deltaQ((int) (byte) 10, (int) (byte) 100);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str22 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
  }

  @Test
  public void test01652() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01652");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    double[] doubleArray18 = quarterlyDouble4.dArr;
    double double21 = quarterlyDouble4.deltaQ(1, 0);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str23 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
  }

  @Test
  public void test01653() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01653");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList15 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList16 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.lang.Class<?> wildcardClass18 = manyCompanyDataList17.getClass();
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(manyCompanyDataList11);
    org.junit.Assert.assertNotNull(manyCompanyDataList12);
    org.junit.Assert.assertNotNull(companyDataList15);
    org.junit.Assert.assertNotNull(manyCompanyDataList16);
    org.junit.Assert.assertNotNull(manyCompanyDataList17);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test01654() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01654");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("", (-1),
        (int) (byte) 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01655() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01655");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtm();
    double double23 = quarterlyDouble21.getQseqQ();
    double[] doubleArray24 = quarterlyDouble21.dArr;
    double double25 = quarterlyDouble21.getQseqQ();
    double double26 = quarterlyDouble21.getQseqQ();
    double double27 = quarterlyDouble21.getQseqQ();
    double[] doubleArray28 = quarterlyDouble21.dArr;
    quarterlyDouble5.dArr = doubleArray28;
    double double31 = quarterlyDouble5.get((int) (byte) -1);
    double double32 = quarterlyDouble5.getMostRecent();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5100.0d + "'", double26 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5100.0d + "'", double27 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9999.9999d) + "'", double31 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
  }

  @Test
  public void test01656() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01656");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList0 = null;
    // The following exception was thrown during execution in test generation
    try {
      net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
          .getFieldData(fieldDataList0, (int) (byte) -1, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
  }

  @Test
  public void test01657() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01657");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) (byte) 0, (int) '4');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01658() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01658");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!", 10,
        (-1));
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01659() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01659");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getTtmAvg();
    double double18 = quarterlyDouble5.getQseqQ();
    double double21 = quarterlyDouble5.deltaQ((int) (byte) 10, (int) (byte) 100);
    double[] doubleArray25 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double double27 = quarterlyDouble26.getTtm();
    double double28 = quarterlyDouble26.getQseqQ();
    double[] doubleArray29 = quarterlyDouble26.dArr;
    double[] doubleArray33 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray33);
    quarterlyDouble26.dArr = doubleArray33;
    double double36 = quarterlyDouble26.getTtm();
    double[] doubleArray37 = quarterlyDouble26.dArr;
    quarterlyDouble5.dArr = doubleArray37;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str40 = quarterlyDouble5.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 5100.0d + "'", double28 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray33);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01660() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01660");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) ' ', (int) '#');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01661() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01661");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get(10);
    double double14 = quarterlyDouble4.getQseqQ();
    double double17 = quarterlyDouble4.deltaQ(100, (int) (byte) -1);
    double double20 = quarterlyDouble4.deltaQ((int) (short) 0, (-1));
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
  }

  @Test
  public void test01662() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01662");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double15 = quarterlyDouble4.get(1);
    double double16 = quarterlyDouble4.getQseqQ();
    double double17 = quarterlyDouble4.getTtmAvg();
    double double18 = quarterlyDouble4.getTtmAvg();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
  }

  @Test
  public void test01663() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01663");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double double8 = quarterlyDouble5.getMostRecent();
    double double10 = quarterlyDouble5.get((int) (byte) -1);
    double double11 = quarterlyDouble5.getTtm();
    double double12 = quarterlyDouble5.getTtmAvg();
    double double13 = quarterlyDouble5.getQseqQ();
    double double14 = quarterlyDouble5.getQseqQ();
    double[] doubleArray15 = quarterlyDouble5.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str17 = quarterlyDouble5.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01664() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01664");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getTtmAvg();
    double double7 = quarterlyDouble5.getTtmAvg();
    double double8 = quarterlyDouble5.getTtmAvg();
    double[] doubleArray9 = quarterlyDouble5.dArr;
    double double10 = quarterlyDouble5.getQseqQ();
    java.lang.Class<?> wildcardClass11 = quarterlyDouble5.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5100.0d + "'", double10 == 5100.0d);
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test01665() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01665");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double8 = quarterlyDouble4.getMostRecent();
    double double10 = quarterlyDouble4.get((int) '4');
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    quarterlyDouble4.dArr = doubleArray14;
    double[] doubleArray17 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str19 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01666() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01666");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double double16 = quarterlyDouble4.getQseqQ();
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double24 = quarterlyDouble22.get(100);
    double[] doubleArray25 = quarterlyDouble22.dArr;
    double double28 = quarterlyDouble22.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    double[] doubleArray47 = quarterlyDouble33.dArr;
    quarterlyDouble22.dArr = doubleArray47;
    quarterlyDouble4.dArr = doubleArray47;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray47);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble51 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray47);
    double double52 = quarterlyDouble51.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double53 = quarterlyDouble51.getQseqQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9999.9999d) + "'", double24 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
  }

  @Test
  public void test01667() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01667");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) 'a', (int) (short) 10);
  }

  @Test
  public void test01668() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01668");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble7 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray6);
    double double8 = quarterlyDouble7.getMostRecent();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double14 = quarterlyDouble13.getTtm();
    double double15 = quarterlyDouble13.getQseqQ();
    double[] doubleArray16 = quarterlyDouble13.dArr;
    double double17 = quarterlyDouble13.getQseqQ();
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    quarterlyDouble13.dArr = doubleArray21;
    double[] doubleArray25 = quarterlyDouble13.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    quarterlyDouble7.dArr = doubleArray25;
    double double30 = quarterlyDouble7.deltaQ((int) 'a', (int) (short) 100);
    double double31 = quarterlyDouble7.getQseqQ();
    double[] doubleArray32 = quarterlyDouble7.dArr;
    double double35 = quarterlyDouble7.deltaQ((int) (byte) 10, 0);
    double double36 = quarterlyDouble7.getMostRecent();
    double[] doubleArray37 = quarterlyDouble7.dArr;
    double double38 = quarterlyDouble7.getMostRecent();
    java.lang.Class<?> wildcardClass39 = quarterlyDouble7.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5100.0d + "'", double31 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
    org.junit.Assert.assertNotNull(wildcardClass39);
  }

  @Test
  public void test01669() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01669");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double[] doubleArray14 = quarterlyDouble4.dArr;
    double[] doubleArray18 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double double20 = quarterlyDouble19.getTtmAvg();
    double double21 = quarterlyDouble19.getTtm();
    double double22 = quarterlyDouble19.getMostRecent();
    double double23 = quarterlyDouble19.getTtmAvg();
    double double24 = quarterlyDouble19.getMostRecent();
    double[] doubleArray28 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    double[] doubleArray30 = quarterlyDouble29.dArr;
    double[] doubleArray31 = quarterlyDouble29.dArr;
    double[] doubleArray35 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble36 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray35);
    double double37 = quarterlyDouble36.getTtm();
    double double38 = quarterlyDouble36.getQseqQ();
    double[] doubleArray39 = quarterlyDouble36.dArr;
    double double40 = quarterlyDouble36.getQseqQ();
    double[] doubleArray44 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble45 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble46 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble36.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble48 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble29.dArr = doubleArray44;
    quarterlyDouble19.dArr = doubleArray44;
    quarterlyDouble4.dArr = doubleArray44;
    double[] doubleArray52 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    double double54 = quarterlyDouble53.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      double double55 = quarterlyDouble53.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray35);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5100.0d + "'", double38 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + 5100.0d + "'", double54 == 5100.0d);
  }

  @Test
  public void test01670() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01670");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double double12 = quarterlyDouble4.get(0);
    double double13 = quarterlyDouble4.getMostRecent();
    double double14 = quarterlyDouble4.getMostRecent();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double18 = quarterlyDouble17.getMostRecent();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
  }

  @Test
  public void test01671() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01671");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 10, (int) (byte) 100);
  }

  @Test
  public void test01672() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01672");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) -1, 1);
  }

  @Test
  public void test01673() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01673");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, 100, (int) (byte) 10);
  }

  @Test
  public void test01674() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01674");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getTtm();
    double double10 = quarterlyDouble4.getQseqQ();
    double double11 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray12 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str14 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5100.0d + "'", double10 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01675() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01675");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double[] doubleArray16 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double double18 = quarterlyDouble17.getTtm();
    double double19 = quarterlyDouble17.getQseqQ();
    double[] doubleArray20 = quarterlyDouble17.dArr;
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    quarterlyDouble17.dArr = doubleArray24;
    double double27 = quarterlyDouble17.getTtm();
    double[] doubleArray28 = quarterlyDouble17.dArr;
    double double29 = quarterlyDouble17.getTtm();
    double[] doubleArray30 = quarterlyDouble17.dArr;
    quarterlyDouble4.dArr = doubleArray30;
    double double32 = quarterlyDouble4.getMostRecent();
    double double35 = quarterlyDouble4.deltaQ((int) (byte) 10, (int) (byte) 0);
    double double36 = quarterlyDouble4.getQseqQ();
    double[] doubleArray37 = quarterlyDouble4.dArr;
    double[] doubleArray38 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble39 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray38);
    double[] doubleArray43 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray43);
    double double45 = quarterlyDouble44.getTtm();
    double double46 = quarterlyDouble44.getQseqQ();
    double[] doubleArray47 = quarterlyDouble44.dArr;
    double[] doubleArray51 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble52 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray51);
    quarterlyDouble44.dArr = doubleArray51;
    double[] doubleArray54 = quarterlyDouble44.dArr;
    quarterlyDouble39.dArr = doubleArray54;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble56 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray54);
    quarterlyDouble4.dArr = doubleArray54;
    double double60 = quarterlyDouble4.deltaQ((-1), (-1));
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str62 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5100.0d + "'", double19 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5100.0d + "'", double36 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + 5100.0d + "'", double46 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray54);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
  }

  @Test
  public void test01676() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01676");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double double12 = quarterlyDouble8.deltaQ((int) '#', (-1));
    double double13 = quarterlyDouble8.getTtmAvg();
    double double14 = quarterlyDouble8.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str16 = quarterlyDouble8.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
  }

  @Test
  public void test01677() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01677");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (byte) 0, (int) 'a');
  }

  @Test
  public void test01678() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01678");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double double16 = quarterlyDouble4.get((int) (short) 100);
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtmAvg();
    double double23 = quarterlyDouble21.getTtm();
    double double24 = quarterlyDouble21.getTtmAvg();
    double double26 = quarterlyDouble21.get((int) (byte) 100);
    double[] doubleArray27 = quarterlyDouble21.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    quarterlyDouble4.dArr = doubleArray27;
    java.lang.Class<?> wildcardClass31 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9999.9999d) + "'", double16 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9999.9999d) + "'", double26 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass31);
  }

  @Test
  public void test01679() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01679");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray8 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble9 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray8);
    double double10 = quarterlyDouble9.getTtm();
    double double11 = quarterlyDouble9.getQseqQ();
    double[] doubleArray12 = quarterlyDouble9.dArr;
    double double13 = quarterlyDouble9.getQseqQ();
    double[] doubleArray17 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    quarterlyDouble9.dArr = doubleArray17;
    double[] doubleArray21 = quarterlyDouble9.dArr;
    double[] doubleArray25 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble27 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double[] doubleArray28 = quarterlyDouble27.dArr;
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double36 = quarterlyDouble34.get(100);
    double[] doubleArray37 = quarterlyDouble34.dArr;
    quarterlyDouble27.dArr = doubleArray37;
    quarterlyDouble9.dArr = doubleArray37;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    quarterlyDouble4.dArr = doubleArray37;
    // The following exception was thrown during execution in test generation
    try {
      double double42 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5100.0d + "'", double11 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01680() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01680");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double[] doubleArray8 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str10 = quarterlyDouble4.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01681() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01681");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double double18 = quarterlyDouble17.getTtmAvg();
    double double19 = quarterlyDouble17.getTtm();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
  }

  @Test
  public void test01682() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01682");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) '4', (int) ' ');
  }

  @Test
  public void test01683() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01683");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) 'a', (int) (byte) 10);
  }

  @Test
  public void test01684() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01684");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (short) 100, (int) (short) 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01685() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01685");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    double[] doubleArray18 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double double26 = quarterlyDouble25.getTtm();
    double double27 = quarterlyDouble25.getQseqQ();
    double[] doubleArray31 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble32 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    quarterlyDouble25.dArr = doubleArray31;
    double double34 = quarterlyDouble25.getQseqQ();
    double double37 = quarterlyDouble25.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray41 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble42 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    double double43 = quarterlyDouble42.getTtmAvg();
    double double44 = quarterlyDouble42.getMostRecent();
    double double46 = quarterlyDouble42.get((int) 'a');
    double double48 = quarterlyDouble42.get((int) (byte) -1);
    double[] doubleArray52 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    double double54 = quarterlyDouble53.getTtm();
    double double55 = quarterlyDouble53.getQseqQ();
    double[] doubleArray56 = quarterlyDouble53.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble57 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    quarterlyDouble42.dArr = doubleArray56;
    quarterlyDouble25.dArr = doubleArray56;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble60 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    quarterlyDouble20.dArr = doubleArray56;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble62 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble63 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    java.lang.Class<?> wildcardClass64 = quarterlyDouble63.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5100.0d + "'", double27 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5100.0d + "'", double34 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-9999.9999d) + "'", double46 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-9999.9999d) + "'", double48 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5100.0d + "'", double55 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass64);
  }

  @Test
  public void test01686() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01686");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double24 = quarterlyDouble22.get(100);
    double[] doubleArray25 = quarterlyDouble22.dArr;
    quarterlyDouble5.dArr = doubleArray25;
    double double27 = quarterlyDouble5.getTtm();
    double double29 = quarterlyDouble5.get((int) (byte) 10);
    double double30 = quarterlyDouble5.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str32 = quarterlyDouble5.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9999.9999d) + "'", double24 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-9999.9999d) + "'", double29 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
  }

  @Test
  public void test01687() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01687");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, 1, (int) (byte) 0);
  }

  @Test
  public void test01688() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01688");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double[] doubleArray6 = quarterlyDouble4.dArr;
    double double7 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str9 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
  }

  @Test
  public void test01689() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01689");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 100, (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList15 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) 'a', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList18 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) 'a', (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList19 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList20 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList21 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.lang.Class<?> wildcardClass22 = manyCompanyDataList21.getClass();
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(manyCompanyDataList7);
    org.junit.Assert.assertNotNull(manyCompanyDataList8);
    org.junit.Assert.assertNotNull(companyDataList11);
    org.junit.Assert.assertNotNull(manyCompanyDataList12);
    org.junit.Assert.assertNotNull(companyDataList15);
    org.junit.Assert.assertNotNull(companyDataList18);
    org.junit.Assert.assertNotNull(manyCompanyDataList19);
    org.junit.Assert.assertNotNull(manyCompanyDataList20);
    org.junit.Assert.assertNotNull(manyCompanyDataList21);
    org.junit.Assert.assertNotNull(wildcardClass22);
  }

  @Test
  public void test01690() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01690");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.lang.String str6 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList8 = companyData1.getFdList();
    java.lang.String str9 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList10 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList11 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData14 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList11, (int) (byte) 0, (int) (byte) 0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData17 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList11, (int) '4', (int) '#');
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertNotNull(fieldDataList8);
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    org.junit.Assert.assertNotNull(fieldDataList10);
    org.junit.Assert.assertNotNull(fieldDataList11);
    org.junit.Assert.assertNull(fieldData14);
    org.junit.Assert.assertNull(fieldData17);
  }

  @Test
  public void test01691() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01691");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double double10 = quarterlyDouble8.getMostRecent();
    double[] doubleArray11 = quarterlyDouble8.dArr;
    double double12 = quarterlyDouble8.getTtmAvg();
    double double15 = quarterlyDouble8.deltaQ((int) 'a', (-1));
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str17 = quarterlyDouble8.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
  }

  @Test
  public void test01692() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01692");
    java.util.List<java.lang.String> strList0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
          .getCompanies(strList0, 1, (int) ' ');
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
  }

  @Test
  public void test01693() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01693");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!", (-1),
        (int) (short) 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01694() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01694");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtm();
    double double22 = quarterlyDouble20.getQseqQ();
    double[] doubleArray23 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray23;
    double double26 = quarterlyDouble4.get((int) '#');
    double double27 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      double double30 = quarterlyDouble4.deltaQ((int) (short) 0, (int) (short) 10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5100.0d + "'", double22 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9999.9999d) + "'", double26 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
  }

  @Test
  public void test01695() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01695");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (byte) -1, (int) (byte) 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01696() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01696");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.lang.String str6 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList8 = companyData1.getFdList();
    java.lang.String str9 = companyData1.getTicker();
    java.lang.String str10 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList11 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList12 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData15 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList12, (int) (short) 10, (int) (short) 10);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertNotNull(fieldDataList8);
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    org.junit.Assert.assertNotNull(fieldDataList11);
    org.junit.Assert.assertNotNull(fieldDataList12);
    org.junit.Assert.assertNull(fieldData15);
  }

  @Test
  public void test01697() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01697");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtm();
    double double23 = quarterlyDouble21.getQseqQ();
    double[] doubleArray24 = quarterlyDouble21.dArr;
    double double25 = quarterlyDouble21.getQseqQ();
    double double26 = quarterlyDouble21.getQseqQ();
    double double27 = quarterlyDouble21.getQseqQ();
    double[] doubleArray28 = quarterlyDouble21.dArr;
    quarterlyDouble5.dArr = doubleArray28;
    double double31 = quarterlyDouble5.get((int) (byte) -1);
    double double32 = quarterlyDouble5.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str34 = quarterlyDouble5.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5100.0d + "'", double26 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5100.0d + "'", double27 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9999.9999d) + "'", double31 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
  }

  @Test
  public void test01698() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01698");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str9 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
  }

  @Test
  public void test01699() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01699");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double double16 = quarterlyDouble4.getTtm();
    double double18 = quarterlyDouble4.get(1);
    double double21 = quarterlyDouble4.deltaQ(1, (int) (short) -1);
    double double22 = quarterlyDouble4.getMostRecent();
    double double23 = quarterlyDouble4.getQseqQ();
    double double24 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str26 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
  }

  @Test
  public void test01700() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01700");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble7 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray6);
    double double8 = quarterlyDouble7.getMostRecent();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double14 = quarterlyDouble13.getTtm();
    double double15 = quarterlyDouble13.getQseqQ();
    double[] doubleArray16 = quarterlyDouble13.dArr;
    double double17 = quarterlyDouble13.getQseqQ();
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    quarterlyDouble13.dArr = doubleArray21;
    double[] doubleArray25 = quarterlyDouble13.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    quarterlyDouble7.dArr = doubleArray25;
    double double30 = quarterlyDouble7.deltaQ((int) 'a', (int) (short) 100);
    double double31 = quarterlyDouble7.getQseqQ();
    double[] doubleArray32 = quarterlyDouble7.dArr;
    double double35 = quarterlyDouble7.deltaQ((int) (byte) 10, 0);
    double double36 = quarterlyDouble7.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str38 = quarterlyDouble7.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5100.0d + "'", double31 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
  }

  @Test
  public void test01701() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01701");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getQseqQ();
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str12 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5100.0d + "'", double10 == 5100.0d);
  }

  @Test
  public void test01702() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01702");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getMostRecent();
    double double7 = quarterlyDouble5.getTtmAvg();
    double double10 = quarterlyDouble5.deltaQ((int) (short) 10, (int) '#');
    // The following exception was thrown during execution in test generation
    try {
      double double11 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
  }

  @Test
  public void test01703() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01703");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 100, (int) ' ');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (-1), (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList15 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) '#', (int) ' ');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList16 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList18 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList19 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList20 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.lang.Class<?> wildcardClass21 = manyCompanyDataList20.getClass();
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(companyDataList12);
    org.junit.Assert.assertNotNull(companyDataList15);
    org.junit.Assert.assertNotNull(manyCompanyDataList16);
    org.junit.Assert.assertNotNull(manyCompanyDataList17);
    org.junit.Assert.assertNotNull(manyCompanyDataList18);
    org.junit.Assert.assertNotNull(manyCompanyDataList19);
    org.junit.Assert.assertNotNull(manyCompanyDataList20);
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test01704() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01704");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 0, (int) (short) 10);
  }

  @Test
  public void test01705() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01705");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get((int) (short) -1);
    double[] doubleArray8 = quarterlyDouble5.dArr;
    double double9 = quarterlyDouble5.getQseqQ();
    double[] doubleArray10 = quarterlyDouble5.dArr;
    java.lang.Class<?> wildcardClass11 = quarterlyDouble5.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test01706() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01706");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) ' ');
    double double10 = quarterlyDouble4.getMostRecent();
    double double11 = quarterlyDouble4.getTtm();
    double double14 = quarterlyDouble4.deltaQ((int) (byte) -1, (int) (short) 1);
    double double15 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str17 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
  }

  @Test
  public void test01707() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01707");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double double19 = quarterlyDouble4.deltaQ((int) (byte) 100, 0);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str21 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
  }

  @Test
  public void test01708() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01708");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str10 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
  }

  @Test
  public void test01709() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01709");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) '#', 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01710() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01710");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtm();
    double double22 = quarterlyDouble20.getQseqQ();
    double[] doubleArray23 = quarterlyDouble20.dArr;
    double double24 = quarterlyDouble20.getQseqQ();
    double[] doubleArray28 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    quarterlyDouble20.dArr = doubleArray28;
    double[] doubleArray32 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray32;
    double double34 = quarterlyDouble4.getMostRecent();
    double double35 = quarterlyDouble4.getQseqQ();
    java.lang.Class<?> wildcardClass36 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5100.0d + "'", double22 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 52.0d + "'", double34 == 52.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 5100.0d + "'", double35 == 5100.0d);
    org.junit.Assert.assertNotNull(wildcardClass36);
  }

  @Test
  public void test01711() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01711");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("hi!");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.lang.String str4 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList5 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData8 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList5, (int) '#', (int) (byte) 1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData11 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList5, (int) (short) 100, (int) (short) -1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData14 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList5, (int) (short) 0, (int) (byte) 0);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Class<?> wildcardClass15 = fieldData14.getClass();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    org.junit.Assert.assertNotNull(fieldDataList5);
    org.junit.Assert.assertNull(fieldData8);
    org.junit.Assert.assertNull(fieldData11);
    org.junit.Assert.assertNull(fieldData14);
  }

  @Test
  public void test01712() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01712");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get(1);
    double double15 = quarterlyDouble4.get((int) 'a');
    double[] doubleArray16 = quarterlyDouble4.dArr;
    double double18 = quarterlyDouble4.get((int) ' ');
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtmAvg();
    double double25 = quarterlyDouble23.getMostRecent();
    double double27 = quarterlyDouble23.get((int) 'a');
    double double29 = quarterlyDouble23.get((int) (byte) -1);
    double[] doubleArray33 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray33);
    double double35 = quarterlyDouble34.getTtm();
    double double36 = quarterlyDouble34.getQseqQ();
    double[] doubleArray37 = quarterlyDouble34.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    quarterlyDouble23.dArr = doubleArray37;
    double double40 = quarterlyDouble23.getMostRecent();
    double[] doubleArray44 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble45 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble46 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    double double48 = quarterlyDouble46.get(10);
    double double49 = quarterlyDouble46.getMostRecent();
    double[] doubleArray50 = quarterlyDouble46.dArr;
    quarterlyDouble23.dArr = doubleArray50;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble52 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray50);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray50);
    quarterlyDouble4.dArr = doubleArray50;
    double[] doubleArray55 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double56 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-9999.9999d) + "'", double15 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-9999.9999d) + "'", double18 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9999.9999d) + "'", double27 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-9999.9999d) + "'", double29 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray33);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5100.0d + "'", double36 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 52.0d + "'", double40 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-9999.9999d) + "'", double48 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double49 + "' != '" + 52.0d + "'", double49 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray55);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01713() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01713");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, 0, (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, 1, (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) 10, (int) (short) -1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList18 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.lang.Class<?> wildcardClass19 = manyCompanyDataList18.getClass();
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(manyCompanyDataList7);
    org.junit.Assert.assertNotNull(manyCompanyDataList8);
    org.junit.Assert.assertNotNull(companyDataList11);
    org.junit.Assert.assertNotNull(companyDataList14);
    org.junit.Assert.assertNotNull(companyDataList17);
    org.junit.Assert.assertNotNull(manyCompanyDataList18);
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test01714() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01714");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.lang.String str2 = companyData1.getTicker();
    java.lang.String str3 = companyData1.getTicker();
    java.lang.String str4 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList5 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData8 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList5, (int) '4', (int) (short) 1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    org.junit.Assert.assertNotNull(fieldDataList5);
    org.junit.Assert.assertNull(fieldData8);
  }

  @Test
  public void test01715() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01715");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (short) 10, (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList20 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) 'a', 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList21 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList24 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (short) 1, (int) (short) 1);
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(companyDataList13);
    org.junit.Assert.assertNotNull(manyCompanyDataList14);
    org.junit.Assert.assertNotNull(companyDataList17);
    org.junit.Assert.assertNotNull(companyDataList20);
    org.junit.Assert.assertNotNull(manyCompanyDataList21);
    org.junit.Assert.assertNotNull(companyDataList24);
  }

  @Test
  public void test01716() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01716");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.lang.String str2 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.lang.String str4 = companyData1.getTicker();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.lang.String str7 = companyData1.getTicker();
    java.lang.String str8 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList9 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData12 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList9, (int) (short) 100, (int) (short) 10);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData15 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList9, (int) '4', 0);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    org.junit.Assert.assertNotNull(fieldDataList9);
    org.junit.Assert.assertNull(fieldData12);
    org.junit.Assert.assertNull(fieldData15);
  }

  @Test
  public void test01717() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01717");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) '4', (int) (byte) 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01718() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01718");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!", 100,
        100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01720() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01720");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getTtmAvg();
    double double14 = quarterlyDouble4.getTtm();
    double double15 = quarterlyDouble4.getMostRecent();
    double double16 = quarterlyDouble4.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str18 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
  }

  @Test
  public void test01721() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01721");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double double11 = quarterlyDouble4.get((int) '4');
    double double14 = quarterlyDouble4.deltaQ((int) (byte) 100, (int) (short) 10);
    double double15 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      double double17 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9999.9999d) + "'", double11 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
  }

  @Test
  public void test01722() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01722");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double7 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
  }

  @Test
  public void test01723() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01723");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) -1, (int) (short) 10);
  }

  @Test
  public void test01724() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01724");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, 0, (int) (byte) 0);
  }

  @Test
  public void test01725() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01725");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.String str8 = companyData1.getTicker();
    java.lang.String str9 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList10 = companyData1.getFdList();
    java.lang.String str11 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList12 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData15 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList12, (int) (byte) 1, (int) (short) 10);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData18 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList12, (int) (short) 0, (int) (byte) 0);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Class<?> wildcardClass19 = fieldData18.getClass();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    org.junit.Assert.assertNotNull(fieldDataList10);
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    org.junit.Assert.assertNotNull(fieldDataList12);
    org.junit.Assert.assertNull(fieldData15);
    org.junit.Assert.assertNull(fieldData18);
  }

  @Test
  public void test01726() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01726");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str7 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01727() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01727");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    java.lang.Class<?> wildcardClass17 = doubleArray14.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test01728() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01728");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, 1);
    double double17 = quarterlyDouble4.getQseqQ();
    double double18 = quarterlyDouble4.getTtmAvg();
    double double21 = quarterlyDouble4.deltaQ(10, 1);
    // The following exception was thrown during execution in test generation
    try {
      double double22 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
  }

  @Test
  public void test01729() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01729");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList15 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList18 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (byte) 1, (-1));
    java.lang.Class<?> wildcardClass19 = strList3.getClass();
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(manyCompanyDataList11);
    org.junit.Assert.assertNotNull(manyCompanyDataList12);
    org.junit.Assert.assertNotNull(companyDataList15);
    org.junit.Assert.assertNotNull(companyDataList18);
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test01730() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01730");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str17 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
  }

  @Test
  public void test01731() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01731");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 100, (int) ' ');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (-1), (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList15 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (byte) -1, (int) (short) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList16 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(companyDataList12);
    org.junit.Assert.assertNotNull(companyDataList15);
    org.junit.Assert.assertNotNull(manyCompanyDataList16);
  }

  @Test
  public void test01732() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01732");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getTtmAvg();
    double double7 = quarterlyDouble5.getTtmAvg();
    double double8 = quarterlyDouble5.getTtmAvg();
    double[] doubleArray9 = quarterlyDouble5.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str13 = quarterlyDouble11.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01733() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01733");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("", 10, 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01734() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01734");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    double double17 = quarterlyDouble4.getTtmAvg();
    double double19 = quarterlyDouble4.get((int) (byte) 100);
    double double20 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str22 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9999.9999d) + "'", double19 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
  }

  @Test
  public void test01735() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01735");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.lang.String str7 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList8 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList9 = companyData1.getFdList();
    java.lang.String str10 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList11 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList12 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData15 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList12, (int) (short) -1, (int) (short) -1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData18 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList12, 0, (int) (byte) 1);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    org.junit.Assert.assertNotNull(fieldDataList8);
    org.junit.Assert.assertNotNull(fieldDataList9);
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    org.junit.Assert.assertNotNull(fieldDataList11);
    org.junit.Assert.assertNotNull(fieldDataList12);
    org.junit.Assert.assertNull(fieldData15);
    org.junit.Assert.assertNull(fieldData18);
  }

  @Test
  public void test01736() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01736");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double double8 = quarterlyDouble5.getMostRecent();
    double[] doubleArray9 = quarterlyDouble5.dArr;
    double double10 = quarterlyDouble5.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str12 = quarterlyDouble5.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
  }

  @Test
  public void test01737() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01737");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 0, 10);
  }

  @Test
  public void test01738() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01738");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double double10 = quarterlyDouble8.getTtm();
    double[] doubleArray11 = quarterlyDouble8.dArr;
    java.lang.Class<?> wildcardClass12 = quarterlyDouble8.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test01739() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01739");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    // The following exception was thrown during execution in test generation
    try {
      double double9 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
  }

  @Test
  public void test01740() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01740");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] fieldDataArray0 = new net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] {};
    java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList1 = new java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>();
    boolean boolean2 = java.util.Collections.addAll((java.util.Collection<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1,
        fieldDataArray0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData5 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (short) -1, (int) (short) 0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData8 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) 'a', 1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData11 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (short) -1, (int) (byte) -1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData14 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (short) 10, (int) 'a');
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData17 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (byte) 0, (int) (byte) 1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData20 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) ' ', (int) (short) 100);
    org.junit.Assert.assertNotNull(fieldDataArray0);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNull(fieldData5);
    org.junit.Assert.assertNull(fieldData8);
    org.junit.Assert.assertNull(fieldData11);
    org.junit.Assert.assertNull(fieldData14);
    org.junit.Assert.assertNull(fieldData17);
    org.junit.Assert.assertNull(fieldData20);
  }

  @Test
  public void test01741() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01741");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double12 = quarterlyDouble4.getTtm();
    double[] doubleArray16 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    quarterlyDouble4.dArr = doubleArray16;
    double double19 = quarterlyDouble4.getTtm();
    double[] doubleArray20 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double21 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01742() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01742");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getTtm();
    double double9 = quarterlyDouble4.deltaQ((int) '#', 100);
    double double10 = quarterlyDouble4.getMostRecent();
    double double11 = quarterlyDouble4.getQseqQ();
    double double12 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      double double13 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5100.0d + "'", double11 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5100.0d + "'", double12 == 5100.0d);
  }

  @Test
  public void test01743() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01743");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getTtm();
    double double10 = quarterlyDouble4.getQseqQ();
    double double11 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray12 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str14 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5100.0d + "'", double10 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01744() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01744");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((-1), (int) (byte) -1);
  }

  @Test
  public void test01745() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01745");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double double16 = quarterlyDouble4.getQseqQ();
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double23 = quarterlyDouble21.get((int) (byte) 1);
    double double24 = quarterlyDouble21.getQseqQ();
    double[] doubleArray25 = quarterlyDouble21.dArr;
    quarterlyDouble4.dArr = doubleArray25;
    double double28 = quarterlyDouble4.get((int) '#');
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double35 = quarterlyDouble33.getQseqQ();
    double[] doubleArray36 = quarterlyDouble33.dArr;
    double double37 = quarterlyDouble33.getQseqQ();
    double[] doubleArray41 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble42 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble43 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    quarterlyDouble33.dArr = doubleArray41;
    double[] doubleArray45 = quarterlyDouble33.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble46 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray45);
    quarterlyDouble4.dArr = doubleArray45;
    double double48 = quarterlyDouble4.getTtm();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-9999.9999d) + "'", double28 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 5100.0d + "'", double35 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray36);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5100.0d + "'", double37 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray45);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
  }

  @Test
  public void test01746() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01746");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (short) 10, 10);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01747() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01747");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (short) 10, (int) 'a');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01748() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01748");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double8 = quarterlyDouble4.getMostRecent();
    double double10 = quarterlyDouble4.get((int) '4');
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    quarterlyDouble4.dArr = doubleArray14;
    double[] doubleArray17 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str19 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01749() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01749");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double double12 = quarterlyDouble4.get(0);
    double double13 = quarterlyDouble4.getMostRecent();
    double[] doubleArray17 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    double double19 = quarterlyDouble18.getTtm();
    double double21 = quarterlyDouble18.get((int) '4');
    double[] doubleArray25 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double[] doubleArray27 = quarterlyDouble26.dArr;
    double double28 = quarterlyDouble26.getQseqQ();
    double[] doubleArray29 = new double[] {};
    quarterlyDouble26.dArr = doubleArray29;
    quarterlyDouble18.dArr = doubleArray29;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble32 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double[] doubleArray36 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble37 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray36);
    double double38 = quarterlyDouble37.getTtm();
    double double40 = quarterlyDouble37.get((int) '4');
    double[] doubleArray44 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble45 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    double[] doubleArray46 = quarterlyDouble45.dArr;
    double double47 = quarterlyDouble45.getQseqQ();
    double[] doubleArray48 = new double[] {};
    quarterlyDouble45.dArr = doubleArray48;
    quarterlyDouble37.dArr = doubleArray48;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble51 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray48);
    quarterlyDouble32.dArr = doubleArray48;
    double[] doubleArray56 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble57 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    double[] doubleArray58 = quarterlyDouble57.dArr;
    double[] doubleArray59 = quarterlyDouble57.dArr;
    quarterlyDouble32.dArr = doubleArray59;
    quarterlyDouble4.dArr = doubleArray59;
    double double62 = quarterlyDouble4.getTtm();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-9999.9999d) + "'", double21 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 5100.0d + "'", double28 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
    org.junit.Assert.assertNotNull(doubleArray36);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-9999.9999d) + "'", double40 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray46);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double47 + "' != '" + 5100.0d + "'", double47 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray48);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray58);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray59);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
  }

  @Test
  public void test01750() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01750");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get((int) (short) -1);
    double double10 = quarterlyDouble5.deltaQ(1, 1);
    double double11 = quarterlyDouble5.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str13 = quarterlyDouble5.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 52.0d + "'", double11 == 52.0d);
  }

  @Test
  public void test01751() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01751");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) 'a', (int) (byte) 100);
  }

  @Test
  public void test01752() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01752");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double15 = quarterlyDouble4.get(1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str17 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
  }

  @Test
  public void test01753() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01753");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", 100, 1);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01754() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01754");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    double[] doubleArray8 = quarterlyDouble5.dArr;
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double16 = quarterlyDouble13.deltaQ((int) (short) 10, (int) (short) 100);
    double[] doubleArray17 = quarterlyDouble13.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    quarterlyDouble5.dArr = doubleArray17;
    double double20 = quarterlyDouble5.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double21 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
  }

  @Test
  public void test01755() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01755");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) 'a', (int) (short) 100);
  }

  @Test
  public void test01756() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01756");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, 100, (int) (short) 0);
  }

  @Test
  public void test01757() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01757");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtm();
    double double18 = quarterlyDouble4.get(0);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
  }

  @Test
  public void test01758() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01758");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) (byte) -1, (int) (byte) 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01759() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01759");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((-1), (int) '#');
  }

  @Test
  public void test01760() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01760");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("", 100,
        (int) (short) 10);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01761() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01761");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getTtm();
    double[] doubleArray9 = quarterlyDouble4.dArr;
    double[] doubleArray10 = quarterlyDouble4.dArr;
    double double11 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double13 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5100.0d + "'", double11 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01762() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01762");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.deltaQ((int) 'a', 0);
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double12 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str14 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
  }

  @Test
  public void test01763() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01763");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtm();
    double[] doubleArray9 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double10 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01764() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01764");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    double[] doubleArray18 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double double26 = quarterlyDouble25.getTtm();
    double double27 = quarterlyDouble25.getQseqQ();
    double[] doubleArray31 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble32 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    quarterlyDouble25.dArr = doubleArray31;
    double double34 = quarterlyDouble25.getQseqQ();
    double double37 = quarterlyDouble25.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray41 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble42 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    double double43 = quarterlyDouble42.getTtmAvg();
    double double44 = quarterlyDouble42.getMostRecent();
    double double46 = quarterlyDouble42.get((int) 'a');
    double double48 = quarterlyDouble42.get((int) (byte) -1);
    double[] doubleArray52 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    double double54 = quarterlyDouble53.getTtm();
    double double55 = quarterlyDouble53.getQseqQ();
    double[] doubleArray56 = quarterlyDouble53.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble57 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    quarterlyDouble42.dArr = doubleArray56;
    quarterlyDouble25.dArr = doubleArray56;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble60 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    quarterlyDouble20.dArr = doubleArray56;
    double[] doubleArray62 = quarterlyDouble20.dArr;
    double double65 = quarterlyDouble20.deltaQ((int) (short) 1, 0);
    double double66 = quarterlyDouble20.getTtm();
    double double67 = quarterlyDouble20.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double68 = quarterlyDouble20.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5100.0d + "'", double27 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5100.0d + "'", double34 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-9999.9999d) + "'", double46 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-9999.9999d) + "'", double48 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5100.0d + "'", double55 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray62);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
    org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
  }

  @Test
  public void test01765() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01765");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("", (-1), 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01766() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01766");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    double[] doubleArray8 = quarterlyDouble5.dArr;
    double double11 = quarterlyDouble5.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray15 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double17 = quarterlyDouble16.getTtm();
    double double19 = quarterlyDouble16.get((int) '4');
    double[] doubleArray23 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray23);
    double[] doubleArray25 = quarterlyDouble24.dArr;
    double double26 = quarterlyDouble24.getQseqQ();
    double[] doubleArray27 = new double[] {};
    quarterlyDouble24.dArr = doubleArray27;
    quarterlyDouble16.dArr = doubleArray27;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    double[] doubleArray34 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    double double36 = quarterlyDouble35.getTtm();
    double double38 = quarterlyDouble35.get((int) '4');
    double[] doubleArray42 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble43 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray42);
    double[] doubleArray44 = quarterlyDouble43.dArr;
    double double45 = quarterlyDouble43.getQseqQ();
    double[] doubleArray46 = new double[] {};
    quarterlyDouble43.dArr = doubleArray46;
    quarterlyDouble35.dArr = doubleArray46;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble49 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray46);
    quarterlyDouble30.dArr = doubleArray46;
    double[] doubleArray51 = quarterlyDouble30.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble52 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray51);
    quarterlyDouble5.dArr = doubleArray51;
    // The following exception was thrown during execution in test generation
    try {
      double double54 = quarterlyDouble5.getMostRecent();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9999.9999d) + "'", double19 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5100.0d + "'", double26 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-9999.9999d) + "'", double38 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 5100.0d + "'", double45 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray46);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
  }

  @Test
  public void test01767() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01767");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (short) 0, (int) (byte) 1);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01768() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01768");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double double16 = quarterlyDouble4.get((int) (short) 100);
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtmAvg();
    double double23 = quarterlyDouble21.getTtm();
    double double24 = quarterlyDouble21.getTtmAvg();
    double double26 = quarterlyDouble21.get((int) (byte) 100);
    double[] doubleArray27 = quarterlyDouble21.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    quarterlyDouble4.dArr = doubleArray27;
    double double32 = quarterlyDouble4.get(0);
    // The following exception was thrown during execution in test generation
    try {
      double double33 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9999.9999d) + "'", double16 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9999.9999d) + "'", double26 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
  }

  @Test
  public void test01769() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01769");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.lang.String str6 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList8 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList9 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData12 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList9, (int) (short) 0, (int) (byte) 10);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData15 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList9, (int) (byte) 10, (int) (byte) 100);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertNotNull(fieldDataList8);
    org.junit.Assert.assertNotNull(fieldDataList9);
    org.junit.Assert.assertNull(fieldData12);
    org.junit.Assert.assertNull(fieldData15);
  }

  @Test
  public void test01770() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01770");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) 10, (int) '4');
  }

  @Test
  public void test01771() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01771");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (byte) 10, (int) (short) 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01772() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01772");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double[] doubleArray15 = quarterlyDouble14.dArr;
    double[] doubleArray16 = quarterlyDouble14.dArr;
    quarterlyDouble8.dArr = doubleArray16;
    double double19 = quarterlyDouble8.get((-1));
    double double22 = quarterlyDouble8.deltaQ((int) (byte) 100, 100);
    // The following exception was thrown during execution in test generation
    try {
      double double23 = quarterlyDouble8.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9999.9999d) + "'", double19 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
  }

  @Test
  public void test01773() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01773");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double25 = quarterlyDouble23.getQseqQ();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble23.dArr = doubleArray29;
    double double32 = quarterlyDouble23.getQseqQ();
    double double33 = quarterlyDouble23.getTtmAvg();
    double double34 = quarterlyDouble23.getTtm();
    double double35 = quarterlyDouble23.getMostRecent();
    double[] doubleArray39 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray39);
    double double41 = quarterlyDouble40.getTtm();
    double double42 = quarterlyDouble40.getQseqQ();
    double[] doubleArray43 = quarterlyDouble40.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray43);
    double double45 = quarterlyDouble44.getQseqQ();
    double[] doubleArray49 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray49);
    double[] doubleArray51 = quarterlyDouble50.dArr;
    double[] doubleArray52 = quarterlyDouble50.dArr;
    quarterlyDouble44.dArr = doubleArray52;
    quarterlyDouble23.dArr = doubleArray52;
    quarterlyDouble18.dArr = doubleArray52;
    double double56 = quarterlyDouble18.getMostRecent();
    double double57 = quarterlyDouble18.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str59 = quarterlyDouble18.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5100.0d + "'", double32 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    org.junit.Assert.assertTrue("'" + double42 + "' != '" + 5100.0d + "'", double42 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 5100.0d + "'", double45 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray49);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double56 + "' != '" + 52.0d + "'", double56 == 52.0d);
    org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
  }

  @Test
  public void test01774() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01774");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) ' ', (int) '#');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01775() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01775");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList0 = null;
    // The following exception was thrown during execution in test generation
    try {
      net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
          .getFieldData(fieldDataList0, (int) (short) 10, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
  }

  @Test
  public void test01776() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01776");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("hi!");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList5 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData8 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList5, 0, 1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData11 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList5, (int) '4', (int) (short) 10);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertNotNull(fieldDataList5);
    org.junit.Assert.assertNull(fieldData8);
    org.junit.Assert.assertNull(fieldData11);
  }

  @Test
  public void test01777() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01777");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (short) 10, (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList20 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (byte) 100, (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList21 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList24 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) (short) 10);
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(companyDataList13);
    org.junit.Assert.assertNotNull(manyCompanyDataList14);
    org.junit.Assert.assertNotNull(companyDataList17);
    org.junit.Assert.assertNotNull(companyDataList20);
    org.junit.Assert.assertNotNull(manyCompanyDataList21);
    org.junit.Assert.assertNotNull(companyDataList24);
  }

  @Test
  public void test01778() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01778");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double double16 = quarterlyDouble4.getQseqQ();
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double24 = quarterlyDouble22.get(100);
    double[] doubleArray25 = quarterlyDouble22.dArr;
    double double28 = quarterlyDouble22.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    double[] doubleArray47 = quarterlyDouble33.dArr;
    quarterlyDouble22.dArr = doubleArray47;
    quarterlyDouble4.dArr = doubleArray47;
    double double50 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray51 = quarterlyDouble4.dArr;
    double double52 = quarterlyDouble4.getTtmAvg();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9999.9999d) + "'", double24 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
    org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
  }

  @Test
  public void test01779() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01779");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (short) 10, (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList20 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (byte) 100, (int) (short) 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList23 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 0, (int) (short) 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList24 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(companyDataList13);
    org.junit.Assert.assertNotNull(manyCompanyDataList14);
    org.junit.Assert.assertNotNull(companyDataList17);
    org.junit.Assert.assertNotNull(companyDataList20);
    org.junit.Assert.assertNotNull(companyDataList23);
    org.junit.Assert.assertNotNull(manyCompanyDataList24);
  }

  @Test
  public void test01780() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01780");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble7 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray6);
    double double8 = quarterlyDouble7.getMostRecent();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double14 = quarterlyDouble13.getTtm();
    double double15 = quarterlyDouble13.getQseqQ();
    double[] doubleArray16 = quarterlyDouble13.dArr;
    double double17 = quarterlyDouble13.getQseqQ();
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    quarterlyDouble13.dArr = doubleArray21;
    double[] doubleArray25 = quarterlyDouble13.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    quarterlyDouble7.dArr = doubleArray25;
    double double30 = quarterlyDouble7.deltaQ((int) 'a', (int) ' ');
    // The following exception was thrown during execution in test generation
    try {
      double double31 = quarterlyDouble7.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
  }

  @Test
  public void test01781() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01781");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (short) 10, (int) (byte) 10);
  }

  @Test
  public void test01782() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01782");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double[] doubleArray21 = quarterlyDouble20.dArr;
    double[] doubleArray22 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray22;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double26 = quarterlyDouble25.getTtmAvg();
    double[] doubleArray30 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    double double32 = quarterlyDouble31.getTtm();
    double double33 = quarterlyDouble31.getQseqQ();
    double[] doubleArray34 = quarterlyDouble31.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    double double36 = quarterlyDouble35.getQseqQ();
    double double39 = quarterlyDouble35.deltaQ((int) '#', (-1));
    double[] doubleArray43 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray43);
    double double45 = quarterlyDouble44.getTtm();
    double double46 = quarterlyDouble44.getQseqQ();
    double[] doubleArray47 = quarterlyDouble44.dArr;
    double double48 = quarterlyDouble44.getQseqQ();
    double[] doubleArray52 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble54 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    quarterlyDouble44.dArr = doubleArray52;
    double[] doubleArray56 = quarterlyDouble44.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble57 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble58 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    double[] doubleArray62 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble63 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray62);
    double double64 = quarterlyDouble63.getTtm();
    double double65 = quarterlyDouble63.getQseqQ();
    double[] doubleArray69 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble70 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray69);
    quarterlyDouble63.dArr = doubleArray69;
    double double72 = quarterlyDouble63.getQseqQ();
    double double73 = quarterlyDouble63.getTtmAvg();
    double double74 = quarterlyDouble63.getTtm();
    double double75 = quarterlyDouble63.getMostRecent();
    double[] doubleArray79 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble80 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray79);
    double double81 = quarterlyDouble80.getTtm();
    double double82 = quarterlyDouble80.getQseqQ();
    double[] doubleArray83 = quarterlyDouble80.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble84 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray83);
    double double85 = quarterlyDouble84.getQseqQ();
    double[] doubleArray89 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble90 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray89);
    double[] doubleArray91 = quarterlyDouble90.dArr;
    double[] doubleArray92 = quarterlyDouble90.dArr;
    quarterlyDouble84.dArr = doubleArray92;
    quarterlyDouble63.dArr = doubleArray92;
    quarterlyDouble58.dArr = doubleArray92;
    double double96 = quarterlyDouble58.getMostRecent();
    double[] doubleArray97 = quarterlyDouble58.dArr;
    quarterlyDouble35.dArr = doubleArray97;
    quarterlyDouble25.dArr = doubleArray97;
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5100.0d + "'", double33 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5100.0d + "'", double36 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + 5100.0d + "'", double46 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + 5100.0d + "'", double48 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray62);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
    org.junit.Assert.assertTrue("'" + double65 + "' != '" + 5100.0d + "'", double65 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray69);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double72 + "' != '" + 5100.0d + "'", double72 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
    org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
    org.junit.Assert.assertTrue("'" + double75 + "' != '" + 52.0d + "'", double75 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray79);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
    org.junit.Assert.assertTrue("'" + double82 + "' != '" + 5100.0d + "'", double82 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray83);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double85 + "' != '" + 5100.0d + "'", double85 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray89);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray91);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray92);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double96 + "' != '" + 52.0d + "'", double96 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray97);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01783() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01783");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (byte) 100, (int) (short) 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01784() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01784");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double double10 = quarterlyDouble8.getTtm();
    double double12 = quarterlyDouble8.get((int) (short) 0);
    double double13 = quarterlyDouble8.getTtmAvg();
    double double14 = quarterlyDouble8.getTtm();
    java.lang.Class<?> wildcardClass15 = quarterlyDouble8.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test01785() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01785");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    double[] doubleArray18 = quarterlyDouble4.dArr;
    double double20 = quarterlyDouble4.get(0);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str22 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-9999.9999d) + "'", double20 == (-9999.9999d));
  }

  @Test
  public void test01786() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01786");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double11 = quarterlyDouble4.get((int) ' ');
    double double12 = quarterlyDouble4.getTtmAvg();
    java.lang.Class<?> wildcardClass13 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9999.9999d) + "'", double11 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test01787() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01787");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] fieldDataArray0 = new net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] {};
    java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList1 = new java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>();
    boolean boolean2 = java.util.Collections.addAll((java.util.Collection<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1,
        fieldDataArray0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData5 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, 0, (int) '#');
    java.lang.Class<?> wildcardClass6 = fieldDataList1.getClass();
    org.junit.Assert.assertNotNull(fieldDataArray0);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNull(fieldData5);
    org.junit.Assert.assertNotNull(wildcardClass6);
  }

  @Test
  public void test01788() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01788");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble6 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray7 = quarterlyDouble6.dArr;
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01789() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01789");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getTtmAvg();
    double double10 = quarterlyDouble8.getTtm();
    double double11 = quarterlyDouble8.getTtm();
    double double12 = quarterlyDouble8.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str14 = quarterlyDouble8.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
  }

  @Test
  public void test01790() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01790");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double17 = quarterlyDouble16.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str19 = quarterlyDouble16.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
  }

  @Test
  public void test01791() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01791");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 100, 1);
  }

  @Test
  public void test01792() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01792");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double19 = quarterlyDouble17.get((int) (byte) 10);
    double double20 = quarterlyDouble17.getTtmAvg();
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double[] doubleArray30 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    double double32 = quarterlyDouble31.getTtm();
    double double34 = quarterlyDouble31.get((int) '4');
    double double37 = quarterlyDouble31.deltaQ((int) (short) 1, 0);
    double[] doubleArray41 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble42 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    double double43 = quarterlyDouble42.getTtm();
    double double44 = quarterlyDouble42.getQseqQ();
    double[] doubleArray45 = quarterlyDouble42.dArr;
    quarterlyDouble31.dArr = doubleArray45;
    quarterlyDouble26.dArr = doubleArray45;
    quarterlyDouble17.dArr = doubleArray45;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble49 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray45);
    double double50 = quarterlyDouble49.getMostRecent();
    double double51 = quarterlyDouble49.getQseqQ();
    double double52 = quarterlyDouble49.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str54 = quarterlyDouble49.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9999.9999d) + "'", double19 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-9999.9999d) + "'", double34 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 5100.0d + "'", double44 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray45);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double50 + "' != '" + 52.0d + "'", double50 == 52.0d);
    org.junit.Assert.assertTrue("'" + double51 + "' != '" + 5100.0d + "'", double51 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + 52.0d + "'", double52 == 52.0d);
  }

  @Test
  public void test01793() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01793");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList4 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (int) 'a', (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(manyCompanyDataList3);
    org.junit.Assert.assertNotNull(companyDataList4);
    org.junit.Assert.assertNotNull(companyDataList5);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(manyCompanyDataList10);
  }

  @Test
  public void test01794() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01794");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.get((int) (short) 10);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9999.9999d) + "'", double16 == (-9999.9999d));
  }

  @Test
  public void test01795() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01795");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.lang.String str6 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList8 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList9 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData12 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList9, 1, 1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData15 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList9, 0, 100);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData18 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList9, (int) (byte) -1, (int) '4');
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData21 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList9, 100, (-1));
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertNotNull(fieldDataList8);
    org.junit.Assert.assertNotNull(fieldDataList9);
    org.junit.Assert.assertNull(fieldData12);
    org.junit.Assert.assertNull(fieldData15);
    org.junit.Assert.assertNull(fieldData18);
    org.junit.Assert.assertNull(fieldData21);
  }

  @Test
  public void test01796() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01796");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double26 = quarterlyDouble23.get((int) '4');
    double[] doubleArray30 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    double[] doubleArray32 = quarterlyDouble31.dArr;
    double double33 = quarterlyDouble31.getQseqQ();
    double[] doubleArray34 = new double[] {};
    quarterlyDouble31.dArr = doubleArray34;
    quarterlyDouble23.dArr = doubleArray34;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble37 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    quarterlyDouble18.dArr = doubleArray34;
    double[] doubleArray42 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble43 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray42);
    double[] doubleArray44 = quarterlyDouble43.dArr;
    double[] doubleArray45 = quarterlyDouble43.dArr;
    quarterlyDouble18.dArr = doubleArray45;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray45);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble48 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray45);
    double double50 = quarterlyDouble48.get((int) '4');
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str52 = quarterlyDouble48.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9999.9999d) + "'", double26 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5100.0d + "'", double33 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray45);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-9999.9999d) + "'", double50 == (-9999.9999d));
  }

  @Test
  public void test01797() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01797");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double[] doubleArray16 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double double18 = quarterlyDouble17.getTtm();
    double double19 = quarterlyDouble17.getQseqQ();
    double[] doubleArray20 = quarterlyDouble17.dArr;
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    quarterlyDouble17.dArr = doubleArray24;
    double double27 = quarterlyDouble17.getTtm();
    double[] doubleArray28 = quarterlyDouble17.dArr;
    double double29 = quarterlyDouble17.getTtm();
    double[] doubleArray30 = quarterlyDouble17.dArr;
    quarterlyDouble4.dArr = doubleArray30;
    double double32 = quarterlyDouble4.getMostRecent();
    double double35 = quarterlyDouble4.deltaQ((int) (byte) 10, (int) (byte) 0);
    double double36 = quarterlyDouble4.getQseqQ();
    double[] doubleArray37 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    // The following exception was thrown during execution in test generation
    try {
      double double39 = quarterlyDouble38.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5100.0d + "'", double19 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5100.0d + "'", double36 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01798() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01798");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double12 = quarterlyDouble11.getTtmAvg();
    double double13 = quarterlyDouble11.getQseqQ();
    double[] doubleArray17 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    double double21 = quarterlyDouble19.get(100);
    double[] doubleArray22 = quarterlyDouble19.dArr;
    double double25 = quarterlyDouble19.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double double31 = quarterlyDouble30.getTtm();
    double double33 = quarterlyDouble30.get((int) '4');
    double[] doubleArray37 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    double[] doubleArray39 = quarterlyDouble38.dArr;
    double double40 = quarterlyDouble38.getQseqQ();
    double[] doubleArray41 = new double[] {};
    quarterlyDouble38.dArr = doubleArray41;
    quarterlyDouble30.dArr = doubleArray41;
    double[] doubleArray44 = quarterlyDouble30.dArr;
    quarterlyDouble19.dArr = doubleArray44;
    quarterlyDouble11.dArr = doubleArray44;
    double double48 = quarterlyDouble11.get((int) (short) 100);
    double[] doubleArray52 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    double double54 = quarterlyDouble53.getTtmAvg();
    double double55 = quarterlyDouble53.getMostRecent();
    double double57 = quarterlyDouble53.get((int) 'a');
    double double59 = quarterlyDouble53.get((int) (byte) -1);
    double[] doubleArray63 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble64 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray63);
    double double65 = quarterlyDouble64.getTtm();
    double double66 = quarterlyDouble64.getQseqQ();
    double[] doubleArray67 = quarterlyDouble64.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble68 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray67);
    quarterlyDouble53.dArr = doubleArray67;
    double double70 = quarterlyDouble53.getMostRecent();
    double[] doubleArray74 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble75 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray74);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble76 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray74);
    double double78 = quarterlyDouble76.get(10);
    double double79 = quarterlyDouble76.getMostRecent();
    double[] doubleArray80 = quarterlyDouble76.dArr;
    quarterlyDouble53.dArr = doubleArray80;
    quarterlyDouble11.dArr = doubleArray80;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble83 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray80);
    double double84 = quarterlyDouble83.getQseqQ();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-9999.9999d) + "'", double21 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-9999.9999d) + "'", double33 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-9999.9999d) + "'", double48 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 52.0d + "'", double55 == 52.0d);
    org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-9999.9999d) + "'", double57 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-9999.9999d) + "'", double59 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray63);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5100.0d + "'", double66 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray67);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double70 + "' != '" + 52.0d + "'", double70 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray74);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-9999.9999d) + "'", double78 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double79 + "' != '" + 52.0d + "'", double79 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray80);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double84 + "' != '" + 5100.0d + "'", double84 == 5100.0d);
  }

  @Test
  public void test01799() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01799");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (short) -1, 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01800() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01800");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double double16 = quarterlyDouble4.getTtm();
    double double18 = quarterlyDouble4.get(1);
    double double19 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str21 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
  }

  @Test
  public void test01801() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01801");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList4 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (int) (byte) 1, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (int) (short) 100, (int) (short) 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (int) ' ', (int) (short) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList18 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(manyCompanyDataList3);
    org.junit.Assert.assertNotNull(companyDataList4);
    org.junit.Assert.assertNotNull(companyDataList5);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(manyCompanyDataList7);
    org.junit.Assert.assertNotNull(companyDataList8);
    org.junit.Assert.assertNotNull(companyDataList11);
    org.junit.Assert.assertNotNull(companyDataList14);
    org.junit.Assert.assertNotNull(companyDataList17);
    org.junit.Assert.assertNotNull(companyDataList18);
  }

  @Test
  public void test01802() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01802");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getTtm();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double17 = quarterlyDouble14.get((int) '4');
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double double24 = quarterlyDouble22.getQseqQ();
    double[] doubleArray25 = new double[] {};
    quarterlyDouble22.dArr = doubleArray25;
    quarterlyDouble14.dArr = doubleArray25;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble28.dArr = doubleArray44;
    quarterlyDouble8.dArr = doubleArray44;
    double[] doubleArray50 = quarterlyDouble8.dArr;
    double[] doubleArray51 = quarterlyDouble8.dArr;
    java.lang.Class<?> wildcardClass52 = doubleArray51.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
    org.junit.Assert.assertNotNull(wildcardClass52);
  }

  @Test
  public void test01803() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01803");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, 10, (int) '#');
  }

  @Test
  public void test01804() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01804");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) ' ');
    double double10 = quarterlyDouble4.getMostRecent();
    double double12 = quarterlyDouble4.get(10);
    double double15 = quarterlyDouble4.deltaQ(10, (int) (short) -1);
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtmAvg();
    double double22 = quarterlyDouble20.getTtm();
    double double23 = quarterlyDouble20.getTtmAvg();
    double double24 = quarterlyDouble20.getMostRecent();
    double double26 = quarterlyDouble20.get((int) '4');
    double[] doubleArray30 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    quarterlyDouble20.dArr = doubleArray30;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    quarterlyDouble4.dArr = doubleArray30;
    double[] doubleArray36 = quarterlyDouble4.dArr;
    java.lang.Class<?> wildcardClass37 = doubleArray36.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9999.9999d) + "'", double12 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9999.9999d) + "'", double26 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray36);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass37);
  }

  @Test
  public void test01805() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01805");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList4 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.lang.Class<?> wildcardClass8 = strList2.getClass();
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(companyDataList3);
    org.junit.Assert.assertNotNull(companyDataList4);
    org.junit.Assert.assertNotNull(manyCompanyDataList5);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(wildcardClass8);
  }

  @Test
  public void test01806() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01806");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getQseqQ();
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get(100);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
  }

  @Test
  public void test01808() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01808");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double double10 = quarterlyDouble8.getMostRecent();
    double[] doubleArray11 = quarterlyDouble8.dArr;
    double double14 = quarterlyDouble8.deltaQ((int) (short) -1, (int) (short) 1);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
  }

  @Test
  public void test01809() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01809");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtm();
    double double18 = quarterlyDouble4.get(0);
    double double19 = quarterlyDouble4.getTtm();
    double double20 = quarterlyDouble4.getQseqQ();
    double[] doubleArray21 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double double24 = quarterlyDouble22.get(100);
    double[] doubleArray28 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    double[] doubleArray33 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray33);
    double double35 = quarterlyDouble34.getTtm();
    double double36 = quarterlyDouble34.getQseqQ();
    double[] doubleArray37 = quarterlyDouble34.dArr;
    double double38 = quarterlyDouble34.getQseqQ();
    double[] doubleArray42 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble43 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray42);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray42);
    quarterlyDouble34.dArr = doubleArray42;
    double[] doubleArray46 = quarterlyDouble34.dArr;
    double[] doubleArray50 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble51 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray50);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble52 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray50);
    double[] doubleArray53 = quarterlyDouble52.dArr;
    double[] doubleArray57 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble58 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray57);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble59 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray57);
    double double61 = quarterlyDouble59.get(100);
    double[] doubleArray62 = quarterlyDouble59.dArr;
    quarterlyDouble52.dArr = doubleArray62;
    quarterlyDouble34.dArr = doubleArray62;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble65 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray62);
    quarterlyDouble29.dArr = doubleArray62;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble67 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray62);
    quarterlyDouble22.dArr = doubleArray62;
    double[] doubleArray69 = quarterlyDouble22.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str71 = quarterlyDouble22.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5100.0d + "'", double20 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9999.9999d) + "'", double24 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray33);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5100.0d + "'", double36 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5100.0d + "'", double38 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray46);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray53);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray57);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-9999.9999d) + "'", double61 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray62);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray69);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01810() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01810");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList0 = null;
    // The following exception was thrown during execution in test generation
    try {
      net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
          .getFieldData(fieldDataList0, 10, (int) (byte) 10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
  }

  @Test
  public void test01811() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01811");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get((int) (short) -1);
    double[] doubleArray8 = quarterlyDouble5.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str10 = quarterlyDouble5.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01812() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01812");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double[] doubleArray21 = quarterlyDouble20.dArr;
    double[] doubleArray22 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray22;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double26 = quarterlyDouble25.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double29 = quarterlyDouble25.deltaQ(0, (int) '4');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
  }

  @Test
  public void test01813() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01813");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double double12 = quarterlyDouble4.deltaQ((int) '4', (int) (short) 1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str14 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
  }

  @Test
  public void test01814() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01814");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble4.deltaQ((int) (short) 10, (int) (short) 100);
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double10 = quarterlyDouble4.getTtm();
    double double12 = quarterlyDouble4.get((-1));
    double double14 = quarterlyDouble4.get(1);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9999.9999d) + "'", double12 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
  }

  @Test
  public void test01815() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01815");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtmAvg();
    double double11 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str13 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
  }

  @Test
  public void test01816() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01816");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) ' ', (int) (short) -1);
  }

  @Test
  public void test01817() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01817");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double8 = quarterlyDouble5.deltaQ((int) (short) 10, (int) ' ');
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double14 = quarterlyDouble13.getTtm();
    double double16 = quarterlyDouble13.get((int) '4');
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double[] doubleArray22 = quarterlyDouble21.dArr;
    double double23 = quarterlyDouble21.getQseqQ();
    double[] doubleArray24 = new double[] {};
    quarterlyDouble21.dArr = doubleArray24;
    quarterlyDouble13.dArr = doubleArray24;
    double[] doubleArray27 = quarterlyDouble13.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    double[] doubleArray33 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray33);
    double double35 = quarterlyDouble34.getTtm();
    double double36 = quarterlyDouble34.getQseqQ();
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    quarterlyDouble34.dArr = doubleArray40;
    double double43 = quarterlyDouble34.getQseqQ();
    double double46 = quarterlyDouble34.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray50 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble51 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray50);
    double double52 = quarterlyDouble51.getTtmAvg();
    double double53 = quarterlyDouble51.getMostRecent();
    double double55 = quarterlyDouble51.get((int) 'a');
    double double57 = quarterlyDouble51.get((int) (byte) -1);
    double[] doubleArray61 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble62 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray61);
    double double63 = quarterlyDouble62.getTtm();
    double double64 = quarterlyDouble62.getQseqQ();
    double[] doubleArray65 = quarterlyDouble62.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble66 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    quarterlyDouble51.dArr = doubleArray65;
    quarterlyDouble34.dArr = doubleArray65;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble69 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    quarterlyDouble29.dArr = doubleArray65;
    quarterlyDouble5.dArr = doubleArray65;
    double double72 = quarterlyDouble5.getMostRecent();
    double double73 = quarterlyDouble5.getTtm();
    double[] doubleArray77 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble78 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray77);
    double double79 = quarterlyDouble78.getTtmAvg();
    double double80 = quarterlyDouble78.getTtm();
    double double81 = quarterlyDouble78.getTtmAvg();
    double double83 = quarterlyDouble78.get((int) ' ');
    double double84 = quarterlyDouble78.getMostRecent();
    double double86 = quarterlyDouble78.get(10);
    double double89 = quarterlyDouble78.deltaQ(10, (int) (short) -1);
    double double90 = quarterlyDouble78.getMostRecent();
    double double91 = quarterlyDouble78.getTtmAvg();
    double[] doubleArray92 = quarterlyDouble78.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble93 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray92);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble94 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray92);
    quarterlyDouble5.dArr = doubleArray92;
    // The following exception was thrown during execution in test generation
    try {
      double double96 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9999.9999d) + "'", double16 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
    org.junit.Assert.assertNotNull(doubleArray33);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5100.0d + "'", double36 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-9999.9999d) + "'", double55 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-9999.9999d) + "'", double57 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray61);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    org.junit.Assert.assertTrue("'" + double64 + "' != '" + 5100.0d + "'", double64 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray65);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double72 + "' != '" + 52.0d + "'", double72 == 52.0d);
    org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray77);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
    org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
    org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
    org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-9999.9999d) + "'", double83 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double84 + "' != '" + 52.0d + "'", double84 == 52.0d);
    org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-9999.9999d) + "'", double86 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    org.junit.Assert.assertTrue("'" + double90 + "' != '" + 52.0d + "'", double90 == 52.0d);
    org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray92);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01818() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01818");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double double12 = quarterlyDouble8.deltaQ((int) '#', (-1));
    double[] doubleArray16 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double double18 = quarterlyDouble17.getTtm();
    double double19 = quarterlyDouble17.getQseqQ();
    double[] doubleArray20 = quarterlyDouble17.dArr;
    double double21 = quarterlyDouble17.getQseqQ();
    double[] doubleArray25 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble27 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    quarterlyDouble17.dArr = doubleArray25;
    double[] doubleArray29 = quarterlyDouble17.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double[] doubleArray35 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble36 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray35);
    double double37 = quarterlyDouble36.getTtm();
    double double38 = quarterlyDouble36.getQseqQ();
    double[] doubleArray42 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble43 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray42);
    quarterlyDouble36.dArr = doubleArray42;
    double double45 = quarterlyDouble36.getQseqQ();
    double double46 = quarterlyDouble36.getTtmAvg();
    double double47 = quarterlyDouble36.getTtm();
    double double48 = quarterlyDouble36.getMostRecent();
    double[] doubleArray52 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    double double54 = quarterlyDouble53.getTtm();
    double double55 = quarterlyDouble53.getQseqQ();
    double[] doubleArray56 = quarterlyDouble53.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble57 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    double double58 = quarterlyDouble57.getQseqQ();
    double[] doubleArray62 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble63 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray62);
    double[] doubleArray64 = quarterlyDouble63.dArr;
    double[] doubleArray65 = quarterlyDouble63.dArr;
    quarterlyDouble57.dArr = doubleArray65;
    quarterlyDouble36.dArr = doubleArray65;
    quarterlyDouble31.dArr = doubleArray65;
    double double69 = quarterlyDouble31.getMostRecent();
    double[] doubleArray70 = quarterlyDouble31.dArr;
    quarterlyDouble8.dArr = doubleArray70;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str73 = quarterlyDouble8.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5100.0d + "'", double19 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5100.0d + "'", double21 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray35);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5100.0d + "'", double38 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 5100.0d + "'", double45 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + 52.0d + "'", double48 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5100.0d + "'", double55 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double58 + "' != '" + 5100.0d + "'", double58 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray62);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray64);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray65);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double69 + "' != '" + 52.0d + "'", double69 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray70);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01819() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01819");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double double8 = quarterlyDouble5.getMostRecent();
    double double10 = quarterlyDouble5.get((int) (byte) -1);
    double double11 = quarterlyDouble5.getTtm();
    double double12 = quarterlyDouble5.getTtmAvg();
    double double15 = quarterlyDouble5.deltaQ((int) '#', (int) (short) 10);
    // The following exception was thrown during execution in test generation
    try {
      double double16 = quarterlyDouble5.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
  }

  @Test
  public void test01820() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01820");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.lang.String str4 = companyData1.getTicker();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList8 = companyData1.getFdList();
    java.lang.String str9 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList10 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData13 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList10, (int) (short) 10, (int) (byte) 1);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertNotNull(fieldDataList8);
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    org.junit.Assert.assertNotNull(fieldDataList10);
    org.junit.Assert.assertNull(fieldData13);
  }

  @Test
  public void test01821() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01821");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get((int) (short) -1);
    double double8 = quarterlyDouble5.getTtmAvg();
    double[] doubleArray9 = quarterlyDouble5.dArr;
    java.lang.Class<?> wildcardClass10 = doubleArray9.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass10);
  }

  @Test
  public void test01822() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01822");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (short) -1, (int) (byte) 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01823() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01823");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    double double17 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray18 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01824() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01824");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (short) 100, (int) (byte) -1);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01825() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01825");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, 1, (-1));
  }

  @Test
  public void test01826() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01826");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double double8 = quarterlyDouble5.getTtm();
    double double10 = quarterlyDouble5.get(10);
    double double11 = quarterlyDouble5.getTtmAvg();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
  }

  @Test
  public void test01827() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01827");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = new double[] {};
    quarterlyDouble4.dArr = doubleArray7;
    double double9 = quarterlyDouble4.getTtm();
    double double10 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double13 = quarterlyDouble4.deltaQ(0, (int) (short) 10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
  }

  @Test
  public void test01828() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01828");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    double[] doubleArray8 = quarterlyDouble5.dArr;
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double16 = quarterlyDouble13.deltaQ((int) (short) 10, (int) (short) 100);
    double[] doubleArray17 = quarterlyDouble13.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    quarterlyDouble5.dArr = doubleArray17;
    double double20 = quarterlyDouble5.getTtm();
    double double21 = quarterlyDouble5.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str23 = quarterlyDouble5.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
  }

  @Test
  public void test01829() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01829");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtmAvg();
    double double17 = quarterlyDouble4.getQseqQ();
    double double18 = quarterlyDouble4.getTtm();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
  }

  @Test
  public void test01830() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01830");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double double12 = quarterlyDouble4.get(0);
    double[] doubleArray13 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str15 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01831() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01831");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (int) (byte) 10, 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (-1), (int) (byte) 0);
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(companyDataList5);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(manyCompanyDataList7);
    org.junit.Assert.assertNotNull(manyCompanyDataList8);
    org.junit.Assert.assertNotNull(companyDataList11);
  }

  @Test
  public void test01832() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01832");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getMostRecent();
    double double18 = quarterlyDouble5.getTtm();
    double double20 = quarterlyDouble5.get((int) (short) -1);
    double double21 = quarterlyDouble5.getTtm();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-9999.9999d) + "'", double20 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
  }

  @Test
  public void test01833() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01833");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 100, (int) ' ');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, 100, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList15 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList16 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList19 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) ' ', (int) (short) -1);
    java.lang.Class<?> wildcardClass20 = strList2.getClass();
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(manyCompanyDataList10);
    org.junit.Assert.assertNotNull(manyCompanyDataList11);
    org.junit.Assert.assertNotNull(companyDataList14);
    org.junit.Assert.assertNotNull(manyCompanyDataList15);
    org.junit.Assert.assertNotNull(manyCompanyDataList16);
    org.junit.Assert.assertNotNull(companyDataList19);
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test01834() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01834");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (short) 0, (int) (byte) -1);
  }

  @Test
  public void test01835() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01835");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (short) 10, (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList15 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.lang.Class<?> wildcardClass16 = strList3.getClass();
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(companyDataList13);
    org.junit.Assert.assertNotNull(manyCompanyDataList14);
    org.junit.Assert.assertNotNull(manyCompanyDataList15);
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test01836() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01836");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double13 = quarterlyDouble11.get(100);
    double[] doubleArray14 = quarterlyDouble11.dArr;
    quarterlyDouble4.dArr = doubleArray14;
    double double16 = quarterlyDouble4.getQseqQ();
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double24 = quarterlyDouble22.get(100);
    double[] doubleArray25 = quarterlyDouble22.dArr;
    double double28 = quarterlyDouble22.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    double[] doubleArray47 = quarterlyDouble33.dArr;
    quarterlyDouble22.dArr = doubleArray47;
    quarterlyDouble4.dArr = doubleArray47;
    double[] doubleArray53 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble54 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray53);
    double double55 = quarterlyDouble54.getTtm();
    double double56 = quarterlyDouble54.getQseqQ();
    double[] doubleArray57 = quarterlyDouble54.dArr;
    double double58 = quarterlyDouble54.getQseqQ();
    double[] doubleArray62 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble63 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray62);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble64 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray62);
    quarterlyDouble54.dArr = doubleArray62;
    double[] doubleArray66 = quarterlyDouble54.dArr;
    quarterlyDouble4.dArr = doubleArray66;
    double[] doubleArray68 = quarterlyDouble4.dArr;
    double double71 = quarterlyDouble4.deltaQ((int) (byte) 1, (-1));
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9999.9999d) + "'", double24 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
    org.junit.Assert.assertNotNull(doubleArray53);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5100.0d + "'", double56 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray57);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double58 + "' != '" + 5100.0d + "'", double58 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray62);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray66);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray68);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
  }

  @Test
  public void test01837() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01837");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double double10 = quarterlyDouble8.getMostRecent();
    double[] doubleArray11 = quarterlyDouble8.dArr;
    double double12 = quarterlyDouble8.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str14 = quarterlyDouble8.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
  }

  @Test
  public void test01838() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01838");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble4.deltaQ((int) (short) 10, (int) (short) 100);
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double10 = quarterlyDouble4.getTtm();
    double double12 = quarterlyDouble4.get((-1));
    double double14 = quarterlyDouble4.get((-1));
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9999.9999d) + "'", double12 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
  }

  @Test
  public void test01839() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01839");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (byte) 100, 1);
  }

  @Test
  public void test01840() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01840");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double double16 = quarterlyDouble4.get((int) (short) 100);
    double double17 = quarterlyDouble4.getTtm();
    double double19 = quarterlyDouble4.get((int) '#');
    // The following exception was thrown during execution in test generation
    try {
      double double22 = quarterlyDouble4.deltaQ((int) (byte) 1, (int) (byte) 100);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9999.9999d) + "'", double16 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9999.9999d) + "'", double19 == (-9999.9999d));
  }

  @Test
  public void test01841() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01841");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double double8 = quarterlyDouble5.getMostRecent();
    double double10 = quarterlyDouble5.get((int) (byte) -1);
    double double11 = quarterlyDouble5.getTtm();
    double double12 = quarterlyDouble5.getQseqQ();
    double double13 = quarterlyDouble5.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      double double16 = quarterlyDouble5.deltaQ((int) (short) 1, (int) 'a');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5100.0d + "'", double12 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
  }

  @Test
  public void test01842() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01842");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (byte) 10, 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (-1), (int) (short) -1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList16 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (byte) 10, (int) (short) 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList18 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.lang.Class<?> wildcardClass19 = manyCompanyDataList18.getClass();
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(companyDataList13);
    org.junit.Assert.assertNotNull(companyDataList16);
    org.junit.Assert.assertNotNull(manyCompanyDataList17);
    org.junit.Assert.assertNotNull(manyCompanyDataList18);
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test01843() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01843");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.lang.String str7 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList8 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList9 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList10 = companyData1.getFdList();
    java.lang.String str11 = companyData1.getTicker();
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    org.junit.Assert.assertNotNull(fieldDataList8);
    org.junit.Assert.assertNotNull(fieldDataList9);
    org.junit.Assert.assertNotNull(fieldDataList10);
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
  }

  @Test
  public void test01844() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01844");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble7 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray6);
    double double8 = quarterlyDouble7.getTtm();
    double[] doubleArray9 = quarterlyDouble7.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double[] doubleArray17 = quarterlyDouble16.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    double double19 = quarterlyDouble18.getMostRecent();
    double double22 = quarterlyDouble18.deltaQ((int) (byte) 100, (int) '4');
    double[] doubleArray23 = quarterlyDouble18.dArr;
    quarterlyDouble10.dArr = doubleArray23;
    java.lang.Class<?> wildcardClass25 = quarterlyDouble10.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass25);
  }

  @Test
  public void test01845() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01845");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) (short) -1, (int) ' ');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01846() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01846");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double double16 = quarterlyDouble4.getTtm();
    double double18 = quarterlyDouble4.get(1);
    double double19 = quarterlyDouble4.getQseqQ();
    double double20 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double double26 = quarterlyDouble25.getTtm();
    double double27 = quarterlyDouble25.getQseqQ();
    double[] doubleArray28 = quarterlyDouble25.dArr;
    double double29 = quarterlyDouble25.getQseqQ();
    double[] doubleArray33 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray33);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray33);
    quarterlyDouble25.dArr = doubleArray33;
    double[] doubleArray37 = quarterlyDouble25.dArr;
    double[] doubleArray41 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble42 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble43 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    double[] doubleArray44 = quarterlyDouble43.dArr;
    double[] doubleArray48 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble49 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray48);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray48);
    double double52 = quarterlyDouble50.get(100);
    double[] doubleArray53 = quarterlyDouble50.dArr;
    quarterlyDouble43.dArr = doubleArray53;
    quarterlyDouble25.dArr = doubleArray53;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble56 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray53);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble57 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray53);
    quarterlyDouble4.dArr = doubleArray53;
    java.lang.Class<?> wildcardClass59 = doubleArray53.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5100.0d + "'", double19 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5100.0d + "'", double27 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5100.0d + "'", double29 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray33);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray48);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-9999.9999d) + "'", double52 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray53);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass59);
  }

  @Test
  public void test01847() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01847");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double double10 = quarterlyDouble4.getMostRecent();
    double double11 = quarterlyDouble4.getTtmAvg();
    double double12 = quarterlyDouble4.getQseqQ();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5100.0d + "'", double12 == 5100.0d);
  }

  @Test
  public void test01848() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01848");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (byte) 0, (int) '#');
  }

  @Test
  public void test01849() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01849");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double double11 = quarterlyDouble4.get((int) '4');
    double double14 = quarterlyDouble4.deltaQ((int) (byte) 100, (int) (short) 10);
    double double15 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.getQseqQ();
    double double19 = quarterlyDouble4.deltaQ((int) (byte) 10, (-1));
    double[] doubleArray23 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray23);
    double double25 = quarterlyDouble24.getTtmAvg();
    double double26 = quarterlyDouble24.getMostRecent();
    double double28 = quarterlyDouble24.get((int) 'a');
    double double30 = quarterlyDouble24.get((int) (byte) -1);
    double[] doubleArray34 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    double double36 = quarterlyDouble35.getTtm();
    double double37 = quarterlyDouble35.getQseqQ();
    double[] doubleArray38 = quarterlyDouble35.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble39 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray38);
    quarterlyDouble24.dArr = doubleArray38;
    double double41 = quarterlyDouble24.getMostRecent();
    double[] doubleArray45 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble46 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray45);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray45);
    double double49 = quarterlyDouble47.get(10);
    double double50 = quarterlyDouble47.getMostRecent();
    double[] doubleArray51 = quarterlyDouble47.dArr;
    quarterlyDouble24.dArr = doubleArray51;
    quarterlyDouble4.dArr = doubleArray51;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble54 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray51);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str56 = quarterlyDouble54.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9999.9999d) + "'", double11 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-9999.9999d) + "'", double28 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-9999.9999d) + "'", double30 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5100.0d + "'", double37 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray38);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray45);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-9999.9999d) + "'", double49 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double50 + "' != '" + 52.0d + "'", double50 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01850() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01850");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double11 = quarterlyDouble10.getTtm();
    double double13 = quarterlyDouble10.get((int) '4');
    double double16 = quarterlyDouble10.deltaQ((int) (short) 1, 0);
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtm();
    double double23 = quarterlyDouble21.getQseqQ();
    double[] doubleArray24 = quarterlyDouble21.dArr;
    quarterlyDouble10.dArr = doubleArray24;
    quarterlyDouble5.dArr = doubleArray24;
    double double29 = quarterlyDouble5.deltaQ((int) '#', 0);
    double double30 = quarterlyDouble5.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str32 = quarterlyDouble5.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
  }

  @Test
  public void test01851() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01851");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double double16 = quarterlyDouble4.get((int) (short) 100);
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtmAvg();
    double double23 = quarterlyDouble21.getTtm();
    double double24 = quarterlyDouble21.getTtmAvg();
    double double26 = quarterlyDouble21.get((int) (byte) 100);
    double[] doubleArray27 = quarterlyDouble21.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    quarterlyDouble4.dArr = doubleArray27;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray27);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str33 = quarterlyDouble31.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9999.9999d) + "'", double16 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9999.9999d) + "'", double26 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01852() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01852");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (short) -1, 100);
  }

  @Test
  public void test01853() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01853");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.lang.String str2 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.lang.String str4 = companyData1.getTicker();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.String str8 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList9 = companyData1.getFdList();
    java.lang.String str10 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList11 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData14 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList11, (int) (short) 10, (int) (short) 10);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    org.junit.Assert.assertNotNull(fieldDataList9);
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    org.junit.Assert.assertNotNull(fieldDataList11);
    org.junit.Assert.assertNull(fieldData14);
  }

  @Test
  public void test01854() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01854");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get(1);
    double double15 = quarterlyDouble4.get((int) 'a');
    double double17 = quarterlyDouble4.get((int) (byte) 100);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str19 = quarterlyDouble4.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-9999.9999d) + "'", double15 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
  }

  @Test
  public void test01855() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01855");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray17 = quarterlyDouble4.dArr;
    double[] doubleArray18 = quarterlyDouble4.dArr;
    double double19 = quarterlyDouble4.getTtmAvg();
    double double20 = quarterlyDouble4.getTtm();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
  }

  @Test
  public void test01856() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01856");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble7 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray6);
    double double8 = quarterlyDouble7.getMostRecent();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double14 = quarterlyDouble13.getTtm();
    double double15 = quarterlyDouble13.getQseqQ();
    double[] doubleArray16 = quarterlyDouble13.dArr;
    double double17 = quarterlyDouble13.getQseqQ();
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    quarterlyDouble13.dArr = doubleArray21;
    double[] doubleArray25 = quarterlyDouble13.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    quarterlyDouble7.dArr = doubleArray25;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str29 = quarterlyDouble7.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01857() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01857");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double19 = quarterlyDouble17.get((int) (byte) 10);
    double double22 = quarterlyDouble17.deltaQ((int) '#', 100);
    double[] doubleArray23 = quarterlyDouble17.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str25 = quarterlyDouble17.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9999.9999d) + "'", double19 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01858() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01858");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtm();
    double double18 = quarterlyDouble4.get(0);
    double double19 = quarterlyDouble4.getTtm();
    double double20 = quarterlyDouble4.getQseqQ();
    double[] doubleArray21 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double double24 = quarterlyDouble22.get(100);
    double double25 = quarterlyDouble22.getMostRecent();
    double double26 = quarterlyDouble22.getTtmAvg();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5100.0d + "'", double20 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9999.9999d) + "'", double24 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
  }

  @Test
  public void test01859() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01859");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble4.deltaQ((int) (short) 10, (int) (short) 100);
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double10 = quarterlyDouble4.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double11 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
  }

  @Test
  public void test01860() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01860");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) (byte) 1, (int) 'a');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01861() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01861");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getMostRecent();
    double double18 = quarterlyDouble5.getTtm();
    double double20 = quarterlyDouble5.get((int) '4');
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double double26 = quarterlyDouble25.getTtm();
    double double27 = quarterlyDouble25.getQseqQ();
    double[] doubleArray28 = quarterlyDouble25.dArr;
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    quarterlyDouble25.dArr = doubleArray32;
    double[] doubleArray35 = quarterlyDouble25.dArr;
    double[] doubleArray39 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray39);
    double double41 = quarterlyDouble40.getTtmAvg();
    double double42 = quarterlyDouble40.getTtm();
    double double43 = quarterlyDouble40.getMostRecent();
    double double44 = quarterlyDouble40.getTtmAvg();
    double double45 = quarterlyDouble40.getMostRecent();
    double[] doubleArray49 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray49);
    double[] doubleArray51 = quarterlyDouble50.dArr;
    double[] doubleArray52 = quarterlyDouble50.dArr;
    double[] doubleArray56 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble57 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    double double58 = quarterlyDouble57.getTtm();
    double double59 = quarterlyDouble57.getQseqQ();
    double[] doubleArray60 = quarterlyDouble57.dArr;
    double double61 = quarterlyDouble57.getQseqQ();
    double[] doubleArray65 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble66 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble67 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    quarterlyDouble57.dArr = doubleArray65;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble69 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    quarterlyDouble50.dArr = doubleArray65;
    quarterlyDouble40.dArr = doubleArray65;
    quarterlyDouble25.dArr = doubleArray65;
    quarterlyDouble5.dArr = doubleArray65;
    double double74 = quarterlyDouble5.getQseqQ();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-9999.9999d) + "'", double20 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5100.0d + "'", double27 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray35);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 52.0d + "'", double43 == 52.0d);
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray49);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    org.junit.Assert.assertTrue("'" + double59 + "' != '" + 5100.0d + "'", double59 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray60);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double61 + "' != '" + 5100.0d + "'", double61 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray65);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double74 + "' != '" + 5100.0d + "'", double74 == 5100.0d);
  }

  @Test
  public void test01862() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01862");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ(10, (int) (byte) 0);
    double[] doubleArray17 = quarterlyDouble4.dArr;
    double double20 = quarterlyDouble4.deltaQ(10, (int) (short) -1);
    double[] doubleArray21 = quarterlyDouble4.dArr;
    double double22 = quarterlyDouble4.getTtm();
    double[] doubleArray23 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str25 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01863() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01863");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double double19 = quarterlyDouble4.deltaQ((int) (byte) 100, 0);
    double[] doubleArray20 = quarterlyDouble4.dArr;
    double double21 = quarterlyDouble4.getQseqQ();
    double double24 = quarterlyDouble4.deltaQ((int) ' ', (int) (byte) 0);
    double double25 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double26 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5100.0d + "'", double21 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
  }

  @Test
  public void test01864() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01864");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) '4', (int) (byte) 10);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01865() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01865");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble7 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray6);
    double double8 = quarterlyDouble7.getMostRecent();
    double[] doubleArray9 = quarterlyDouble7.dArr;
    double double10 = quarterlyDouble7.getTtm();
    double double11 = quarterlyDouble7.getQseqQ();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5100.0d + "'", double11 == 5100.0d);
  }

  @Test
  public void test01866() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01866");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double16 = quarterlyDouble14.getQseqQ();
    double[] doubleArray17 = quarterlyDouble14.dArr;
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    quarterlyDouble14.dArr = doubleArray21;
    double double24 = quarterlyDouble14.getTtm();
    double[] doubleArray25 = quarterlyDouble14.dArr;
    double double26 = quarterlyDouble14.getTtm();
    double[] doubleArray27 = quarterlyDouble14.dArr;
    double[] doubleArray31 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble32 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    double double34 = quarterlyDouble32.get((int) (byte) 1);
    double[] doubleArray38 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble39 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray38);
    double double40 = quarterlyDouble39.getTtm();
    double double41 = quarterlyDouble39.getQseqQ();
    double[] doubleArray42 = quarterlyDouble39.dArr;
    double[] doubleArray46 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray46);
    quarterlyDouble39.dArr = doubleArray46;
    double double49 = quarterlyDouble39.getTtm();
    double[] doubleArray50 = quarterlyDouble39.dArr;
    double double51 = quarterlyDouble39.getTtm();
    double[] doubleArray52 = quarterlyDouble39.dArr;
    quarterlyDouble32.dArr = doubleArray52;
    quarterlyDouble14.dArr = doubleArray52;
    quarterlyDouble4.dArr = doubleArray52;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str57 = quarterlyDouble4.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 52.0d + "'", double34 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray38);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 5100.0d + "'", double41 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray46);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01867() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01867");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double[] doubleArray21 = quarterlyDouble20.dArr;
    double[] doubleArray22 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray22;
    double[] doubleArray24 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str26 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01868() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01868");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) 'a', (int) (byte) -1);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01869() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01869");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double[] doubleArray15 = quarterlyDouble14.dArr;
    double[] doubleArray16 = quarterlyDouble14.dArr;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtm();
    double double23 = quarterlyDouble21.getQseqQ();
    double[] doubleArray24 = quarterlyDouble21.dArr;
    double double25 = quarterlyDouble21.getQseqQ();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble21.dArr = doubleArray29;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble14.dArr = doubleArray29;
    quarterlyDouble4.dArr = doubleArray29;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str37 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01870() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01870");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double double12 = quarterlyDouble4.deltaQ((int) '4', (int) (short) 1);
    double double13 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      double double14 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
  }

  @Test
  public void test01871() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01871");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, 0, (int) (short) 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.lang.Class<?> wildcardClass13 = strList2.getClass();
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(manyCompanyDataList7);
    org.junit.Assert.assertNotNull(manyCompanyDataList8);
    org.junit.Assert.assertNotNull(companyDataList11);
    org.junit.Assert.assertNotNull(manyCompanyDataList12);
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test01872() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01872");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtm();
    double double17 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str19 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
  }

  @Test
  public void test01873() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01873");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double[] doubleArray21 = quarterlyDouble20.dArr;
    double[] doubleArray22 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray22;
    double double24 = quarterlyDouble4.getQseqQ();
    double double25 = quarterlyDouble4.getTtm();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double double31 = quarterlyDouble30.getTtm();
    double double33 = quarterlyDouble30.get((int) '4');
    double[] doubleArray37 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    double[] doubleArray39 = quarterlyDouble38.dArr;
    double double40 = quarterlyDouble38.getQseqQ();
    double[] doubleArray41 = new double[] {};
    quarterlyDouble38.dArr = doubleArray41;
    quarterlyDouble30.dArr = doubleArray41;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    double[] doubleArray48 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble49 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray48);
    double double50 = quarterlyDouble49.getTtm();
    double double52 = quarterlyDouble49.get((int) '4');
    double[] doubleArray56 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble57 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    double[] doubleArray58 = quarterlyDouble57.dArr;
    double double59 = quarterlyDouble57.getQseqQ();
    double[] doubleArray60 = new double[] {};
    quarterlyDouble57.dArr = doubleArray60;
    quarterlyDouble49.dArr = doubleArray60;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble63 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray60);
    quarterlyDouble44.dArr = doubleArray60;
    double[] doubleArray65 = quarterlyDouble44.dArr;
    quarterlyDouble4.dArr = doubleArray65;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble67 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble68 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble69 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    double double70 = quarterlyDouble69.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double71 = quarterlyDouble69.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-9999.9999d) + "'", double33 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
    org.junit.Assert.assertNotNull(doubleArray48);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-9999.9999d) + "'", double52 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray58);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double59 + "' != '" + 5100.0d + "'", double59 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray60);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
    org.junit.Assert.assertNotNull(doubleArray65);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
    org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
  }

  @Test
  public void test01874() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01874");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtm();
    double double23 = quarterlyDouble21.getQseqQ();
    double[] doubleArray24 = quarterlyDouble21.dArr;
    double double25 = quarterlyDouble21.getQseqQ();
    double double26 = quarterlyDouble21.getQseqQ();
    double double27 = quarterlyDouble21.getQseqQ();
    double[] doubleArray28 = quarterlyDouble21.dArr;
    quarterlyDouble5.dArr = doubleArray28;
    double double31 = quarterlyDouble5.get((int) (byte) -1);
    double[] doubleArray35 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble36 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray35);
    double double37 = quarterlyDouble36.getTtm();
    double double39 = quarterlyDouble36.get((int) '4');
    double[] doubleArray43 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray43);
    double[] doubleArray45 = quarterlyDouble44.dArr;
    double double46 = quarterlyDouble44.getQseqQ();
    double[] doubleArray47 = new double[] {};
    quarterlyDouble44.dArr = doubleArray47;
    quarterlyDouble36.dArr = doubleArray47;
    double[] doubleArray50 = quarterlyDouble36.dArr;
    quarterlyDouble5.dArr = doubleArray50;
    double[] doubleArray52 = quarterlyDouble5.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double53 = quarterlyDouble5.getMostRecent();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5100.0d + "'", double26 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5100.0d + "'", double27 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9999.9999d) + "'", double31 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray35);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-9999.9999d) + "'", double39 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray45);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + 5100.0d + "'", double46 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
  }

  @Test
  public void test01875() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01875");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double double13 = quarterlyDouble12.getTtm();
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = quarterlyDouble12.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double double23 = quarterlyDouble22.getTtmAvg();
    double double24 = quarterlyDouble22.getTtm();
    double double25 = quarterlyDouble22.getTtmAvg();
    double double26 = quarterlyDouble22.getQseqQ();
    double[] doubleArray27 = quarterlyDouble22.dArr;
    quarterlyDouble17.dArr = doubleArray27;
    quarterlyDouble4.dArr = doubleArray27;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str31 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5100.0d + "'", double26 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01876() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01876");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double double16 = quarterlyDouble4.get((int) (short) 100);
    double double17 = quarterlyDouble4.getTtm();
    double double18 = quarterlyDouble4.getTtmAvg();
    double double19 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str21 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9999.9999d) + "'", double16 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
  }

  @Test
  public void test01877() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01877");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.lang.String str7 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList8 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList9 = companyData1.getFdList();
    java.lang.String str10 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList11 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData14 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList11, (int) (byte) 1, 0);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    org.junit.Assert.assertNotNull(fieldDataList8);
    org.junit.Assert.assertNotNull(fieldDataList9);
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    org.junit.Assert.assertNotNull(fieldDataList11);
    org.junit.Assert.assertNull(fieldData14);
  }

  @Test
  public void test01878() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01878");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double26 = quarterlyDouble23.get((int) '4');
    double[] doubleArray30 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    double[] doubleArray32 = quarterlyDouble31.dArr;
    double double33 = quarterlyDouble31.getQseqQ();
    double[] doubleArray34 = new double[] {};
    quarterlyDouble31.dArr = doubleArray34;
    quarterlyDouble23.dArr = doubleArray34;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble37 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    quarterlyDouble18.dArr = doubleArray34;
    double[] doubleArray42 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble43 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray42);
    double[] doubleArray44 = quarterlyDouble43.dArr;
    double[] doubleArray45 = quarterlyDouble43.dArr;
    quarterlyDouble18.dArr = doubleArray45;
    double[] doubleArray50 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble51 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray50);
    double double52 = quarterlyDouble51.getTtm();
    double double53 = quarterlyDouble51.getQseqQ();
    double[] doubleArray54 = quarterlyDouble51.dArr;
    double[] doubleArray58 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble59 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray58);
    quarterlyDouble51.dArr = doubleArray58;
    double double61 = quarterlyDouble51.getTtm();
    double[] doubleArray62 = quarterlyDouble51.dArr;
    double[] doubleArray66 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble67 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray66);
    double double68 = quarterlyDouble67.getTtm();
    double double70 = quarterlyDouble67.get((int) '4');
    double[] doubleArray74 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble75 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray74);
    double[] doubleArray76 = quarterlyDouble75.dArr;
    double double77 = quarterlyDouble75.getQseqQ();
    double[] doubleArray78 = new double[] {};
    quarterlyDouble75.dArr = doubleArray78;
    quarterlyDouble67.dArr = doubleArray78;
    double[] doubleArray81 = quarterlyDouble67.dArr;
    quarterlyDouble51.dArr = doubleArray81;
    quarterlyDouble18.dArr = doubleArray81;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str85 = quarterlyDouble18.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9999.9999d) + "'", double26 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5100.0d + "'", double33 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray45);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5100.0d + "'", double53 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray54);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray58);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray62);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray66);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
    org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-9999.9999d) + "'", double70 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray74);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray76);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double77 + "' != '" + 5100.0d + "'", double77 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray78);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
    org.junit.Assert.assertNotNull(doubleArray81);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
  }

  @Test
  public void test01879() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01879");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double double10 = quarterlyDouble8.getMostRecent();
    double[] doubleArray11 = quarterlyDouble8.dArr;
    double double14 = quarterlyDouble8.deltaQ((int) '4', 0);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
  }

  @Test
  public void test01880() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01880");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) ' ');
    double double10 = quarterlyDouble4.getMostRecent();
    double double12 = quarterlyDouble4.get(10);
    double double13 = quarterlyDouble4.getTtmAvg();
    double double14 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str16 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9999.9999d) + "'", double12 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
  }

  @Test
  public void test01881() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01881");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, 100, 1);
  }

  @Test
  public void test01882() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01882");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray17 = quarterlyDouble4.dArr;
    double double18 = quarterlyDouble4.getMostRecent();
    double double19 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double20 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
  }

  @Test
  public void test01883() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01883");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtm();
    double double22 = quarterlyDouble20.getQseqQ();
    double[] doubleArray23 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray23;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray23);
    double double26 = quarterlyDouble25.getMostRecent();
    double double29 = quarterlyDouble25.deltaQ((int) (byte) 10, (int) (byte) 10);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str31 = quarterlyDouble25.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5100.0d + "'", double22 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
  }

  @Test
  public void test01884() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01884");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 100, 0);
  }

  @Test
  public void test01885() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01885");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, 1, (int) (byte) -1);
  }

  @Test
  public void test01886() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01886");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    double double10 = quarterlyDouble4.get((int) (byte) -1);
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double16 = quarterlyDouble15.getTtm();
    double double17 = quarterlyDouble15.getQseqQ();
    double[] doubleArray18 = quarterlyDouble15.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    quarterlyDouble4.dArr = doubleArray18;
    double double21 = quarterlyDouble4.getMostRecent();
    double[] doubleArray25 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble27 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double double29 = quarterlyDouble27.get(10);
    double double30 = quarterlyDouble27.getMostRecent();
    double[] doubleArray31 = quarterlyDouble27.dArr;
    quarterlyDouble4.dArr = doubleArray31;
    double double33 = quarterlyDouble4.getQseqQ();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-9999.9999d) + "'", double29 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5100.0d + "'", double33 == 5100.0d);
  }

  @Test
  public void test01887() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01887");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtm();
    double double18 = quarterlyDouble4.get(0);
    double double19 = quarterlyDouble4.getTtm();
    double double20 = quarterlyDouble4.getQseqQ();
    double[] doubleArray21 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str24 = quarterlyDouble22.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5100.0d + "'", double20 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01888() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01888");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double7 = quarterlyDouble4.getTtm();
    double double8 = quarterlyDouble4.getTtm();
    double[] doubleArray9 = quarterlyDouble4.dArr;
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double16 = quarterlyDouble14.getQseqQ();
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    quarterlyDouble14.dArr = doubleArray20;
    double double23 = quarterlyDouble14.getQseqQ();
    double double26 = quarterlyDouble14.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray30 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    double double32 = quarterlyDouble31.getTtmAvg();
    double double33 = quarterlyDouble31.getMostRecent();
    double double35 = quarterlyDouble31.get((int) 'a');
    double double37 = quarterlyDouble31.get((int) (byte) -1);
    double[] doubleArray41 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble42 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    double double43 = quarterlyDouble42.getTtm();
    double double44 = quarterlyDouble42.getQseqQ();
    double[] doubleArray45 = quarterlyDouble42.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble46 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray45);
    quarterlyDouble31.dArr = doubleArray45;
    quarterlyDouble14.dArr = doubleArray45;
    quarterlyDouble4.dArr = doubleArray45;
    double double52 = quarterlyDouble4.deltaQ((int) 'a', (int) ' ');
    // The following exception was thrown during execution in test generation
    try {
      double double53 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-9999.9999d) + "'", double35 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-9999.9999d) + "'", double37 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 5100.0d + "'", double44 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray45);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
  }

  @Test
  public void test01889() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01889");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.get((int) (byte) 100);
    double double17 = quarterlyDouble4.getTtm();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9999.9999d) + "'", double16 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
  }

  @Test
  public void test01890() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01890");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    double[] doubleArray18 = quarterlyDouble4.dArr;
    double double21 = quarterlyDouble4.deltaQ(1, 0);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str23 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
  }

  @Test
  public void test01891() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01891");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double double15 = quarterlyDouble4.getTtm();
    double double16 = quarterlyDouble4.getTtm();
    double double18 = quarterlyDouble4.get(1);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double27 = quarterlyDouble24.deltaQ((int) (short) 10, (int) ' ');
    double[] doubleArray31 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble32 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    double double33 = quarterlyDouble32.getTtm();
    double double35 = quarterlyDouble32.get((int) '4');
    double[] doubleArray39 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray39);
    double[] doubleArray41 = quarterlyDouble40.dArr;
    double double42 = quarterlyDouble40.getQseqQ();
    double[] doubleArray43 = new double[] {};
    quarterlyDouble40.dArr = doubleArray43;
    quarterlyDouble32.dArr = doubleArray43;
    double[] doubleArray46 = quarterlyDouble32.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray46);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble48 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray46);
    double[] doubleArray52 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    double double54 = quarterlyDouble53.getTtm();
    double double55 = quarterlyDouble53.getQseqQ();
    double[] doubleArray59 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble60 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray59);
    quarterlyDouble53.dArr = doubleArray59;
    double double62 = quarterlyDouble53.getQseqQ();
    double double65 = quarterlyDouble53.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray69 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble70 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray69);
    double double71 = quarterlyDouble70.getTtmAvg();
    double double72 = quarterlyDouble70.getMostRecent();
    double double74 = quarterlyDouble70.get((int) 'a');
    double double76 = quarterlyDouble70.get((int) (byte) -1);
    double[] doubleArray80 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble81 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray80);
    double double82 = quarterlyDouble81.getTtm();
    double double83 = quarterlyDouble81.getQseqQ();
    double[] doubleArray84 = quarterlyDouble81.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble85 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray84);
    quarterlyDouble70.dArr = doubleArray84;
    quarterlyDouble53.dArr = doubleArray84;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble88 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray84);
    quarterlyDouble48.dArr = doubleArray84;
    quarterlyDouble24.dArr = doubleArray84;
    quarterlyDouble4.dArr = doubleArray84;
    double double93 = quarterlyDouble4.get(0);
    double double94 = quarterlyDouble4.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str96 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-9999.9999d) + "'", double35 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double42 + "' != '" + 5100.0d + "'", double42 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
    org.junit.Assert.assertNotNull(doubleArray46);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5100.0d + "'", double55 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray59);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double62 + "' != '" + 5100.0d + "'", double62 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray69);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
    org.junit.Assert.assertTrue("'" + double72 + "' != '" + 52.0d + "'", double72 == 52.0d);
    org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-9999.9999d) + "'", double74 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-9999.9999d) + "'", double76 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray80);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
    org.junit.Assert.assertTrue("'" + double83 + "' != '" + 5100.0d + "'", double83 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray84);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
    org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
  }

  @Test
  public void test01892() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01892");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(1, (int) (short) 0);
  }

  @Test
  public void test01893() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01893");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str8 = quarterlyDouble4.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
  }

  @Test
  public void test01894() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01894");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getQseqQ();
    double double11 = quarterlyDouble8.get(10);
    double double12 = quarterlyDouble8.getTtm();
    double double15 = quarterlyDouble8.deltaQ((int) 'a', (int) (short) 100);
    // The following exception was thrown during execution in test generation
    try {
      double double16 = quarterlyDouble8.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9999.9999d) + "'", double11 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
  }

  @Test
  public void test01895() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01895");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(10, (int) (byte) 100);
  }

  @Test
  public void test01896() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01896");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double[] doubleArray21 = quarterlyDouble20.dArr;
    double[] doubleArray22 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray22;
    double[] doubleArray24 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double25 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01897() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01897");
    java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) '#');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList3);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList15 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, 100, 0);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList18 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (byte) 1, (-1));
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList21 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList3, (int) (byte) 100, 0);
    java.lang.Class<?> wildcardClass22 = strList3.getClass();
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    org.junit.Assert.assertNotNull(companyDataList7);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(manyCompanyDataList11);
    org.junit.Assert.assertNotNull(manyCompanyDataList12);
    org.junit.Assert.assertNotNull(companyDataList15);
    org.junit.Assert.assertNotNull(companyDataList18);
    org.junit.Assert.assertNotNull(companyDataList21);
    org.junit.Assert.assertNotNull(wildcardClass22);
  }

  @Test
  public void test01898() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01898");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getQseqQ();
    double double18 = quarterlyDouble4.get((int) (short) 100);
    double[] doubleArray19 = quarterlyDouble4.dArr;
    double double22 = quarterlyDouble4.deltaQ((int) (byte) 100, (int) ' ');
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str24 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-9999.9999d) + "'", double18 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
  }

  @Test
  public void test01899() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01899");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.lang.String str2 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.lang.String str4 = companyData1.getTicker();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.String str8 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList9 = companyData1.getFdList();
    java.lang.String str10 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList11 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData14 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList11, (int) 'a', (int) ' ');
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    org.junit.Assert.assertNotNull(fieldDataList9);
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    org.junit.Assert.assertNotNull(fieldDataList11);
    org.junit.Assert.assertNull(fieldData14);
  }

  @Test
  public void test01900() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01900");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", 10, (int) '#');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01901() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01901");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] fieldDataArray0 = new net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] {};
    java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList1 = new java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>();
    boolean boolean2 = java.util.Collections.addAll((java.util.Collection<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1,
        fieldDataArray0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData5 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (short) -1, (int) (short) 0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData8 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) 'a', 1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData11 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (short) -1, (int) (byte) -1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData14 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (short) 10, (int) 'a');
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData17 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (byte) 0, (int) (byte) 1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData20 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) '#', (int) (short) 10);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData23 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, 100, (int) '#');
    org.junit.Assert.assertNotNull(fieldDataArray0);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNull(fieldData5);
    org.junit.Assert.assertNull(fieldData8);
    org.junit.Assert.assertNull(fieldData11);
    org.junit.Assert.assertNull(fieldData14);
    org.junit.Assert.assertNull(fieldData17);
    org.junit.Assert.assertNull(fieldData20);
    org.junit.Assert.assertNull(fieldData23);
  }

  @Test
  public void test01902() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01902");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getQseqQ();
    double double10 = quarterlyDouble4.getQseqQ();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double12 = quarterlyDouble4.getTtmAvg();
    double double13 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray14 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double15 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5100.0d + "'", double10 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01903() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01903");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double11 = quarterlyDouble10.getTtm();
    double double13 = quarterlyDouble10.get((int) '4');
    double double16 = quarterlyDouble10.deltaQ((int) (short) 1, 0);
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtm();
    double double23 = quarterlyDouble21.getQseqQ();
    double[] doubleArray24 = quarterlyDouble21.dArr;
    quarterlyDouble10.dArr = doubleArray24;
    quarterlyDouble5.dArr = doubleArray24;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble27 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double[] doubleArray28 = quarterlyDouble27.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    double[] doubleArray30 = quarterlyDouble29.dArr;
    java.lang.Class<?> wildcardClass31 = doubleArray30.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass31);
  }

  @Test
  public void test01904() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01904");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double8 = quarterlyDouble4.getMostRecent();
    double double10 = quarterlyDouble4.get((int) '4');
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    quarterlyDouble4.dArr = doubleArray14;
    double[] doubleArray17 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    // The following exception was thrown during execution in test generation
    try {
      double double19 = quarterlyDouble18.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01905() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01905");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double25 = quarterlyDouble23.getQseqQ();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    quarterlyDouble23.dArr = doubleArray29;
    double double32 = quarterlyDouble23.getQseqQ();
    double double33 = quarterlyDouble23.getTtmAvg();
    double double34 = quarterlyDouble23.getTtm();
    double double35 = quarterlyDouble23.getMostRecent();
    double[] doubleArray39 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray39);
    double double41 = quarterlyDouble40.getTtm();
    double double42 = quarterlyDouble40.getQseqQ();
    double[] doubleArray43 = quarterlyDouble40.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray43);
    double double45 = quarterlyDouble44.getQseqQ();
    double[] doubleArray49 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray49);
    double[] doubleArray51 = quarterlyDouble50.dArr;
    double[] doubleArray52 = quarterlyDouble50.dArr;
    quarterlyDouble44.dArr = doubleArray52;
    quarterlyDouble23.dArr = doubleArray52;
    quarterlyDouble18.dArr = doubleArray52;
    double double56 = quarterlyDouble18.getMostRecent();
    double[] doubleArray57 = quarterlyDouble18.dArr;
    double[] doubleArray58 = quarterlyDouble18.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double59 = quarterlyDouble18.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5100.0d + "'", double25 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5100.0d + "'", double32 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    org.junit.Assert.assertTrue("'" + double42 + "' != '" + 5100.0d + "'", double42 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + 5100.0d + "'", double45 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray49);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double56 + "' != '" + 52.0d + "'", double56 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray57);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray58);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01906() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01906");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double14 = quarterlyDouble12.get(100);
    double[] doubleArray15 = quarterlyDouble12.dArr;
    quarterlyDouble5.dArr = doubleArray15;
    double double17 = quarterlyDouble5.getTtmAvg();
    double[] doubleArray18 = quarterlyDouble5.dArr;
    double double19 = quarterlyDouble5.getMostRecent();
    double double20 = quarterlyDouble5.getQseqQ();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9999.9999d) + "'", double14 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5100.0d + "'", double20 == 5100.0d);
  }

  @Test
  public void test01907() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01907");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtm();
    double[] doubleArray9 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    // The following exception was thrown during execution in test generation
    try {
      double double13 = quarterlyDouble10.deltaQ((int) (short) 0, (int) (short) 10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01908() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01908");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getTtmAvg();
    double double10 = quarterlyDouble8.getTtm();
    double double11 = quarterlyDouble8.getTtm();
    double double12 = quarterlyDouble8.getTtmAvg();
    java.lang.Class<?> wildcardClass13 = quarterlyDouble8.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test01909() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01909");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble9 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double10 = quarterlyDouble9.getTtmAvg();
    double double11 = quarterlyDouble9.getQseqQ();
    double double12 = quarterlyDouble9.getQseqQ();
    double[] doubleArray13 = quarterlyDouble9.dArr;
    java.lang.Class<?> wildcardClass14 = doubleArray13.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5100.0d + "'", double11 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5100.0d + "'", double12 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test01910() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01910");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("", 0, 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01911() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01911");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList0 = null;
    // The following exception was thrown during execution in test generation
    try {
      net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
          .getFieldData(fieldDataList0, (int) 'a', 1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
    }
    catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
  }

  @Test
  public void test01912() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01912");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double16 = quarterlyDouble14.getQseqQ();
    double[] doubleArray17 = quarterlyDouble14.dArr;
    double double18 = quarterlyDouble14.getQseqQ();
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    quarterlyDouble14.dArr = doubleArray22;
    double[] doubleArray26 = quarterlyDouble14.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble27 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray26);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray26);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    double[] doubleArray47 = quarterlyDouble33.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble48 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray47);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble49 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray47);
    quarterlyDouble28.dArr = doubleArray47;
    quarterlyDouble4.dArr = doubleArray47;
    double double54 = quarterlyDouble4.deltaQ((int) (byte) -1, (int) (byte) 1);
    // The following exception was thrown during execution in test generation
    try {
      double double55 = quarterlyDouble4.getQseqQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray26);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
  }

  @Test
  public void test01913() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01913");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getQseqQ();
    double double10 = quarterlyDouble4.getQseqQ();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get((int) (short) 0);
    double double14 = quarterlyDouble4.getMostRecent();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      double double17 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5100.0d + "'", double10 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
  }

  @Test
  public void test01914() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01914");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double double7 = quarterlyDouble4.getTtm();
    double double8 = quarterlyDouble4.getTtm();
    double double10 = quarterlyDouble4.get(10);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
  }

  @Test
  public void test01915() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01915");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray17 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    double double19 = quarterlyDouble18.getMostRecent();
    double double21 = quarterlyDouble18.get(100);
    double double22 = quarterlyDouble18.getTtmAvg();
    double double23 = quarterlyDouble18.getTtm();
    double double24 = quarterlyDouble18.getQseqQ();
    double double25 = quarterlyDouble18.getMostRecent();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-9999.9999d) + "'", double21 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
  }

  @Test
  public void test01916() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01916");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) 'a', (int) (byte) 10);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01917() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01917");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double11 = quarterlyDouble4.get(0);
    double double12 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str14 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5100.0d + "'", double12 == 5100.0d);
  }

  @Test
  public void test01918() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01918");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtm();
    double[] doubleArray17 = quarterlyDouble4.dArr;
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double double24 = quarterlyDouble22.get((int) (byte) 1);
    double[] doubleArray28 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    double double30 = quarterlyDouble29.getTtm();
    double double31 = quarterlyDouble29.getQseqQ();
    double[] doubleArray32 = quarterlyDouble29.dArr;
    double[] doubleArray36 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble37 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray36);
    quarterlyDouble29.dArr = doubleArray36;
    double double39 = quarterlyDouble29.getTtm();
    double[] doubleArray40 = quarterlyDouble29.dArr;
    double double41 = quarterlyDouble29.getTtm();
    double[] doubleArray42 = quarterlyDouble29.dArr;
    quarterlyDouble22.dArr = doubleArray42;
    quarterlyDouble4.dArr = doubleArray42;
    double[] doubleArray45 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str47 = quarterlyDouble4.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5100.0d + "'", double31 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray36);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray45);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01919() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01919");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", 10, 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01920() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01920");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList4 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.lang.Class<?> wildcardClass7 = companyDataList6.getClass();
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(manyCompanyDataList3);
    org.junit.Assert.assertNotNull(companyDataList4);
    org.junit.Assert.assertNotNull(companyDataList5);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(wildcardClass7);
  }

  @Test
  public void test01921() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01921");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble7 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray6);
    double double8 = quarterlyDouble7.getMostRecent();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double14 = quarterlyDouble13.getTtm();
    double double15 = quarterlyDouble13.getQseqQ();
    double[] doubleArray16 = quarterlyDouble13.dArr;
    double double17 = quarterlyDouble13.getQseqQ();
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    quarterlyDouble13.dArr = doubleArray21;
    double[] doubleArray25 = quarterlyDouble13.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    quarterlyDouble7.dArr = doubleArray25;
    double double30 = quarterlyDouble7.deltaQ((int) 'a', (int) ' ');
    double double32 = quarterlyDouble7.get(0);
    // The following exception was thrown during execution in test generation
    try {
      double double33 = quarterlyDouble7.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
  }

  @Test
  public void test01922() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01922");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double double14 = quarterlyDouble4.getTtm();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getQseqQ();
    double double18 = quarterlyDouble4.get((int) (short) 100);
    double[] doubleArray19 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      double double20 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-9999.9999d) + "'", double18 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01923() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01923");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) 0, 0);
  }

  @Test
  public void test01924() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01924");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (int) (byte) 10, 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList7 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(companyDataList5);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList7);
  }

  @Test
  public void test01925() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01925");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray17 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray17);
    double double19 = quarterlyDouble18.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      double double20 = quarterlyDouble18.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
  }

  @Test
  public void test01926() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01926");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("", 1,
        (int) (byte) 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01927() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01927");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    double double10 = quarterlyDouble4.get((int) (byte) -1);
    double double12 = quarterlyDouble4.get((int) (short) 10);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9999.9999d) + "'", double12 == (-9999.9999d));
  }

  @Test
  public void test01928() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01928");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    double double11 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.deltaQ((int) ' ', 0);
    double[] doubleArray15 = quarterlyDouble4.dArr;
    java.lang.Class<?> wildcardClass16 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5100.0d + "'", double11 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test01929() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01929");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double[] doubleArray21 = quarterlyDouble20.dArr;
    double[] doubleArray22 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray22;
    double double24 = quarterlyDouble4.getQseqQ();
    double double25 = quarterlyDouble4.getTtm();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double[] doubleArray34 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    double double36 = quarterlyDouble35.getTtm();
    double double37 = quarterlyDouble35.getQseqQ();
    double[] doubleArray38 = quarterlyDouble35.dArr;
    double double39 = quarterlyDouble35.getQseqQ();
    double[] doubleArray43 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray43);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble45 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray43);
    quarterlyDouble35.dArr = doubleArray43;
    double[] doubleArray47 = quarterlyDouble35.dArr;
    double[] doubleArray51 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble52 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray51);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray51);
    double[] doubleArray54 = quarterlyDouble53.dArr;
    double[] doubleArray58 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble59 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray58);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble60 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray58);
    double double62 = quarterlyDouble60.get(100);
    double[] doubleArray63 = quarterlyDouble60.dArr;
    quarterlyDouble53.dArr = doubleArray63;
    quarterlyDouble35.dArr = doubleArray63;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble66 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray63);
    quarterlyDouble30.dArr = doubleArray63;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble68 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray63);
    quarterlyDouble4.dArr = doubleArray63;
    double double72 = quarterlyDouble4.deltaQ((int) '#', (int) (short) 1);
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5100.0d + "'", double37 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray38);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double39 + "' != '" + 5100.0d + "'", double39 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray43);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray47);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray51);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray54);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray58);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-9999.9999d) + "'", double62 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray63);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
  }

  @Test
  public void test01930() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01930");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] fieldDataArray0 = new net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] {};
    java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList1 = new java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>();
    boolean boolean2 = java.util.Collections.addAll((java.util.Collection<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1,
        fieldDataArray0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData5 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (short) -1, (int) (short) 0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData8 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) 'a', 1);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData11 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (short) 1, (int) (byte) 100);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData14 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (byte) 1, 0);
    org.junit.Assert.assertNotNull(fieldDataArray0);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNull(fieldData5);
    org.junit.Assert.assertNull(fieldData8);
    org.junit.Assert.assertNull(fieldData11);
    org.junit.Assert.assertNull(fieldData14);
  }

  @Test
  public void test01931() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01931");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getQseqQ();
    double double10 = quarterlyDouble4.getQseqQ();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double12 = quarterlyDouble4.getTtmAvg();
    double double13 = quarterlyDouble4.getTtmAvg();
    double double14 = quarterlyDouble4.getTtm();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5100.0d + "'", double10 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
  }

  @Test
  public void test01932() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01932");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getTtm();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double17 = quarterlyDouble14.get((int) '4');
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double double24 = quarterlyDouble22.getQseqQ();
    double[] doubleArray25 = new double[] {};
    quarterlyDouble22.dArr = doubleArray25;
    quarterlyDouble14.dArr = doubleArray25;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble28.dArr = doubleArray44;
    quarterlyDouble8.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    double double51 = quarterlyDouble50.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double52 = quarterlyDouble50.getQseqQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
  }

  @Test
  public void test01933() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01933");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(10);
    double double8 = quarterlyDouble5.getMostRecent();
    double double10 = quarterlyDouble5.get((int) (byte) -1);
    double double11 = quarterlyDouble5.getTtm();
    double double12 = quarterlyDouble5.getTtmAvg();
    double double13 = quarterlyDouble5.getQseqQ();
    double double14 = quarterlyDouble5.getQseqQ();
    double double15 = quarterlyDouble5.getTtm();
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double23 = quarterlyDouble21.get(100);
    double double24 = quarterlyDouble21.getTtmAvg();
    double double25 = quarterlyDouble21.getMostRecent();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double double31 = quarterlyDouble30.getTtm();
    double double32 = quarterlyDouble30.getQseqQ();
    double[] doubleArray33 = quarterlyDouble30.dArr;
    double double34 = quarterlyDouble30.getQseqQ();
    double double35 = quarterlyDouble30.getTtmAvg();
    double double37 = quarterlyDouble30.get(0);
    double[] doubleArray41 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble42 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    double double43 = quarterlyDouble42.getTtm();
    double double44 = quarterlyDouble42.getQseqQ();
    double[] doubleArray45 = quarterlyDouble42.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble46 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray45);
    quarterlyDouble30.dArr = doubleArray45;
    quarterlyDouble21.dArr = doubleArray45;
    double[] doubleArray49 = quarterlyDouble21.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble50 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray49);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble51 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray49);
    quarterlyDouble5.dArr = doubleArray49;
    java.lang.Class<?> wildcardClass53 = quarterlyDouble5.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-9999.9999d) + "'", double23 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5100.0d + "'", double32 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray33);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5100.0d + "'", double34 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 5100.0d + "'", double44 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray45);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray49);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass53);
  }

  @Test
  public void test01934() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01934");
    double[] doubleArray0 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble1 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray0);
    double[] doubleArray5 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble6 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray5);
    double double7 = quarterlyDouble6.getTtm();
    double double8 = quarterlyDouble6.getQseqQ();
    double[] doubleArray9 = quarterlyDouble6.dArr;
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    quarterlyDouble6.dArr = doubleArray13;
    double[] doubleArray16 = quarterlyDouble6.dArr;
    quarterlyDouble1.dArr = doubleArray16;
    double[] doubleArray18 = quarterlyDouble1.dArr;
    double[] doubleArray19 = quarterlyDouble1.dArr;
    double double20 = quarterlyDouble1.getQseqQ();
    double[] doubleArray21 = quarterlyDouble1.dArr;
    double double22 = quarterlyDouble1.getMostRecent();
    double double23 = quarterlyDouble1.getTtmAvg();
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5100.0d + "'", double20 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
  }

  @Test
  public void test01935() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01935");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(100, 100);
  }

  @Test
  public void test01936() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01936");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!", 0,
        (int) (byte) 1);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01937() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01937");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble18 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double[] doubleArray22 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    double double24 = quarterlyDouble23.getTtm();
    double double26 = quarterlyDouble23.get((int) '4');
    double[] doubleArray30 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    double[] doubleArray32 = quarterlyDouble31.dArr;
    double double33 = quarterlyDouble31.getQseqQ();
    double[] doubleArray34 = new double[] {};
    quarterlyDouble31.dArr = doubleArray34;
    quarterlyDouble23.dArr = doubleArray34;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble37 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    quarterlyDouble18.dArr = doubleArray34;
    double[] doubleArray42 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble43 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray42);
    double[] doubleArray44 = quarterlyDouble43.dArr;
    double[] doubleArray45 = quarterlyDouble43.dArr;
    quarterlyDouble18.dArr = doubleArray45;
    double[] doubleArray50 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble51 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray50);
    double double52 = quarterlyDouble51.getTtm();
    double double53 = quarterlyDouble51.getQseqQ();
    double[] doubleArray54 = quarterlyDouble51.dArr;
    double[] doubleArray58 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble59 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray58);
    quarterlyDouble51.dArr = doubleArray58;
    double double61 = quarterlyDouble51.getTtm();
    double[] doubleArray62 = quarterlyDouble51.dArr;
    double[] doubleArray66 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble67 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray66);
    double double68 = quarterlyDouble67.getTtm();
    double double70 = quarterlyDouble67.get((int) '4');
    double[] doubleArray74 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble75 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray74);
    double[] doubleArray76 = quarterlyDouble75.dArr;
    double double77 = quarterlyDouble75.getQseqQ();
    double[] doubleArray78 = new double[] {};
    quarterlyDouble75.dArr = doubleArray78;
    quarterlyDouble67.dArr = doubleArray78;
    double[] doubleArray81 = quarterlyDouble67.dArr;
    quarterlyDouble51.dArr = doubleArray81;
    quarterlyDouble18.dArr = doubleArray81;
    double[] doubleArray84 = quarterlyDouble18.dArr;
    double double87 = quarterlyDouble18.deltaQ((int) (byte) 0, (-1));
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9999.9999d) + "'", double26 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5100.0d + "'", double33 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray45);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray50);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5100.0d + "'", double53 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray54);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray58);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray62);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray66);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
    org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-9999.9999d) + "'", double70 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray74);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray76);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double77 + "' != '" + 5100.0d + "'", double77 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray78);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
    org.junit.Assert.assertNotNull(doubleArray81);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
    org.junit.Assert.assertNotNull(doubleArray84);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
    org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
  }

  @Test
  public void test01938() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01938");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (short) 1, (int) (short) 0);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01939() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01939");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double15 = quarterlyDouble13.get((int) (byte) 1);
    double double16 = quarterlyDouble13.getQseqQ();
    double double17 = quarterlyDouble13.getQseqQ();
    double double18 = quarterlyDouble13.getTtmAvg();
    double double19 = quarterlyDouble13.getTtm();
    double[] doubleArray20 = quarterlyDouble13.dArr;
    quarterlyDouble8.dArr = doubleArray20;
    double[] doubleArray25 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double double27 = quarterlyDouble26.getTtmAvg();
    double double28 = quarterlyDouble26.getTtm();
    double double29 = quarterlyDouble26.getTtm();
    double double31 = quarterlyDouble26.get((int) (short) 100);
    double[] doubleArray32 = quarterlyDouble26.dArr;
    quarterlyDouble8.dArr = doubleArray32;
    java.lang.Class<?> wildcardClass34 = quarterlyDouble8.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9999.9999d) + "'", double31 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass34);
  }

  @Test
  public void test01940() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01940");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    quarterlyDouble4.dArr = doubleArray11;
    double[] doubleArray14 = quarterlyDouble4.dArr;
    double[] doubleArray18 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double double20 = quarterlyDouble19.getTtmAvg();
    double double21 = quarterlyDouble19.getTtm();
    double double22 = quarterlyDouble19.getMostRecent();
    double double23 = quarterlyDouble19.getTtmAvg();
    double double24 = quarterlyDouble19.getMostRecent();
    double[] doubleArray28 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    double[] doubleArray30 = quarterlyDouble29.dArr;
    double[] doubleArray31 = quarterlyDouble29.dArr;
    double[] doubleArray35 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble36 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray35);
    double double37 = quarterlyDouble36.getTtm();
    double double38 = quarterlyDouble36.getQseqQ();
    double[] doubleArray39 = quarterlyDouble36.dArr;
    double double40 = quarterlyDouble36.getQseqQ();
    double[] doubleArray44 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble45 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble46 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble36.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble48 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble29.dArr = doubleArray44;
    quarterlyDouble19.dArr = doubleArray44;
    quarterlyDouble4.dArr = doubleArray44;
    double[] doubleArray52 = quarterlyDouble4.dArr;
    double double55 = quarterlyDouble4.deltaQ((int) '#', (-1));
    double[] doubleArray56 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str58 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray35);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5100.0d + "'", double38 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01941() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01941");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double double10 = quarterlyDouble4.deltaQ((int) (short) 1, 0);
    double double11 = quarterlyDouble4.getMostRecent();
    double double14 = quarterlyDouble4.deltaQ((int) (byte) 1, (int) (byte) -1);
    double double15 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      double double16 = quarterlyDouble4.getQoQ();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 52.0d + "'", double11 == 52.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
  }

  @Test
  public void test01942() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01942");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble5.getTtmAvg();
    double double7 = quarterlyDouble5.getTtmAvg();
    double double8 = quarterlyDouble5.getTtmAvg();
    double double10 = quarterlyDouble5.get((int) 'a');
    double double11 = quarterlyDouble5.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str13 = quarterlyDouble5.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
  }

  @Test
  public void test01943() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01943");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double double11 = quarterlyDouble4.get((int) '4');
    double double12 = quarterlyDouble4.getTtm();
    double[] doubleArray13 = quarterlyDouble4.dArr;
    double double14 = quarterlyDouble4.getTtmAvg();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9999.9999d) + "'", double11 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
  }

  @Test
  public void test01944() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01944");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 10, (int) (short) 100);
  }

  @Test
  public void test01945() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01945");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!",
        (int) (short) 1, (int) '4');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01946() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01946");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double12 = quarterlyDouble11.getTtm();
    double double13 = quarterlyDouble11.getQseqQ();
    double[] doubleArray14 = quarterlyDouble11.dArr;
    double[] doubleArray18 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    quarterlyDouble11.dArr = doubleArray18;
    double double21 = quarterlyDouble11.getTtm();
    double[] doubleArray22 = quarterlyDouble11.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray22);
    quarterlyDouble4.dArr = doubleArray22;
    java.lang.Class<?> wildcardClass25 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(wildcardClass25);
  }

  @Test
  public void test01947() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01947");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double17 = quarterlyDouble14.get((int) '4');
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double double24 = quarterlyDouble22.getQseqQ();
    double[] doubleArray25 = new double[] {};
    quarterlyDouble22.dArr = doubleArray25;
    quarterlyDouble14.dArr = doubleArray25;
    quarterlyDouble4.dArr = doubleArray25;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str30 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
  }

  @Test
  public void test01948() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01948");
    java.lang.String[] strArray1 = new java.lang.String[] { "" };
    java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
    boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 0, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 100, (int) ' ');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList14 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, 100, 10);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList17 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies((java.util.List<java.lang.String>) strList2, (int) (short) 100, (int) (short) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList18 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList((java.util.List<java.lang.String>) strList2);
    java.lang.Class<?> wildcardClass19 = manyCompanyDataList18.getClass();
    org.junit.Assert.assertNotNull(strArray1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(manyCompanyDataList10);
    org.junit.Assert.assertNotNull(manyCompanyDataList11);
    org.junit.Assert.assertNotNull(companyDataList14);
    org.junit.Assert.assertNotNull(companyDataList17);
    org.junit.Assert.assertNotNull(manyCompanyDataList18);
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test01949() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01949");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (byte) 1, (int) (short) 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01950() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01950");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double double11 = quarterlyDouble4.getTtm();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
  }

  @Test
  public void test01951() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01951");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (byte) 0, 100);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01952() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01952");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (byte) 10, (int) (short) 0);
  }

  @Test
  public void test01953() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01953");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get((int) (short) -1);
    double double10 = quarterlyDouble5.deltaQ(1, 1);
    double double11 = quarterlyDouble5.getTtm();
    double[] doubleArray15 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double17 = quarterlyDouble16.getTtm();
    double double18 = quarterlyDouble16.getQseqQ();
    double[] doubleArray19 = quarterlyDouble16.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double double21 = quarterlyDouble20.getTtm();
    double[] doubleArray25 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double double27 = quarterlyDouble26.getTtm();
    double double29 = quarterlyDouble26.get((int) '4');
    double[] doubleArray33 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble34 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray33);
    double[] doubleArray35 = quarterlyDouble34.dArr;
    double double36 = quarterlyDouble34.getQseqQ();
    double[] doubleArray37 = new double[] {};
    quarterlyDouble34.dArr = doubleArray37;
    quarterlyDouble26.dArr = doubleArray37;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble40 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    double[] doubleArray44 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble45 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    double double46 = quarterlyDouble45.getTtm();
    double double48 = quarterlyDouble45.get((int) '4');
    double[] doubleArray52 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    double[] doubleArray54 = quarterlyDouble53.dArr;
    double double55 = quarterlyDouble53.getQseqQ();
    double[] doubleArray56 = new double[] {};
    quarterlyDouble53.dArr = doubleArray56;
    quarterlyDouble45.dArr = doubleArray56;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble59 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    quarterlyDouble40.dArr = doubleArray56;
    quarterlyDouble20.dArr = doubleArray56;
    double[] doubleArray62 = quarterlyDouble20.dArr;
    double[] doubleArray63 = quarterlyDouble20.dArr;
    quarterlyDouble5.dArr = doubleArray63;
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5100.0d + "'", double18 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-9999.9999d) + "'", double29 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray33);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray35);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5100.0d + "'", double36 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-9999.9999d) + "'", double48 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray54);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5100.0d + "'", double55 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
    org.junit.Assert.assertNotNull(doubleArray62);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
    org.junit.Assert.assertNotNull(doubleArray63);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
  }

  @Test
  public void test01954() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01954");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList2 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList4 = companyData1.getFdList();
    java.lang.String str5 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.String str8 = companyData1.getTicker();
    java.lang.String str9 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList10 = companyData1.getFdList();
    java.lang.String str11 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList12 = companyData1.getFdList();
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData15 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList12, (int) (byte) 1, (int) (short) 10);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData18 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList12, (int) (short) 0, (int) (byte) 0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData21 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData(fieldDataList12, (int) (short) 10, 0);
    org.junit.Assert.assertNotNull(fieldDataList2);
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertNotNull(fieldDataList4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    org.junit.Assert.assertNotNull(fieldDataList10);
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    org.junit.Assert.assertNotNull(fieldDataList12);
    org.junit.Assert.assertNull(fieldData15);
    org.junit.Assert.assertNull(fieldData18);
    org.junit.Assert.assertNull(fieldData21);
  }

  @Test
  public void test01955() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01955");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get(10);
    double double14 = quarterlyDouble4.getQseqQ();
    double double15 = quarterlyDouble4.getQseqQ();
    double double17 = quarterlyDouble4.get((int) (short) -1);
    double double18 = quarterlyDouble4.getTtmAvg();
    double double19 = quarterlyDouble4.getTtm();
    double[] doubleArray20 = quarterlyDouble4.dArr;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str22 = quarterlyDouble4.fmtGrowth1Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01956() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01956");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    double double13 = quarterlyDouble12.getTtm();
    double double14 = quarterlyDouble12.getTtmAvg();
    double[] doubleArray15 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double[] doubleArray17 = quarterlyDouble16.dArr;
    quarterlyDouble12.dArr = doubleArray17;
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
  }

  @Test
  public void test01957() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01957");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] fieldDataArray0 = new net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData[] {};
    java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList1 = new java.util.ArrayList<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>();
    boolean boolean2 = java.util.Collections.addAll((java.util.Collection<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1,
        fieldDataArray0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData5 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (short) -1, (int) (short) 0);
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData8 = net.ajaskey.market.tools.SIP.BigDB.collation.OneCompanyData
        .getFieldData((java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData>) fieldDataList1, (int) (byte) 1, (int) '4');
    org.junit.Assert.assertNotNull(fieldDataArray0);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNull(fieldData5);
    org.junit.Assert.assertNull(fieldData8);
  }

  @Test
  public void test01958() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01958");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, 0, (int) (short) 10);
  }

  @Test
  public void test01959() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01959");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile((int) (short) 10, 0);
  }

  @Test
  public void test01960() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01960");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get(1);
    double double14 = quarterlyDouble4.getMostRecent();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double double16 = quarterlyDouble4.getTtm();
    double double17 = quarterlyDouble4.getTtmAvg();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
  }

  @Test
  public void test01961() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01961");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double double19 = quarterlyDouble4.deltaQ((int) ' ', 100);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str21 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
  }

  @Test
  public void test01962() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01962");
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.writeBinaryFile(10, (int) (short) 10);
  }

  @Test
  public void test01963() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01963");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, (int) (byte) -1);
    double double19 = quarterlyDouble4.deltaQ((int) (byte) 100, 0);
    double double20 = quarterlyDouble4.getTtm();
    double double21 = quarterlyDouble4.getTtm();
    double double24 = quarterlyDouble4.deltaQ((int) '#', 1);
    double[] doubleArray28 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    double double30 = quarterlyDouble29.getTtm();
    double double31 = quarterlyDouble29.getQseqQ();
    double[] doubleArray32 = quarterlyDouble29.dArr;
    double double33 = quarterlyDouble29.getTtm();
    double[] doubleArray34 = quarterlyDouble29.dArr;
    quarterlyDouble4.dArr = doubleArray34;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str37 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5100.0d + "'", double31 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01964() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01964");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str6 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01965() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01965");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) '#', (int) (short) 100);
  }

  @Test
  public void test01966() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01966");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) (byte) 100);
    double[] doubleArray10 = quarterlyDouble4.dArr;
    double double11 = quarterlyDouble4.getQseqQ();
    double double12 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str14 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5100.0d + "'", double11 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
  }

  @Test
  public void test01967() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01967");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (short) -1, (int) (byte) 1);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01968() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01968");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) ' ');
    double double10 = quarterlyDouble4.getMostRecent();
    double double12 = quarterlyDouble4.get(10);
    double double15 = quarterlyDouble4.deltaQ(10, (int) (short) -1);
    double double16 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str18 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9999.9999d) + "'", double12 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
  }

  @Test
  public void test01969() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01969");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.get((int) '4');
    double[] doubleArray11 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble12 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray11);
    double[] doubleArray13 = quarterlyDouble12.dArr;
    double double14 = quarterlyDouble12.getQseqQ();
    double[] doubleArray15 = new double[] {};
    quarterlyDouble12.dArr = doubleArray15;
    quarterlyDouble4.dArr = doubleArray15;
    double[] doubleArray18 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double double26 = quarterlyDouble25.getTtm();
    double double27 = quarterlyDouble25.getQseqQ();
    double[] doubleArray31 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble32 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray31);
    quarterlyDouble25.dArr = doubleArray31;
    double double34 = quarterlyDouble25.getQseqQ();
    double double37 = quarterlyDouble25.deltaQ((int) (short) 100, (int) (byte) -1);
    double[] doubleArray41 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble42 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    double double43 = quarterlyDouble42.getTtmAvg();
    double double44 = quarterlyDouble42.getMostRecent();
    double double46 = quarterlyDouble42.get((int) 'a');
    double double48 = quarterlyDouble42.get((int) (byte) -1);
    double[] doubleArray52 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    double double54 = quarterlyDouble53.getTtm();
    double double55 = quarterlyDouble53.getQseqQ();
    double[] doubleArray56 = quarterlyDouble53.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble57 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    quarterlyDouble42.dArr = doubleArray56;
    quarterlyDouble25.dArr = doubleArray56;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble60 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    quarterlyDouble20.dArr = doubleArray56;
    double[] doubleArray62 = quarterlyDouble20.dArr;
    double double65 = quarterlyDouble20.deltaQ((int) (short) 1, 0);
    double double66 = quarterlyDouble20.getTtm();
    double double67 = quarterlyDouble20.getTtm();
    double double68 = quarterlyDouble20.getTtmAvg();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5100.0d + "'", double14 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5100.0d + "'", double27 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray31);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5100.0d + "'", double34 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
    org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-9999.9999d) + "'", double46 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-9999.9999d) + "'", double48 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5100.0d + "'", double55 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray62);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
    org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
  }

  @Test
  public void test01970() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01970");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getQseqQ();
    double double10 = quarterlyDouble4.getQseqQ();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get((int) (short) 0);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str15 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5100.0d + "'", double10 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
  }

  @Test
  public void test01971() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01971");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("hi!", 1,
        (int) ' ');
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01972() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01972");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) '4', (int) (byte) 1);
  }

  @Test
  public void test01973() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01973");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double[] doubleArray16 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double double18 = quarterlyDouble17.getTtm();
    double double19 = quarterlyDouble17.getQseqQ();
    double[] doubleArray20 = quarterlyDouble17.dArr;
    double[] doubleArray24 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble25 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    quarterlyDouble17.dArr = doubleArray24;
    double double27 = quarterlyDouble17.getTtm();
    double[] doubleArray28 = quarterlyDouble17.dArr;
    double double29 = quarterlyDouble17.getTtm();
    double[] doubleArray30 = quarterlyDouble17.dArr;
    quarterlyDouble4.dArr = doubleArray30;
    double double32 = quarterlyDouble4.getMostRecent();
    double double34 = quarterlyDouble4.get((int) (byte) -1);
    double double35 = quarterlyDouble4.getTtm();
    double[] doubleArray36 = quarterlyDouble4.dArr;
    double double37 = quarterlyDouble4.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str39 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5100.0d + "'", double19 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-9999.9999d) + "'", double34 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray36);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
  }

  @Test
  public void test01974() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01974");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray9 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble10 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray9);
    double double11 = quarterlyDouble10.getTtm();
    double double13 = quarterlyDouble10.get((int) '4');
    double double16 = quarterlyDouble10.deltaQ((int) (short) 1, 0);
    double[] doubleArray20 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble21 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray20);
    double double22 = quarterlyDouble21.getTtm();
    double double23 = quarterlyDouble21.getQseqQ();
    double[] doubleArray24 = quarterlyDouble21.dArr;
    quarterlyDouble10.dArr = doubleArray24;
    quarterlyDouble5.dArr = doubleArray24;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble27 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray24);
    double[] doubleArray28 = quarterlyDouble27.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble29 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray28);
    double[] doubleArray30 = quarterlyDouble29.dArr;
    double double31 = quarterlyDouble29.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str33 = quarterlyDouble29.fmtGrowth4Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9999.9999d) + "'", double13 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray20);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray24);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray28);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
  }

  @Test
  public void test01975() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01975");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getTtm();
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double17 = quarterlyDouble14.get((int) '4');
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    double[] doubleArray23 = quarterlyDouble22.dArr;
    double double24 = quarterlyDouble22.getQseqQ();
    double[] doubleArray25 = new double[] {};
    quarterlyDouble22.dArr = doubleArray25;
    quarterlyDouble14.dArr = doubleArray25;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble28 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    double[] doubleArray32 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble33 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray32);
    double double34 = quarterlyDouble33.getTtm();
    double double36 = quarterlyDouble33.get((int) '4');
    double[] doubleArray40 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble41 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray40);
    double[] doubleArray42 = quarterlyDouble41.dArr;
    double double43 = quarterlyDouble41.getQseqQ();
    double[] doubleArray44 = new double[] {};
    quarterlyDouble41.dArr = doubleArray44;
    quarterlyDouble33.dArr = doubleArray44;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble47 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray44);
    quarterlyDouble28.dArr = doubleArray44;
    quarterlyDouble8.dArr = doubleArray44;
    double double50 = quarterlyDouble8.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str52 = quarterlyDouble8.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9999.9999d) + "'", double17 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    org.junit.Assert.assertNotNull(doubleArray32);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9999.9999d) + "'", double36 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray40);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5100.0d + "'", double43 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
  }

  @Test
  public void test01976() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01976");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) 1, (-1));
  }

  @Test
  public void test01977() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01977");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.getMostRecent();
    double double11 = quarterlyDouble4.get((int) '4');
    double double14 = quarterlyDouble4.deltaQ((int) (byte) 100, (int) (short) 10);
    double double15 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.getMostRecent();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str18 = quarterlyDouble4.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9999.9999d) + "'", double11 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
  }

  @Test
  public void test01978() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01978");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double7 = quarterlyDouble5.get(100);
    double[] doubleArray8 = quarterlyDouble5.dArr;
    double double11 = quarterlyDouble5.deltaQ((int) '4', (int) (byte) 0);
    double[] doubleArray15 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble16 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray15);
    double double17 = quarterlyDouble16.getTtm();
    double double19 = quarterlyDouble16.get((int) '4');
    double[] doubleArray23 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble24 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray23);
    double[] doubleArray25 = quarterlyDouble24.dArr;
    double double26 = quarterlyDouble24.getQseqQ();
    double[] doubleArray27 = new double[] {};
    quarterlyDouble24.dArr = doubleArray27;
    quarterlyDouble16.dArr = doubleArray27;
    double[] doubleArray30 = quarterlyDouble16.dArr;
    quarterlyDouble5.dArr = doubleArray30;
    // The following exception was thrown during execution in test generation
    try {
      double double32 = quarterlyDouble5.getMostRecent();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9999.9999d) + "'", double7 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9999.9999d) + "'", double19 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray23);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5100.0d + "'", double26 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray27);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
  }

  @Test
  public void test01979() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01979");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray19 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble20 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray19);
    double[] doubleArray21 = quarterlyDouble20.dArr;
    double[] doubleArray22 = quarterlyDouble20.dArr;
    quarterlyDouble4.dArr = doubleArray22;
    double double24 = quarterlyDouble4.getQseqQ();
    double double25 = quarterlyDouble4.getTtm();
    double[] doubleArray29 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble30 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray29);
    double double31 = quarterlyDouble30.getTtm();
    double double33 = quarterlyDouble30.get((int) '4');
    double[] doubleArray37 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble38 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray37);
    double[] doubleArray39 = quarterlyDouble38.dArr;
    double double40 = quarterlyDouble38.getQseqQ();
    double[] doubleArray41 = new double[] {};
    quarterlyDouble38.dArr = doubleArray41;
    quarterlyDouble30.dArr = doubleArray41;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble44 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray41);
    double[] doubleArray48 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble49 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray48);
    double double50 = quarterlyDouble49.getTtm();
    double double52 = quarterlyDouble49.get((int) '4');
    double[] doubleArray56 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble57 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray56);
    double[] doubleArray58 = quarterlyDouble57.dArr;
    double double59 = quarterlyDouble57.getQseqQ();
    double[] doubleArray60 = new double[] {};
    quarterlyDouble57.dArr = doubleArray60;
    quarterlyDouble49.dArr = doubleArray60;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble63 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray60);
    quarterlyDouble44.dArr = doubleArray60;
    double[] doubleArray65 = quarterlyDouble44.dArr;
    quarterlyDouble4.dArr = doubleArray65;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble67 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble68 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble69 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray65);
    // The following exception was thrown during execution in test generation
    try {
      double double70 = quarterlyDouble69.getMostRecent();
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray19);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray22);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5100.0d + "'", double24 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray29);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-9999.9999d) + "'", double33 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray37);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray39);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5100.0d + "'", double40 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray41);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
    org.junit.Assert.assertNotNull(doubleArray48);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-9999.9999d) + "'", double52 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray56);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray58);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double59 + "' != '" + 5100.0d + "'", double59 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray60);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
    org.junit.Assert.assertNotNull(doubleArray65);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
  }

  @Test
  public void test01980() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01980");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) 10, (int) (short) 100);
  }

  @Test
  public void test01981() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01981");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList3 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList4 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList6 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList9 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (int) 'a', (int) (byte) 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList10 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList13 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, 100, (int) (byte) 1);
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(manyCompanyDataList3);
    org.junit.Assert.assertNotNull(companyDataList4);
    org.junit.Assert.assertNotNull(companyDataList5);
    org.junit.Assert.assertNotNull(companyDataList6);
    org.junit.Assert.assertNotNull(companyDataList9);
    org.junit.Assert.assertNotNull(companyDataList10);
    org.junit.Assert.assertNotNull(companyDataList13);
  }

  @Test
  public void test01982() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01982");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    quarterlyDouble4.dArr = doubleArray12;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble17 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray16);
    double double18 = quarterlyDouble17.getTtmAvg();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str20 = quarterlyDouble17.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
  }

  @Test
  public void test01983() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01983");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray18 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    double double20 = quarterlyDouble19.getTtm();
    double double21 = quarterlyDouble19.getQseqQ();
    double[] doubleArray25 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    quarterlyDouble19.dArr = doubleArray25;
    double double28 = quarterlyDouble19.getQseqQ();
    double double29 = quarterlyDouble19.getTtmAvg();
    double double30 = quarterlyDouble19.getTtm();
    double[] doubleArray34 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble35 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray34);
    double double36 = quarterlyDouble35.getTtm();
    double double37 = quarterlyDouble35.getQseqQ();
    double[] doubleArray38 = quarterlyDouble35.dArr;
    quarterlyDouble19.dArr = doubleArray38;
    quarterlyDouble4.dArr = doubleArray38;
    double double41 = quarterlyDouble4.getMostRecent();
    double double42 = quarterlyDouble4.getTtm();
    double double43 = quarterlyDouble4.getMostRecent();
    double double45 = quarterlyDouble4.get((int) '#');
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str47 = quarterlyDouble4.fmtGrowth4Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5100.0d + "'", double21 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 5100.0d + "'", double28 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5100.0d + "'", double37 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray38);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
    org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 52.0d + "'", double43 == 52.0d);
    org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-9999.9999d) + "'", double45 == (-9999.9999d));
  }

  @Test
  public void test01984() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01984");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) ' ', 0);
  }

  @Test
  public void test01986() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01986");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray5 = quarterlyDouble4.dArr;
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (short) 10);
    double[] doubleArray13 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble14 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray13);
    double double15 = quarterlyDouble14.getTtm();
    double double16 = quarterlyDouble14.getQseqQ();
    double[] doubleArray17 = quarterlyDouble14.dArr;
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    quarterlyDouble14.dArr = doubleArray21;
    double double24 = quarterlyDouble14.getTtm();
    double[] doubleArray25 = quarterlyDouble14.dArr;
    double double26 = quarterlyDouble14.getQseqQ();
    double[] doubleArray30 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble31 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray30);
    double double32 = quarterlyDouble31.getTtm();
    double double33 = quarterlyDouble31.getQseqQ();
    double[] doubleArray34 = quarterlyDouble31.dArr;
    double[] doubleArray38 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble39 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray38);
    quarterlyDouble31.dArr = doubleArray38;
    double double41 = quarterlyDouble31.getTtm();
    double[] doubleArray42 = quarterlyDouble31.dArr;
    double double43 = quarterlyDouble31.getTtm();
    double[] doubleArray44 = quarterlyDouble31.dArr;
    double[] doubleArray48 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble49 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray48);
    double double50 = quarterlyDouble49.getTtm();
    double double51 = quarterlyDouble49.getQseqQ();
    double[] doubleArray52 = quarterlyDouble49.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble53 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble54 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble55 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray52);
    quarterlyDouble31.dArr = doubleArray52;
    quarterlyDouble14.dArr = doubleArray52;
    quarterlyDouble4.dArr = doubleArray52;
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5100.0d + "'", double16 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5100.0d + "'", double26 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray30);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5100.0d + "'", double33 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray34);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray38);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray42);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray44);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray48);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    org.junit.Assert.assertTrue("'" + double51 + "' != '" + 5100.0d + "'", double51 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray52);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 52.0, 1.0]");
  }

  @Test
  public void test01987() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01987");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompany("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)", (int) ' ', (int) (short) -1);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01988() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01988");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (byte) 10, (int) (byte) 10);
  }

  @Test
  public void test01989() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01989");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getQseqQ();
    double double10 = quarterlyDouble4.getQseqQ();
    double double11 = quarterlyDouble4.getQseqQ();
    java.lang.Class<?> wildcardClass12 = quarterlyDouble4.getClass();
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5100.0d + "'", double9 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5100.0d + "'", double10 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5100.0d + "'", double11 == 5100.0d);
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test01990() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01990");
    net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData fieldData3 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getCompany("",
        (int) (byte) 1, (int) (short) 10);
    org.junit.Assert.assertNull(fieldData3);
  }

  @Test
  public void test01991() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01991");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble5 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double[] doubleArray6 = quarterlyDouble5.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble7 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray6);
    double double8 = quarterlyDouble7.getMostRecent();
    double[] doubleArray12 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble13 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray12);
    double double14 = quarterlyDouble13.getTtm();
    double double15 = quarterlyDouble13.getQseqQ();
    double[] doubleArray16 = quarterlyDouble13.dArr;
    double double17 = quarterlyDouble13.getQseqQ();
    double[] doubleArray21 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble22 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble23 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray21);
    quarterlyDouble13.dArr = doubleArray21;
    double[] doubleArray25 = quarterlyDouble13.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble26 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray25);
    quarterlyDouble7.dArr = doubleArray25;
    double double28 = quarterlyDouble7.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str30 = quarterlyDouble7.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
    org.junit.Assert.assertNotNull(doubleArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5100.0d + "'", double15 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray21);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray25);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double28 + "' != '" + 5100.0d + "'", double28 == 5100.0d);
  }

  @Test
  public void test01992() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01992");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getMostRecent();
    double double8 = quarterlyDouble4.get((int) 'a');
    double double10 = quarterlyDouble4.get((int) (byte) -1);
    double[] doubleArray14 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble15 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray14);
    double double16 = quarterlyDouble15.getTtm();
    double double17 = quarterlyDouble15.getQseqQ();
    double[] doubleArray18 = quarterlyDouble15.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble19 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray18);
    quarterlyDouble4.dArr = doubleArray18;
    double double21 = quarterlyDouble4.getQseqQ();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str23 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9999.9999d) + "'", double8 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9999.9999d) + "'", double10 == (-9999.9999d));
    org.junit.Assert.assertNotNull(doubleArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5100.0d + "'", double21 == 5100.0d);
  }

  @Test
  public void test01993() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01993");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double8 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.getTtmAvg();
    double double10 = quarterlyDouble4.getTtm();
    double[] doubleArray11 = quarterlyDouble4.dArr;
    double double13 = quarterlyDouble4.get(1);
    double double14 = quarterlyDouble4.getMostRecent();
    double double16 = quarterlyDouble4.get((int) (short) 100);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str18 = quarterlyDouble4.fmtGrowth4Q("\thi!               :          0.00 M (Seq=    0.00% : QoQ=    0.00%)");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5100.0d + "'", double8 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9999.9999d) + "'", double16 == (-9999.9999d));
  }

  @Test
  public void test01994() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01994");
    net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData companyData1 = new net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData("");
    java.lang.String str2 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList3 = companyData1.getFdList();
    java.lang.String str4 = companyData1.getTicker();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList5 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList6 = companyData1.getFdList();
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.dataio.FieldData> fieldDataList7 = companyData1.getFdList();
    java.lang.Class<?> wildcardClass8 = companyData1.getClass();
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    org.junit.Assert.assertNotNull(fieldDataList3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    org.junit.Assert.assertNotNull(fieldDataList5);
    org.junit.Assert.assertNotNull(fieldDataList6);
    org.junit.Assert.assertNotNull(fieldDataList7);
    org.junit.Assert.assertNotNull(wildcardClass8);
  }

  @Test
  public void test01995() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01995");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double6 = quarterlyDouble4.get((int) (byte) 1);
    double double7 = quarterlyDouble4.getQseqQ();
    double double9 = quarterlyDouble4.get((int) (byte) 1);
    double double12 = quarterlyDouble4.deltaQ((int) (byte) 1, 0);
    double double13 = quarterlyDouble4.getQseqQ();
    double double16 = quarterlyDouble4.deltaQ((int) (short) 100, 1);
    double double17 = quarterlyDouble4.getQseqQ();
    double double18 = quarterlyDouble4.getTtmAvg();
    double double21 = quarterlyDouble4.deltaQ((int) (byte) 10, (int) ' ');
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str23 = quarterlyDouble4.fmtGrowth1Q("");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5100.0d + "'", double7 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5100.0d + "'", double17 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
  }

  @Test
  public void test01996() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01996");
    net.ajaskey.market.tools.SIP.BigDB.dataio.CompanyFileData companyFileData0 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.EstimateFileData estimateFileData1 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.SharesFileData sharesFileData2 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.IncSheetFileData incSheetFileData3 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.BalSheetFileData balSheetFileData4 = null;
    net.ajaskey.market.tools.SIP.BigDB.dataio.CashFileData cashFileData5 = null;
    net.ajaskey.market.tools.SIP.BigDB.collation.FieldDataBinary.add(companyFileData0, estimateFileData1, sharesFileData2, incSheetFileData3,
        balSheetFileData4, cashFileData5, (int) (short) -1, (int) (byte) 0);
  }

  @Test
  public void test01997() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01997");
    java.util.List<java.lang.String> strList2 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData.getTickers((int) ' ', (int) 'a');
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList5 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (int) (byte) 10, 1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList8 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (int) (short) -1, (int) (byte) -1);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList11 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, 1, 100);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData> manyCompanyDataList12 = net.ajaskey.market.tools.SIP.BigDB.collation.ManyCompanyData
        .createList(strList2);
    java.util.List<net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData> companyDataList15 = net.ajaskey.market.tools.SIP.BigDB.collation.CompanyData
        .getCompanies(strList2, (int) '#', (int) (short) 1);
    org.junit.Assert.assertNotNull(strList2);
    org.junit.Assert.assertNotNull(companyDataList5);
    org.junit.Assert.assertNotNull(companyDataList8);
    org.junit.Assert.assertNotNull(companyDataList11);
    org.junit.Assert.assertNotNull(manyCompanyDataList12);
    org.junit.Assert.assertNotNull(companyDataList15);
  }

  @Test
  public void test01998() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01998");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtmAvg();
    double double6 = quarterlyDouble4.getTtm();
    double double7 = quarterlyDouble4.getTtmAvg();
    double double9 = quarterlyDouble4.get((int) ' ');
    double double10 = quarterlyDouble4.getMostRecent();
    double double12 = quarterlyDouble4.get(10);
    double double13 = quarterlyDouble4.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str15 = quarterlyDouble4.fmtGrowth1Q("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9999.9999d) + "'", double9 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9999.9999d) + "'", double12 == (-9999.9999d));
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
  }

  @Test
  public void test01999() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test01999");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray7 = quarterlyDouble4.dArr;
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble8 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray7);
    double double9 = quarterlyDouble8.getTtmAvg();
    double double10 = quarterlyDouble8.getTtm();
    double double11 = quarterlyDouble8.getTtm();
    // The following exception was thrown during execution in test generation
    try {
      double double14 = quarterlyDouble8.deltaQ((int) (byte) -1, (int) '#');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
    }
    catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
  }

  @Test
  public void test02000() throws Throwable {
    if (debug) System.out.format("%n%s%n", "CollationTests3.test02000");
    double[] doubleArray3 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble4 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray3);
    double double5 = quarterlyDouble4.getTtm();
    double double6 = quarterlyDouble4.getQseqQ();
    double[] doubleArray10 = new double[] { 10.0d, '4', (short) 1 };
    net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble quarterlyDouble11 = new net.ajaskey.market.tools.SIP.BigDB.collation.QuarterlyDouble(
        doubleArray10);
    quarterlyDouble4.dArr = doubleArray10;
    double double13 = quarterlyDouble4.getQseqQ();
    double double14 = quarterlyDouble4.getTtmAvg();
    double[] doubleArray15 = quarterlyDouble4.dArr;
    double[] doubleArray16 = quarterlyDouble4.dArr;
    double double17 = quarterlyDouble4.getTtmAvg();
    double double18 = quarterlyDouble4.getTtm();
    double double20 = quarterlyDouble4.get(100);
    double[] doubleArray21 = null;
    quarterlyDouble4.dArr = doubleArray21;
    org.junit.Assert.assertNotNull(doubleArray3);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5100.0d + "'", double6 == 5100.0d);
    org.junit.Assert.assertNotNull(doubleArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5100.0d + "'", double13 == 5100.0d);
    org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    org.junit.Assert.assertNotNull(doubleArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertNotNull(doubleArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0]");
    org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-9999.9999d) + "'", double20 == (-9999.9999d));
  }
}
